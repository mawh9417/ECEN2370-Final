
MWhitneyLabFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093e0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000127c  08009590  08009590  0000a590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a80c  0800a80c  0000c078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a80c  0800a80c  0000b80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a814  0800a814  0000c078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a814  0800a814  0000b814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a818  0800a818  0000b818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800a81c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c078  2**0
                  CONTENTS
 10 .bss          00025bd0  20000078  20000078  0000c078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025c48  20025c48  0000c078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014eca  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000391f  00000000  00000000  00020f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  00024898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000114a  00000000  00000000  00025f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028275  00000000  00000000  00027072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b32e  00000000  00000000  0004f2e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4497  00000000  00000000  0006a615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014eaac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006598  00000000  00000000  0014eaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00155088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009578 	.word	0x08009578

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08009578 	.word	0x08009578

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f004 fb1c 	bl	8004bc0 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f003 f804 	bl	8003594 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f002 ffc1 	bl	8003514 <LTCD_Layer_Init>
    RNG_Init();
 8000592:	f003 fa33 	bl	80039fc <RNG_Init>
    TIM6_Init();
 8000596:	f003 fa99 	bl	8003acc <TIM6_Init>
    buttonInterruptInit();
 800059a:	f000 f817 	bl	80005cc <buttonInterruptInit>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800059e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005a2:	2000      	movs	r0, #0
 80005a4:	f003 f8dc 	bl	8003760 <LCD_Clear>
    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005a8:	f003 f9fc 	bl	80039a4 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005ac:	4b03      	ldr	r3, [pc, #12]	@ (80005bc <ApplicationInit+0x3c>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005b2:	f000 f811 	bl	80005d8 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000094 	.word	0x20000094

080005c0 <Application_Execute_Game>:
{
	visualDemo();
}

void Application_Execute_Game()
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	executeGame();
 80005c4:	f002 fe92 	bl	80032ec <executeGame>
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}

080005cc <buttonInterruptInit>:
		}
	}
}

void buttonInterruptInit()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	initializeInterruptMode();
 80005d0:	f000 f900 	bl	80007d4 <initializeInterruptMode>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 80005ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005f0:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005f2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005f6:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fc:	2302      	movs	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	4b0d      	ldr	r3, [pc, #52]	@ (800063c <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000608:	4a0c      	ldr	r2, [pc, #48]	@ (800063c <LCDTouchScreenInterruptGPIOInit+0x64>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000610:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4619      	mov	r1, r3
 8000620:	4807      	ldr	r0, [pc, #28]	@ (8000640 <LCDTouchScreenInterruptGPIOInit+0x68>)
 8000622:	f004 fded 	bl	8005200 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000626:	2028      	movs	r0, #40	@ 0x28
 8000628:	f004 fd9b 	bl	8005162 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 800062c:	4b05      	ldr	r3, [pc, #20]	@ (8000644 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 800062e:	4a06      	ldr	r2, [pc, #24]	@ (8000648 <LCDTouchScreenInterruptGPIOInit+0x70>)
 8000630:	601a      	str	r2, [r3, #0]
}
 8000632:	bf00      	nop
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40020000 	.word	0x40020000
 8000644:	2000009c 	.word	0x2000009c
 8000648:	0600000f 	.word	0x0600000f

0800064c <EXTI15_10_IRQHandler>:

////////////// EXTI INTERRUPT HANDLERS BELOW //////////////


void EXTI15_10_IRQHandler()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 8000652:	2028      	movs	r0, #40	@ 0x28
 8000654:	f004 fd93 	bl	800517e <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]

	static uint32_t count;
	count = 0;
 800065c:	4b49      	ldr	r3, [pc, #292]	@ (8000784 <EXTI15_10_IRQHandler+0x138>)
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000662:	e006      	b.n	8000672 <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000664:	204c      	movs	r0, #76	@ 0x4c
 8000666:	f004 f942 	bl	80048ee <STMPE811_Read>
 800066a:	4603      	mov	r3, r0
 800066c:	461a      	mov	r2, r3
 800066e:	4b45      	ldr	r3, [pc, #276]	@ (8000784 <EXTI15_10_IRQHandler+0x138>)
 8000670:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000672:	4b44      	ldr	r3, [pc, #272]	@ (8000784 <EXTI15_10_IRQHandler+0x138>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f4      	beq.n	8000664 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 800067a:	200a      	movs	r0, #10
 800067c:	f003 f99d 	bl	80039ba <ReadRegisterFromTouchModule>
 8000680:	4603      	mov	r3, r0
 8000682:	71fb      	strb	r3, [r7, #7]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000684:	2100      	movs	r1, #0
 8000686:	200a      	movs	r0, #10
 8000688:	f003 f9a5 	bl	80039d6 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 800068c:	200b      	movs	r0, #11
 800068e:	f003 f994 	bl	80039ba <ReadRegisterFromTouchModule>
 8000692:	4603      	mov	r3, r0
 8000694:	461a      	mov	r2, r3
 8000696:	4b3c      	ldr	r3, [pc, #240]	@ (8000788 <EXTI15_10_IRQHandler+0x13c>)
 8000698:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 800069a:	4b3b      	ldr	r3, [pc, #236]	@ (8000788 <EXTI15_10_IRQHandler+0x13c>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	4619      	mov	r1, r3
 80006a8:	200b      	movs	r0, #11
 80006aa:	f003 f994 	bl	80039d6 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 80006ae:	2040      	movs	r0, #64	@ 0x40
 80006b0:	f003 f983 	bl	80039ba <ReadRegisterFromTouchModule>
 80006b4:	4603      	mov	r3, r0
 80006b6:	717b      	strb	r3, [r7, #5]
	if (ctrlReg & 0x80)
 80006b8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	da01      	bge.n	80006c4 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 80006c0:	2301      	movs	r3, #1
 80006c2:	73fb      	strb	r3, [r7, #15]
	}
	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d03c      	beq.n	8000744 <EXTI15_10_IRQHandler+0xf8>
	{
		if (game_start == 0) // skips once cycle of the move process to allow for menu operation
 80006ca:	4b30      	ldr	r3, [pc, #192]	@ (800078c <EXTI15_10_IRQHandler+0x140>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d11f      	bne.n	8000712 <EXTI15_10_IRQHandler+0xc6>
		{
			LCD_Clear(0, LCD_COLOR_WHITE);
 80006d2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80006d6:	2000      	movs	r0, #0
 80006d8:	f003 f842 	bl	8003760 <LCD_Clear>
			addSchedulerEvent(GAME_EVENT);
 80006dc:	2008      	movs	r0, #8
 80006de:	f003 f9e3 	bl	8003aa8 <addSchedulerEvent>
			for (int i = 312; i <= 319; i++) {
 80006e2:	f44f 739c 	mov.w	r3, #312	@ 0x138
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	e009      	b.n	80006fe <EXTI15_10_IRQHandler+0xb2>
				LCD_Draw_Horizontal_Line(0, i, 240, LCD_COLOR_BLACK);
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	b299      	uxth	r1, r3
 80006ee:	2300      	movs	r3, #0
 80006f0:	22f0      	movs	r2, #240	@ 0xf0
 80006f2:	2000      	movs	r0, #0
 80006f4:	f003 f80d 	bl	8003712 <LCD_Draw_Horizontal_Line>
			for (int i = 312; i <= 319; i++) {
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	3301      	adds	r3, #1
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000704:	dbf1      	blt.n	80006ea <EXTI15_10_IRQHandler+0x9e>
			}
			game_start++;
 8000706:	4b21      	ldr	r3, [pc, #132]	@ (800078c <EXTI15_10_IRQHandler+0x140>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	4a1f      	ldr	r2, [pc, #124]	@ (800078c <EXTI15_10_IRQHandler+0x140>)
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	e018      	b.n	8000744 <EXTI15_10_IRQHandler+0xf8>
		}
		else if (game_start >= 1)
 8000712:	4b1e      	ldr	r3, [pc, #120]	@ (800078c <EXTI15_10_IRQHandler+0x140>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	dd14      	ble.n	8000744 <EXTI15_10_IRQHandler+0xf8>
		{
			uint8_t touchLocation = ReadRegisterFromTouchModule(STMPE811_TSC_DATA_X);
 800071a:	204d      	movs	r0, #77	@ 0x4d
 800071c:	f003 f94d 	bl	80039ba <ReadRegisterFromTouchModule>
 8000720:	4603      	mov	r3, r0
 8000722:	713b      	strb	r3, [r7, #4]
			printf("X_Data Register: %d", touchLocation);
 8000724:	793b      	ldrb	r3, [r7, #4]
 8000726:	4619      	mov	r1, r3
 8000728:	4819      	ldr	r0, [pc, #100]	@ (8000790 <EXTI15_10_IRQHandler+0x144>)
 800072a:	f008 f8b7 	bl	800889c <iprintf>
			if (touchLocation > 60) // right side screen touched
 800072e:	793b      	ldrb	r3, [r7, #4]
 8000730:	2b3c      	cmp	r3, #60	@ 0x3c
 8000732:	d902      	bls.n	800073a <EXTI15_10_IRQHandler+0xee>
			{
				moveOneLeft();
 8000734:	f001 feba 	bl	80024ac <moveOneLeft>
 8000738:	e004      	b.n	8000744 <EXTI15_10_IRQHandler+0xf8>
			}
			else if (touchLocation <= 60) // left side screen touched
 800073a:	793b      	ldrb	r3, [r7, #4]
 800073c:	2b3c      	cmp	r3, #60	@ 0x3c
 800073e:	d801      	bhi.n	8000744 <EXTI15_10_IRQHandler+0xf8>
			{
				moveOneRight();
 8000740:	f002 f8d0 	bl	80028e4 <moveOneRight>
			}
		}
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 8000744:	2101      	movs	r1, #1
 8000746:	204b      	movs	r0, #75	@ 0x4b
 8000748:	f004 f8e2 	bl	8004910 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 800074c:	2100      	movs	r1, #0
 800074e:	204b      	movs	r0, #75	@ 0x4b
 8000750:	f004 f8de 	bl	8004910 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	4619      	mov	r1, r3
 8000758:	200a      	movs	r0, #10
 800075a:	f003 f93c 	bl	80039d6 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 800075e:	2103      	movs	r1, #3
 8000760:	480c      	ldr	r0, [pc, #48]	@ (8000794 <EXTI15_10_IRQHandler+0x148>)
 8000762:	f004 fd35 	bl	80051d0 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000766:	2028      	movs	r0, #40	@ 0x28
 8000768:	f004 fd23 	bl	80051b2 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800076c:	2028      	movs	r0, #40	@ 0x28
 800076e:	f004 fcf8 	bl	8005162 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000772:	79bb      	ldrb	r3, [r7, #6]
 8000774:	4619      	mov	r1, r3
 8000776:	200b      	movs	r0, #11
 8000778:	f003 f92d 	bl	80039d6 <WriteDataToTouchModule>
}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200000ac 	.word	0x200000ac
 8000788:	200000a8 	.word	0x200000a8
 800078c:	200000a4 	.word	0x200000a4
 8000790:	080095b4 	.word	0x080095b4
 8000794:	2000009c 	.word	0x2000009c

08000798 <EXTI0_IRQHandler>:
#endif // COMPILE_TOUCH_FUNCTIONS

// need EXTI controller for each PA# (EXTI#...)

void EXTI0_IRQHandler()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	EXTI_HandleTypeDef localStruct = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
	localStruct.Line = EXTI_LINE_0;
 80007a6:	f04f 63c0 	mov.w	r3, #100663296	@ 0x6000000
 80007aa:	603b      	str	r3, [r7, #0]
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80007ac:	2006      	movs	r0, #6
 80007ae:	f004 fce6 	bl	800517e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80007b2:	2006      	movs	r0, #6
 80007b4:	f004 fcfd 	bl	80051b2 <HAL_NVIC_ClearPendingIRQ>
	HAL_EXTI_ClearPending(&localStruct, EXTI_TRIGGER_RISING);
 80007b8:	463b      	mov	r3, r7
 80007ba:	2101      	movs	r1, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f004 fd07 	bl	80051d0 <HAL_EXTI_ClearPending>
	rotateShape();
 80007c2:	f001 fa71 	bl	8001ca8 <rotateShape>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007c6:	2006      	movs	r0, #6
 80007c8:	f004 fccb 	bl	8005162 <HAL_NVIC_EnableIRQ>
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <initializeInterruptMode>:
		return false;
	}
}

void initializeInterruptMode()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef localStruct2 = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
	//GPIO_PinConfig_t localStruct2 = {0};
	localStruct2.Pin = GPIO_PIN_0;
 80007e8:	2301      	movs	r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
	localStruct2.Mode = GPIO_MODE_IT_RISING;
 80007ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007f0:	60bb      	str	r3, [r7, #8]
	localStruct2.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	613b      	str	r3, [r7, #16]
	localStruct2.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <initializeInterruptMode+0x5c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a0b      	ldr	r2, [pc, #44]	@ (8000830 <initializeInterruptMode+0x5c>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <initializeInterruptMode+0x5c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &localStruct2);
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4619      	mov	r1, r3
 800081a:	4806      	ldr	r0, [pc, #24]	@ (8000834 <initializeInterruptMode+0x60>)
 800081c:	f004 fcf0 	bl	8005200 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(GPIOG_OFFSET);
 8000820:	2006      	movs	r0, #6
 8000822:	f004 fc9e 	bl	8005162 <HAL_NVIC_EnableIRQ>
	//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
	//NVIC_ToggleGPIOPeripheral(EXTI0_IRQ_NUMBER, ENABLE);
}
 8000826:	bf00      	nop
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40020000 	.word	0x40020000

08000838 <gameDelay>:
// what shape is active
int shape_is = 0;
int time_seconds = 0;

void gameDelay()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 800083c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000840:	f004 fb32 	bl	8004ea8 <HAL_Delay>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <screenOne>:

// main menu
void screenOne()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	TIM6_Start();
 800084c:	f003 f96e 	bl	8003b2c <TIM6_Start>
	// TETRIS Press the Screen to Begin
	LCD_Clear(0, LCD_COLOR_WHITE);
 8000850:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000854:	2000      	movs	r0, #0
 8000856:	f002 ff83 	bl	8003760 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800085a:	2000      	movs	r0, #0
 800085c:	f002 ffa2 	bl	80037a4 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000860:	485b      	ldr	r0, [pc, #364]	@ (80009d0 <screenOne+0x188>)
 8000862:	f002 ffaf 	bl	80037c4 <LCD_SetFont>
	LCD_DisplayChar(100,40,'T');
 8000866:	2254      	movs	r2, #84	@ 0x54
 8000868:	2128      	movs	r1, #40	@ 0x28
 800086a:	2064      	movs	r0, #100	@ 0x64
 800086c:	f003 f828 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(115,40,'E');
 8000870:	2245      	movs	r2, #69	@ 0x45
 8000872:	2128      	movs	r1, #40	@ 0x28
 8000874:	2073      	movs	r0, #115	@ 0x73
 8000876:	f003 f823 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(130,40,'T');
 800087a:	2254      	movs	r2, #84	@ 0x54
 800087c:	2128      	movs	r1, #40	@ 0x28
 800087e:	2082      	movs	r0, #130	@ 0x82
 8000880:	f003 f81e 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(140,40,'R');
 8000884:	2252      	movs	r2, #82	@ 0x52
 8000886:	2128      	movs	r1, #40	@ 0x28
 8000888:	208c      	movs	r0, #140	@ 0x8c
 800088a:	f003 f819 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(150,40,'I');
 800088e:	2249      	movs	r2, #73	@ 0x49
 8000890:	2128      	movs	r1, #40	@ 0x28
 8000892:	2096      	movs	r0, #150	@ 0x96
 8000894:	f003 f814 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(160,40,'S');
 8000898:	2253      	movs	r2, #83	@ 0x53
 800089a:	2128      	movs	r1, #40	@ 0x28
 800089c:	20a0      	movs	r0, #160	@ 0xa0
 800089e:	f003 f80f 	bl	80038c0 <LCD_DisplayChar>

	LCD_DisplayChar(100,60,'P');
 80008a2:	2250      	movs	r2, #80	@ 0x50
 80008a4:	213c      	movs	r1, #60	@ 0x3c
 80008a6:	2064      	movs	r0, #100	@ 0x64
 80008a8:	f003 f80a 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(115,60,'r');
 80008ac:	2272      	movs	r2, #114	@ 0x72
 80008ae:	213c      	movs	r1, #60	@ 0x3c
 80008b0:	2073      	movs	r0, #115	@ 0x73
 80008b2:	f003 f805 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(125,60,'e');
 80008b6:	2265      	movs	r2, #101	@ 0x65
 80008b8:	213c      	movs	r1, #60	@ 0x3c
 80008ba:	207d      	movs	r0, #125	@ 0x7d
 80008bc:	f003 f800 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(135,60,'s');
 80008c0:	2273      	movs	r2, #115	@ 0x73
 80008c2:	213c      	movs	r1, #60	@ 0x3c
 80008c4:	2087      	movs	r0, #135	@ 0x87
 80008c6:	f002 fffb 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(145,60,'s');
 80008ca:	2273      	movs	r2, #115	@ 0x73
 80008cc:	213c      	movs	r1, #60	@ 0x3c
 80008ce:	2091      	movs	r0, #145	@ 0x91
 80008d0:	f002 fff6 	bl	80038c0 <LCD_DisplayChar>

	LCD_DisplayChar(100,80,'t');
 80008d4:	2274      	movs	r2, #116	@ 0x74
 80008d6:	2150      	movs	r1, #80	@ 0x50
 80008d8:	2064      	movs	r0, #100	@ 0x64
 80008da:	f002 fff1 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(110,80,'h');
 80008de:	2268      	movs	r2, #104	@ 0x68
 80008e0:	2150      	movs	r1, #80	@ 0x50
 80008e2:	206e      	movs	r0, #110	@ 0x6e
 80008e4:	f002 ffec 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(122,80,'e');
 80008e8:	2265      	movs	r2, #101	@ 0x65
 80008ea:	2150      	movs	r1, #80	@ 0x50
 80008ec:	207a      	movs	r0, #122	@ 0x7a
 80008ee:	f002 ffe7 	bl	80038c0 <LCD_DisplayChar>

	LCD_DisplayChar(100,100,'S');
 80008f2:	2253      	movs	r2, #83	@ 0x53
 80008f4:	2164      	movs	r1, #100	@ 0x64
 80008f6:	2064      	movs	r0, #100	@ 0x64
 80008f8:	f002 ffe2 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(115,100,'c');
 80008fc:	2263      	movs	r2, #99	@ 0x63
 80008fe:	2164      	movs	r1, #100	@ 0x64
 8000900:	2073      	movs	r0, #115	@ 0x73
 8000902:	f002 ffdd 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(125,100,'r');
 8000906:	2272      	movs	r2, #114	@ 0x72
 8000908:	2164      	movs	r1, #100	@ 0x64
 800090a:	207d      	movs	r0, #125	@ 0x7d
 800090c:	f002 ffd8 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(135,100,'e');
 8000910:	2265      	movs	r2, #101	@ 0x65
 8000912:	2164      	movs	r1, #100	@ 0x64
 8000914:	2087      	movs	r0, #135	@ 0x87
 8000916:	f002 ffd3 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(145,100,'e');
 800091a:	2265      	movs	r2, #101	@ 0x65
 800091c:	2164      	movs	r1, #100	@ 0x64
 800091e:	2091      	movs	r0, #145	@ 0x91
 8000920:	f002 ffce 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(155,100,'n');
 8000924:	226e      	movs	r2, #110	@ 0x6e
 8000926:	2164      	movs	r1, #100	@ 0x64
 8000928:	209b      	movs	r0, #155	@ 0x9b
 800092a:	f002 ffc9 	bl	80038c0 <LCD_DisplayChar>

	LCD_DisplayChar(100,120,'t');
 800092e:	2274      	movs	r2, #116	@ 0x74
 8000930:	2178      	movs	r1, #120	@ 0x78
 8000932:	2064      	movs	r0, #100	@ 0x64
 8000934:	f002 ffc4 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(110,120,'o');
 8000938:	226f      	movs	r2, #111	@ 0x6f
 800093a:	2178      	movs	r1, #120	@ 0x78
 800093c:	206e      	movs	r0, #110	@ 0x6e
 800093e:	f002 ffbf 	bl	80038c0 <LCD_DisplayChar>

	LCD_DisplayChar(100,140,'B');
 8000942:	2242      	movs	r2, #66	@ 0x42
 8000944:	218c      	movs	r1, #140	@ 0x8c
 8000946:	2064      	movs	r0, #100	@ 0x64
 8000948:	f002 ffba 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(110,140,'e');
 800094c:	2265      	movs	r2, #101	@ 0x65
 800094e:	218c      	movs	r1, #140	@ 0x8c
 8000950:	206e      	movs	r0, #110	@ 0x6e
 8000952:	f002 ffb5 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'g');
 8000956:	2267      	movs	r2, #103	@ 0x67
 8000958:	218c      	movs	r1, #140	@ 0x8c
 800095a:	207d      	movs	r0, #125	@ 0x7d
 800095c:	f002 ffb0 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(135,140,'i');
 8000960:	2269      	movs	r2, #105	@ 0x69
 8000962:	218c      	movs	r1, #140	@ 0x8c
 8000964:	2087      	movs	r0, #135	@ 0x87
 8000966:	f002 ffab 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'n');
 800096a:	226e      	movs	r2, #110	@ 0x6e
 800096c:	218c      	movs	r1, #140	@ 0x8c
 800096e:	2091      	movs	r0, #145	@ 0x91
 8000970:	f002 ffa6 	bl	80038c0 <LCD_DisplayChar>
	drawSquare(144, 272, LCD_COLOR_RED);
	drawSquare(168, 272, LCD_COLOR_RED);
	drawSquare(192, 272, LCD_COLOR_RED);
	drawSquare(216, 272, LCD_COLOR_RED);
*/
	drawShapeO(0, 272, LCD_COLOR_BLUE);
 8000974:	221f      	movs	r2, #31
 8000976:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800097a:	2000      	movs	r0, #0
 800097c:	f000 f948 	bl	8000c10 <drawShapeO>
	drawShapeI(72, 224, LCD_COLOR_RED);
 8000980:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000984:	21e0      	movs	r1, #224	@ 0xe0
 8000986:	2048      	movs	r0, #72	@ 0x48
 8000988:	f000 f9a0 	bl	8000ccc <drawShapeI>
	drawShapeS(0, 224, LCD_COLOR_MAGENTA);
 800098c:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8000990:	21e0      	movs	r1, #224	@ 0xe0
 8000992:	2000      	movs	r0, #0
 8000994:	f000 fa4e 	bl	8000e34 <drawShapeS>
	drawShapeZ(96, 272, LCD_COLOR_GREEN);
 8000998:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800099c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80009a0:	2060      	movs	r0, #96	@ 0x60
 80009a2:	f000 fb6d 	bl	8001080 <drawShapeZ>
	drawShapeL(96, 200, LCD_COLOR_BLUE2);
 80009a6:	f240 521f 	movw	r2, #1311	@ 0x51f
 80009aa:	21c8      	movs	r1, #200	@ 0xc8
 80009ac:	2060      	movs	r0, #96	@ 0x60
 80009ae:	f000 fc8d 	bl	80012cc <drawShapeL>
	drawShapeJ(144, 224, LCD_COLOR_RED);
 80009b2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80009b6:	21e0      	movs	r1, #224	@ 0xe0
 80009b8:	2090      	movs	r0, #144	@ 0x90
 80009ba:	f000 fdff 	bl	80015bc <drawShapeJ>
	drawShapeT(168, 272, LCD_COLOR_YELLOW);
 80009be:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80009c2:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80009c6:	20a8      	movs	r0, #168	@ 0xa8
 80009c8:	f000 ff78 	bl	80018bc <drawShapeT>
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000004 	.word	0x20000004

080009d4 <endGameScreen>:

void endGameScreen()
{
 80009d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009d8:	b087      	sub	sp, #28
 80009da:	af00      	add	r7, sp, #0
 80009dc:	466b      	mov	r3, sp
 80009de:	461e      	mov	r6, r3
	LCD_Clear(0, LCD_COLOR_RED);
 80009e0:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80009e4:	2000      	movs	r0, #0
 80009e6:	f002 febb 	bl	8003760 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80009ea:	2000      	movs	r0, #0
 80009ec:	f002 feda 	bl	80037a4 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80009f0:	484c      	ldr	r0, [pc, #304]	@ (8000b24 <endGameScreen+0x150>)
 80009f2:	f002 fee7 	bl	80037c4 <LCD_SetFont>
	LCD_DisplayChar(100,40,'G');
 80009f6:	2247      	movs	r2, #71	@ 0x47
 80009f8:	2128      	movs	r1, #40	@ 0x28
 80009fa:	2064      	movs	r0, #100	@ 0x64
 80009fc:	f002 ff60 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(115,40,'A');
 8000a00:	2241      	movs	r2, #65	@ 0x41
 8000a02:	2128      	movs	r1, #40	@ 0x28
 8000a04:	2073      	movs	r0, #115	@ 0x73
 8000a06:	f002 ff5b 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(130,40,'M');
 8000a0a:	224d      	movs	r2, #77	@ 0x4d
 8000a0c:	2128      	movs	r1, #40	@ 0x28
 8000a0e:	2082      	movs	r0, #130	@ 0x82
 8000a10:	f002 ff56 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(145,40,'E');
 8000a14:	2245      	movs	r2, #69	@ 0x45
 8000a16:	2128      	movs	r1, #40	@ 0x28
 8000a18:	2091      	movs	r0, #145	@ 0x91
 8000a1a:	f002 ff51 	bl	80038c0 <LCD_DisplayChar>

	LCD_DisplayChar(100,60,'O');
 8000a1e:	224f      	movs	r2, #79	@ 0x4f
 8000a20:	213c      	movs	r1, #60	@ 0x3c
 8000a22:	2064      	movs	r0, #100	@ 0x64
 8000a24:	f002 ff4c 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(115,60,'V');
 8000a28:	2256      	movs	r2, #86	@ 0x56
 8000a2a:	213c      	movs	r1, #60	@ 0x3c
 8000a2c:	2073      	movs	r0, #115	@ 0x73
 8000a2e:	f002 ff47 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(125,60,'E');
 8000a32:	2245      	movs	r2, #69	@ 0x45
 8000a34:	213c      	movs	r1, #60	@ 0x3c
 8000a36:	207d      	movs	r0, #125	@ 0x7d
 8000a38:	f002 ff42 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(140,60,'R');
 8000a3c:	2252      	movs	r2, #82	@ 0x52
 8000a3e:	213c      	movs	r1, #60	@ 0x3c
 8000a40:	208c      	movs	r0, #140	@ 0x8c
 8000a42:	f002 ff3d 	bl	80038c0 <LCD_DisplayChar>

	LCD_DisplayChar(10,100,'T');
 8000a46:	2254      	movs	r2, #84	@ 0x54
 8000a48:	2164      	movs	r1, #100	@ 0x64
 8000a4a:	200a      	movs	r0, #10
 8000a4c:	f002 ff38 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(20,100,'i');
 8000a50:	2269      	movs	r2, #105	@ 0x69
 8000a52:	2164      	movs	r1, #100	@ 0x64
 8000a54:	2014      	movs	r0, #20
 8000a56:	f002 ff33 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(30,100,'m');
 8000a5a:	226d      	movs	r2, #109	@ 0x6d
 8000a5c:	2164      	movs	r1, #100	@ 0x64
 8000a5e:	201e      	movs	r0, #30
 8000a60:	f002 ff2e 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(40,100,'e');
 8000a64:	2265      	movs	r2, #101	@ 0x65
 8000a66:	2164      	movs	r1, #100	@ 0x64
 8000a68:	2028      	movs	r0, #40	@ 0x28
 8000a6a:	f002 ff29 	bl	80038c0 <LCD_DisplayChar>
	LCD_DisplayChar(50,100,':');
 8000a6e:	223a      	movs	r2, #58	@ 0x3a
 8000a70:	2164      	movs	r1, #100	@ 0x64
 8000a72:	2032      	movs	r0, #50	@ 0x32
 8000a74:	f002 ff24 	bl	80038c0 <LCD_DisplayChar>

	int num_digits = countDigit(time_seconds);
 8000a78:	4b2b      	ldr	r3, [pc, #172]	@ (8000b28 <endGameScreen+0x154>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 f855 	bl	8000b2c <countDigit>
 8000a82:	60f8      	str	r0, [r7, #12]
	char buffer[num_digits + 1];  // +1 for null terminator
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	1c59      	adds	r1, r3, #1
 8000a88:	1e4b      	subs	r3, r1, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	460a      	mov	r2, r1
 8000a8e:	2300      	movs	r3, #0
 8000a90:	4690      	mov	r8, r2
 8000a92:	4699      	mov	r9, r3
 8000a94:	f04f 0200 	mov.w	r2, #0
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000aa0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000aa4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000aa8:	460a      	mov	r2, r1
 8000aaa:	2300      	movs	r3, #0
 8000aac:	4614      	mov	r4, r2
 8000aae:	461d      	mov	r5, r3
 8000ab0:	f04f 0200 	mov.w	r2, #0
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	00eb      	lsls	r3, r5, #3
 8000aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000abe:	00e2      	lsls	r2, r4, #3
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	3307      	adds	r3, #7
 8000ac4:	08db      	lsrs	r3, r3, #3
 8000ac6:	00db      	lsls	r3, r3, #3
 8000ac8:	ebad 0d03 	sub.w	sp, sp, r3
 8000acc:	466b      	mov	r3, sp
 8000ace:	3300      	adds	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
	itoa(time_seconds, buffer, 10); // Convert time_seconds to string in base 10
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <endGameScreen+0x154>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	220a      	movs	r2, #10
 8000ad8:	6879      	ldr	r1, [r7, #4]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f007 fdd8 	bl	8008690 <itoa>

	// Display each character of the buffer
	int holder = 60; // Starting x-position for displaying digits
 8000ae0:	233c      	movs	r3, #60	@ 0x3c
 8000ae2:	617b      	str	r3, [r7, #20]
	for (int i = 0; i <= num_digits; i++) {
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	e011      	b.n	8000b0e <endGameScreen+0x13a>
		LCD_DisplayChar(holder, 100, buffer[i] + '0');
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	b298      	uxth	r0, r3
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	4413      	add	r3, r2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	3330      	adds	r3, #48	@ 0x30
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	461a      	mov	r2, r3
 8000afc:	2164      	movs	r1, #100	@ 0x64
 8000afe:	f002 fedf 	bl	80038c0 <LCD_DisplayChar>
		holder += 10;
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	330a      	adds	r3, #10
 8000b06:	617b      	str	r3, [r7, #20]
	for (int i = 0; i <= num_digits; i++) {
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	dde9      	ble.n	8000aea <endGameScreen+0x116>
 8000b16:	46b5      	mov	sp, r6
	}
}
 8000b18:	bf00      	nop
 8000b1a:	371c      	adds	r7, #28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b22:	bf00      	nop
 8000b24:	20000004 	.word	0x20000004
 8000b28:	200000b8 	.word	0x200000b8

08000b2c <countDigit>:

int countDigit(int n) { // count digits function from G4G
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  // Base case
	if (n == 0)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <countDigit+0x12>
		return 1;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e011      	b.n	8000b62 <countDigit+0x36>

	int count = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]

	// Iterate till n has digits remaining
	while (n != 0) {
 8000b42:	e00a      	b.n	8000b5a <countDigit+0x2e>

		// Remove rightmost digit
		n = n / 10;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <countDigit+0x44>)
 8000b48:	fb82 1203 	smull	r1, r2, r2, r3
 8000b4c:	1092      	asrs	r2, r2, #2
 8000b4e:	17db      	asrs	r3, r3, #31
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	607b      	str	r3, [r7, #4]

		// Increment digit count by 1
		++count;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	3301      	adds	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
	while (n != 0) {
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1f1      	bne.n	8000b44 <countDigit+0x18>
	}
	return count;
 8000b60:	68fb      	ldr	r3, [r7, #12]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	66666667 	.word	0x66666667

08000b74 <drawWhiteSquare>:
/*
 *  	BEGIN DRAW ALL SHAPES
 */

void drawWhiteSquare(uint16_t x, uint16_t y)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	80fb      	strh	r3, [r7, #6]
 8000b80:	4613      	mov	r3, r2
 8000b82:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Horizontal_Line(x, y, BLOCK_SIDE_LENGTH, LCD_COLOR_WHITE);
 8000b84:	88b9      	ldrh	r1, [r7, #4]
 8000b86:	88f8      	ldrh	r0, [r7, #6]
 8000b88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b8c:	2218      	movs	r2, #24
 8000b8e:	f002 fdc0 	bl	8003712 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(x, y + (BLOCK_SIDE_LENGTH - 1), BLOCK_SIDE_LENGTH, LCD_COLOR_WHITE);
 8000b92:	88bb      	ldrh	r3, [r7, #4]
 8000b94:	3317      	adds	r3, #23
 8000b96:	b299      	uxth	r1, r3
 8000b98:	88f8      	ldrh	r0, [r7, #6]
 8000b9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b9e:	2218      	movs	r2, #24
 8000ba0:	f002 fdb7 	bl	8003712 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Vertical_Line(x, y, BLOCK_SIDE_LENGTH, LCD_COLOR_WHITE);
 8000ba4:	88b9      	ldrh	r1, [r7, #4]
 8000ba6:	88f8      	ldrh	r0, [r7, #6]
 8000ba8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bac:	2218      	movs	r2, #24
 8000bae:	f002 fd89 	bl	80036c4 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(x + (BLOCK_SIDE_LENGTH - 1), y, BLOCK_SIDE_LENGTH, LCD_COLOR_WHITE);
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	3317      	adds	r3, #23
 8000bb6:	b298      	uxth	r0, r3
 8000bb8:	88b9      	ldrh	r1, [r7, #4]
 8000bba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bbe:	2218      	movs	r2, #24
 8000bc0:	f002 fd80 	bl	80036c4 <LCD_Draw_Vertical_Line>
	for (uint16_t i = x+1; i < ((BLOCK_SIDE_LENGTH - 1) + x); i++)
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	81fb      	strh	r3, [r7, #14]
 8000bca:	e016      	b.n	8000bfa <drawWhiteSquare+0x86>
	 {
		for (uint16_t j = y+1; j < ((BLOCK_SIDE_LENGTH - 1) + y); j++)
 8000bcc:	88bb      	ldrh	r3, [r7, #4]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	81bb      	strh	r3, [r7, #12]
 8000bd2:	e009      	b.n	8000be8 <drawWhiteSquare+0x74>
		{
			LCD_Draw_Pixel(i, j, LCD_COLOR_WHITE);
 8000bd4:	89b9      	ldrh	r1, [r7, #12]
 8000bd6:	89fb      	ldrh	r3, [r7, #14]
 8000bd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 fd37 	bl	8003650 <LCD_Draw_Pixel>
		for (uint16_t j = y+1; j < ((BLOCK_SIDE_LENGTH - 1) + y); j++)
 8000be2:	89bb      	ldrh	r3, [r7, #12]
 8000be4:	3301      	adds	r3, #1
 8000be6:	81bb      	strh	r3, [r7, #12]
 8000be8:	88bb      	ldrh	r3, [r7, #4]
 8000bea:	f103 0216 	add.w	r2, r3, #22
 8000bee:	89bb      	ldrh	r3, [r7, #12]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	daef      	bge.n	8000bd4 <drawWhiteSquare+0x60>
	for (uint16_t i = x+1; i < ((BLOCK_SIDE_LENGTH - 1) + x); i++)
 8000bf4:	89fb      	ldrh	r3, [r7, #14]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	81fb      	strh	r3, [r7, #14]
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	f103 0216 	add.w	r2, r3, #22
 8000c00:	89fb      	ldrh	r3, [r7, #14]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	dae2      	bge.n	8000bcc <drawWhiteSquare+0x58>
		}
	 }
}
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <drawShapeO>:

// Used to index shapes to rotate
uint16_t index_count = 0;

void drawShapeO(uint16_t x, uint16_t y, uint16_t color) // SQUARE
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	80fb      	strh	r3, [r7, #6]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	80bb      	strh	r3, [r7, #4]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	807b      	strh	r3, [r7, #2]
	drawSquare(x, y, color);
 8000c22:	887a      	ldrh	r2, [r7, #2]
 8000c24:	88b9      	ldrh	r1, [r7, #4]
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f002 fe6b 	bl	8003904 <drawSquare>
	drawSquare(x+24, y, color);
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	3318      	adds	r3, #24
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	887a      	ldrh	r2, [r7, #2]
 8000c36:	88b9      	ldrh	r1, [r7, #4]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 fe63 	bl	8003904 <drawSquare>
	drawSquare(x, y+24, color);
 8000c3e:	88bb      	ldrh	r3, [r7, #4]
 8000c40:	3318      	adds	r3, #24
 8000c42:	b299      	uxth	r1, r3
 8000c44:	887a      	ldrh	r2, [r7, #2]
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f002 fe5b 	bl	8003904 <drawSquare>
	drawSquare(x+24, y+24, color);
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	3318      	adds	r3, #24
 8000c52:	b298      	uxth	r0, r3
 8000c54:	88bb      	ldrh	r3, [r7, #4]
 8000c56:	3318      	adds	r3, #24
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	887a      	ldrh	r2, [r7, #2]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f002 fe51 	bl	8003904 <drawSquare>
	index_count = 1;
 8000c62:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <drawShapeO+0x60>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	801a      	strh	r2, [r3, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200000bc 	.word	0x200000bc

08000c74 <removeShapeO>:
void removeShapeO(uint16_t x, uint16_t y)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	460a      	mov	r2, r1
 8000c7e:	80fb      	strh	r3, [r7, #6]
 8000c80:	4613      	mov	r3, r2
 8000c82:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x, y);
 8000c84:	88ba      	ldrh	r2, [r7, #4]
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff72 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y);
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	3318      	adds	r3, #24
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	88ba      	ldrh	r2, [r7, #4]
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff6a 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+24);
 8000ca0:	88bb      	ldrh	r3, [r7, #4]
 8000ca2:	3318      	adds	r3, #24
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	88fb      	ldrh	r3, [r7, #6]
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff62 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y+24);
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	3318      	adds	r3, #24
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	88bb      	ldrh	r3, [r7, #4]
 8000cb8:	3318      	adds	r3, #24
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	f7ff ff58 	bl	8000b74 <drawWhiteSquare>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <drawShapeI>:



void drawShapeI(uint16_t x, uint16_t y, uint16_t color) // LINE VERT
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80fb      	strh	r3, [r7, #6]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	80bb      	strh	r3, [r7, #4]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	807b      	strh	r3, [r7, #2]
	//int index = 1;
	drawSquare(x, y, color);
 8000cde:	887a      	ldrh	r2, [r7, #2]
 8000ce0:	88b9      	ldrh	r1, [r7, #4]
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 fe0d 	bl	8003904 <drawSquare>
	drawSquare(x, y+24, color);
 8000cea:	88bb      	ldrh	r3, [r7, #4]
 8000cec:	3318      	adds	r3, #24
 8000cee:	b299      	uxth	r1, r3
 8000cf0:	887a      	ldrh	r2, [r7, #2]
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f002 fe05 	bl	8003904 <drawSquare>
	drawSquare(x, y+48, color);
 8000cfa:	88bb      	ldrh	r3, [r7, #4]
 8000cfc:	3330      	adds	r3, #48	@ 0x30
 8000cfe:	b299      	uxth	r1, r3
 8000d00:	887a      	ldrh	r2, [r7, #2]
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f002 fdfd 	bl	8003904 <drawSquare>
	drawSquare(x, y+72, color);
 8000d0a:	88bb      	ldrh	r3, [r7, #4]
 8000d0c:	3348      	adds	r3, #72	@ 0x48
 8000d0e:	b299      	uxth	r1, r3
 8000d10:	887a      	ldrh	r2, [r7, #2]
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f002 fdf5 	bl	8003904 <drawSquare>
	index_count = 2;
 8000d1a:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <drawShapeI+0x5c>)
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	801a      	strh	r2, [r3, #0]
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200000bc 	.word	0x200000bc

08000d2c <removeShapeI>:
void removeShapeI(uint16_t x, uint16_t y)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	460a      	mov	r2, r1
 8000d36:	80fb      	strh	r3, [r7, #6]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x, y);
 8000d3c:	88ba      	ldrh	r2, [r7, #4]
 8000d3e:	88fb      	ldrh	r3, [r7, #6]
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff16 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+24);
 8000d48:	88bb      	ldrh	r3, [r7, #4]
 8000d4a:	3318      	adds	r3, #24
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff0e 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+48);
 8000d58:	88bb      	ldrh	r3, [r7, #4]
 8000d5a:	3330      	adds	r3, #48	@ 0x30
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff06 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+72);
 8000d68:	88bb      	ldrh	r3, [r7, #4]
 8000d6a:	3348      	adds	r3, #72	@ 0x48
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fefe 	bl	8000b74 <drawWhiteSquare>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <drawShapeI2>:
void drawShapeI2(uint16_t x, uint16_t y, uint16_t color) // LINE HORZ
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	80fb      	strh	r3, [r7, #6]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	80bb      	strh	r3, [r7, #4]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	807b      	strh	r3, [r7, #2]
	//int index = 2;
	drawSquare(x, y, color);
 8000d92:	887a      	ldrh	r2, [r7, #2]
 8000d94:	88b9      	ldrh	r1, [r7, #4]
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f002 fdb3 	bl	8003904 <drawSquare>
	drawSquare(x+24, y, color);
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	3318      	adds	r3, #24
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	887a      	ldrh	r2, [r7, #2]
 8000da6:	88b9      	ldrh	r1, [r7, #4]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f002 fdab 	bl	8003904 <drawSquare>
	drawSquare(x+48, y, color);
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	3330      	adds	r3, #48	@ 0x30
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	887a      	ldrh	r2, [r7, #2]
 8000db6:	88b9      	ldrh	r1, [r7, #4]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f002 fda3 	bl	8003904 <drawSquare>
	drawSquare(x+72, y, color);
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	3348      	adds	r3, #72	@ 0x48
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	887a      	ldrh	r2, [r7, #2]
 8000dc6:	88b9      	ldrh	r1, [r7, #4]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f002 fd9b 	bl	8003904 <drawSquare>
	index_count = 3;
 8000dce:	4b03      	ldr	r3, [pc, #12]	@ (8000ddc <drawShapeI2+0x5c>)
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	801a      	strh	r2, [r3, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	200000bc 	.word	0x200000bc

08000de0 <removeShapeI2>:
void removeShapeI2(uint16_t x, uint16_t y)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	460a      	mov	r2, r1
 8000dea:	80fb      	strh	r3, [r7, #6]
 8000dec:	4613      	mov	r3, r2
 8000dee:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x, y);
 8000df0:	88ba      	ldrh	r2, [r7, #4]
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff febc 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y);
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	3318      	adds	r3, #24
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	88ba      	ldrh	r2, [r7, #4]
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff feb4 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+48, y);
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	3330      	adds	r3, #48	@ 0x30
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	88ba      	ldrh	r2, [r7, #4]
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff feac 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+72, y);
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
 8000e1e:	3348      	adds	r3, #72	@ 0x48
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	88ba      	ldrh	r2, [r7, #4]
 8000e24:	4611      	mov	r1, r2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fea4 	bl	8000b74 <drawWhiteSquare>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <drawShapeS>:

void drawShapeS(uint16_t x, uint16_t y, uint16_t color) // S UP
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	80bb      	strh	r3, [r7, #4]
 8000e42:	4613      	mov	r3, r2
 8000e44:	807b      	strh	r3, [r7, #2]
	//int index = 1;
	drawSquare(x, y+24, color);
 8000e46:	88bb      	ldrh	r3, [r7, #4]
 8000e48:	3318      	adds	r3, #24
 8000e4a:	b299      	uxth	r1, r3
 8000e4c:	887a      	ldrh	r2, [r7, #2]
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f002 fd57 	bl	8003904 <drawSquare>
	drawSquare(x+24, y+24, color);
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	3318      	adds	r3, #24
 8000e5a:	b298      	uxth	r0, r3
 8000e5c:	88bb      	ldrh	r3, [r7, #4]
 8000e5e:	3318      	adds	r3, #24
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f002 fd4d 	bl	8003904 <drawSquare>
	drawSquare(x+24, y, color);
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	3318      	adds	r3, #24
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	887a      	ldrh	r2, [r7, #2]
 8000e72:	88b9      	ldrh	r1, [r7, #4]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f002 fd45 	bl	8003904 <drawSquare>
	drawSquare(x+48, y, color);
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	3330      	adds	r3, #48	@ 0x30
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	887a      	ldrh	r2, [r7, #2]
 8000e82:	88b9      	ldrh	r1, [r7, #4]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f002 fd3d 	bl	8003904 <drawSquare>
	index_count = 4;
 8000e8a:	4b03      	ldr	r3, [pc, #12]	@ (8000e98 <drawShapeS+0x64>)
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	801a      	strh	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200000bc 	.word	0x200000bc

08000e9c <removeShapeS>:
void removeShapeS(uint16_t x, uint16_t y)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	460a      	mov	r2, r1
 8000ea6:	80fb      	strh	r3, [r7, #6]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x, y+24);
 8000eac:	88bb      	ldrh	r3, [r7, #4]
 8000eae:	3318      	adds	r3, #24
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fe5c 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y+24);
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	3318      	adds	r3, #24
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	88bb      	ldrh	r3, [r7, #4]
 8000ec4:	3318      	adds	r3, #24
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4610      	mov	r0, r2
 8000ecc:	f7ff fe52 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y);
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	3318      	adds	r3, #24
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	88ba      	ldrh	r2, [r7, #4]
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fe4a 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+48, y);
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	3330      	adds	r3, #48	@ 0x30
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	88ba      	ldrh	r2, [r7, #4]
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fe42 	bl	8000b74 <drawWhiteSquare>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <drawShapeS2>:
void drawShapeS2(uint16_t x, uint16_t y, uint16_t color) // S
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	80fb      	strh	r3, [r7, #6]
 8000f02:	460b      	mov	r3, r1
 8000f04:	80bb      	strh	r3, [r7, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	807b      	strh	r3, [r7, #2]
	//int index = 2;
	drawSquare(x, y, color);
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	88b9      	ldrh	r1, [r7, #4]
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 fcf7 	bl	8003904 <drawSquare>
	drawSquare(x, y+24, color);
 8000f16:	88bb      	ldrh	r3, [r7, #4]
 8000f18:	3318      	adds	r3, #24
 8000f1a:	b299      	uxth	r1, r3
 8000f1c:	887a      	ldrh	r2, [r7, #2]
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f002 fcef 	bl	8003904 <drawSquare>
	drawSquare(x+24, y+24, color);
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	3318      	adds	r3, #24
 8000f2a:	b298      	uxth	r0, r3
 8000f2c:	88bb      	ldrh	r3, [r7, #4]
 8000f2e:	3318      	adds	r3, #24
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f002 fce5 	bl	8003904 <drawSquare>
	drawSquare(x+24, y+48, color);
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	3318      	adds	r3, #24
 8000f3e:	b298      	uxth	r0, r3
 8000f40:	88bb      	ldrh	r3, [r7, #4]
 8000f42:	3330      	adds	r3, #48	@ 0x30
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	887a      	ldrh	r2, [r7, #2]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f002 fcdb 	bl	8003904 <drawSquare>
	index_count = 5;
 8000f4e:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <drawShapeS2+0x64>)
 8000f50:	2205      	movs	r2, #5
 8000f52:	801a      	strh	r2, [r3, #0]
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200000bc 	.word	0x200000bc

08000f60 <removeShapeS2>:
void removeShapeS2(uint16_t x, uint16_t y)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	460a      	mov	r2, r1
 8000f6a:	80fb      	strh	r3, [r7, #6]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x, y);
 8000f70:	88ba      	ldrh	r2, [r7, #4]
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fdfc 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+24);
 8000f7c:	88bb      	ldrh	r3, [r7, #4]
 8000f7e:	3318      	adds	r3, #24
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fdf4 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y+24);
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	3318      	adds	r3, #24
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	88bb      	ldrh	r3, [r7, #4]
 8000f94:	3318      	adds	r3, #24
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	f7ff fdea 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y+48);
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	3318      	adds	r3, #24
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	88bb      	ldrh	r3, [r7, #4]
 8000fa8:	3330      	adds	r3, #48	@ 0x30
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	4619      	mov	r1, r3
 8000fae:	4610      	mov	r0, r2
 8000fb0:	f7ff fde0 	bl	8000b74 <drawWhiteSquare>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <drawShapeS3>:
void drawShapeS3(uint16_t x, uint16_t y, uint16_t color) // S
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	80bb      	strh	r3, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	807b      	strh	r3, [r7, #2]
	//int index = 3;
	drawSquare(x, y, color);
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	88b9      	ldrh	r1, [r7, #4]
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 fc95 	bl	8003904 <drawSquare>
	drawSquare(x+24, y, color);
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	3318      	adds	r3, #24
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	887a      	ldrh	r2, [r7, #2]
 8000fe2:	88b9      	ldrh	r1, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 fc8d 	bl	8003904 <drawSquare>
	drawSquare(x+24, y+24, color);
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	3318      	adds	r3, #24
 8000fee:	b298      	uxth	r0, r3
 8000ff0:	88bb      	ldrh	r3, [r7, #4]
 8000ff2:	3318      	adds	r3, #24
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	887a      	ldrh	r2, [r7, #2]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f002 fc83 	bl	8003904 <drawSquare>
	drawSquare(x+48, y+24, color);
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	3330      	adds	r3, #48	@ 0x30
 8001002:	b298      	uxth	r0, r3
 8001004:	88bb      	ldrh	r3, [r7, #4]
 8001006:	3318      	adds	r3, #24
 8001008:	b29b      	uxth	r3, r3
 800100a:	887a      	ldrh	r2, [r7, #2]
 800100c:	4619      	mov	r1, r3
 800100e:	f002 fc79 	bl	8003904 <drawSquare>
	index_count = 6;
 8001012:	4b03      	ldr	r3, [pc, #12]	@ (8001020 <drawShapeS3+0x64>)
 8001014:	2206      	movs	r2, #6
 8001016:	801a      	strh	r2, [r3, #0]
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200000bc 	.word	0x200000bc

08001024 <removeShapeS3>:
void removeShapeS3(uint16_t x, uint16_t y)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	460a      	mov	r2, r1
 800102e:	80fb      	strh	r3, [r7, #6]
 8001030:	4613      	mov	r3, r2
 8001032:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x, y);
 8001034:	88ba      	ldrh	r2, [r7, #4]
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	4611      	mov	r1, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fd9a 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y);
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	3318      	adds	r3, #24
 8001044:	b29b      	uxth	r3, r3
 8001046:	88ba      	ldrh	r2, [r7, #4]
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fd92 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y+24);
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	3318      	adds	r3, #24
 8001054:	b29a      	uxth	r2, r3
 8001056:	88bb      	ldrh	r3, [r7, #4]
 8001058:	3318      	adds	r3, #24
 800105a:	b29b      	uxth	r3, r3
 800105c:	4619      	mov	r1, r3
 800105e:	4610      	mov	r0, r2
 8001060:	f7ff fd88 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+48, y+24);
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	3330      	adds	r3, #48	@ 0x30
 8001068:	b29a      	uxth	r2, r3
 800106a:	88bb      	ldrh	r3, [r7, #4]
 800106c:	3318      	adds	r3, #24
 800106e:	b29b      	uxth	r3, r3
 8001070:	4619      	mov	r1, r3
 8001072:	4610      	mov	r0, r2
 8001074:	f7ff fd7e 	bl	8000b74 <drawWhiteSquare>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <drawShapeZ>:


void drawShapeZ(uint16_t x, uint16_t y, uint16_t color) // Z
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	80fb      	strh	r3, [r7, #6]
 800108a:	460b      	mov	r3, r1
 800108c:	80bb      	strh	r3, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	807b      	strh	r3, [r7, #2]
	//int index = 2;
	drawSquare(x, y, color);
 8001092:	887a      	ldrh	r2, [r7, #2]
 8001094:	88b9      	ldrh	r1, [r7, #4]
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	4618      	mov	r0, r3
 800109a:	f002 fc33 	bl	8003904 <drawSquare>
	drawSquare(x+24, y, color);
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	3318      	adds	r3, #24
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	887a      	ldrh	r2, [r7, #2]
 80010a6:	88b9      	ldrh	r1, [r7, #4]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 fc2b 	bl	8003904 <drawSquare>
	drawSquare(x+24, y+24, color);
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	3318      	adds	r3, #24
 80010b2:	b298      	uxth	r0, r3
 80010b4:	88bb      	ldrh	r3, [r7, #4]
 80010b6:	3318      	adds	r3, #24
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	887a      	ldrh	r2, [r7, #2]
 80010bc:	4619      	mov	r1, r3
 80010be:	f002 fc21 	bl	8003904 <drawSquare>
	drawSquare(x+48, y+24, color);
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	3330      	adds	r3, #48	@ 0x30
 80010c6:	b298      	uxth	r0, r3
 80010c8:	88bb      	ldrh	r3, [r7, #4]
 80010ca:	3318      	adds	r3, #24
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f002 fc17 	bl	8003904 <drawSquare>
	index_count = 7;
 80010d6:	4b03      	ldr	r3, [pc, #12]	@ (80010e4 <drawShapeZ+0x64>)
 80010d8:	2207      	movs	r2, #7
 80010da:	801a      	strh	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200000bc 	.word	0x200000bc

080010e8 <removeShapeZ>:
void removeShapeZ(uint16_t x, uint16_t y)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	80fb      	strh	r3, [r7, #6]
 80010f4:	4613      	mov	r3, r2
 80010f6:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x, y);
 80010f8:	88ba      	ldrh	r2, [r7, #4]
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fd38 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y);
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	3318      	adds	r3, #24
 8001108:	b29b      	uxth	r3, r3
 800110a:	88ba      	ldrh	r2, [r7, #4]
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fd30 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y+24);
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	3318      	adds	r3, #24
 8001118:	b29a      	uxth	r2, r3
 800111a:	88bb      	ldrh	r3, [r7, #4]
 800111c:	3318      	adds	r3, #24
 800111e:	b29b      	uxth	r3, r3
 8001120:	4619      	mov	r1, r3
 8001122:	4610      	mov	r0, r2
 8001124:	f7ff fd26 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+48, y+24);
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	3330      	adds	r3, #48	@ 0x30
 800112c:	b29a      	uxth	r2, r3
 800112e:	88bb      	ldrh	r3, [r7, #4]
 8001130:	3318      	adds	r3, #24
 8001132:	b29b      	uxth	r3, r3
 8001134:	4619      	mov	r1, r3
 8001136:	4610      	mov	r0, r2
 8001138:	f7ff fd1c 	bl	8000b74 <drawWhiteSquare>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <drawShapeZ2>:
void drawShapeZ2(uint16_t x, uint16_t y, uint16_t color) // Z
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]
 800114e:	460b      	mov	r3, r1
 8001150:	80bb      	strh	r3, [r7, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	807b      	strh	r3, [r7, #2]
	//int index = 0;
	drawSquare(x+24, y, color);
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	3318      	adds	r3, #24
 800115a:	b29b      	uxth	r3, r3
 800115c:	887a      	ldrh	r2, [r7, #2]
 800115e:	88b9      	ldrh	r1, [r7, #4]
 8001160:	4618      	mov	r0, r3
 8001162:	f002 fbcf 	bl	8003904 <drawSquare>
	drawSquare(x+24, y+24, color);
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	3318      	adds	r3, #24
 800116a:	b298      	uxth	r0, r3
 800116c:	88bb      	ldrh	r3, [r7, #4]
 800116e:	3318      	adds	r3, #24
 8001170:	b29b      	uxth	r3, r3
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	4619      	mov	r1, r3
 8001176:	f002 fbc5 	bl	8003904 <drawSquare>
	drawSquare(x, y+24, color);
 800117a:	88bb      	ldrh	r3, [r7, #4]
 800117c:	3318      	adds	r3, #24
 800117e:	b299      	uxth	r1, r3
 8001180:	887a      	ldrh	r2, [r7, #2]
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	4618      	mov	r0, r3
 8001186:	f002 fbbd 	bl	8003904 <drawSquare>
	drawSquare(x, y+48, color);
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	3330      	adds	r3, #48	@ 0x30
 800118e:	b299      	uxth	r1, r3
 8001190:	887a      	ldrh	r2, [r7, #2]
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	4618      	mov	r0, r3
 8001196:	f002 fbb5 	bl	8003904 <drawSquare>
	index_count = 8;
 800119a:	4b03      	ldr	r3, [pc, #12]	@ (80011a8 <drawShapeZ2+0x64>)
 800119c:	2208      	movs	r2, #8
 800119e:	801a      	strh	r2, [r3, #0]
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200000bc 	.word	0x200000bc

080011ac <removeShapeZ2>:
void removeShapeZ2(uint16_t x, uint16_t y)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	460a      	mov	r2, r1
 80011b6:	80fb      	strh	r3, [r7, #6]
 80011b8:	4613      	mov	r3, r2
 80011ba:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x+24, y);
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	3318      	adds	r3, #24
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	88ba      	ldrh	r2, [r7, #4]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fcd4 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y+24);
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	3318      	adds	r3, #24
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	88bb      	ldrh	r3, [r7, #4]
 80011d4:	3318      	adds	r3, #24
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4619      	mov	r1, r3
 80011da:	4610      	mov	r0, r2
 80011dc:	f7ff fcca 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+24);
 80011e0:	88bb      	ldrh	r3, [r7, #4]
 80011e2:	3318      	adds	r3, #24
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fcc2 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+48);
 80011f0:	88bb      	ldrh	r3, [r7, #4]
 80011f2:	3330      	adds	r3, #48	@ 0x30
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	4611      	mov	r1, r2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fcba 	bl	8000b74 <drawWhiteSquare>
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <drawShapeZ3>:
void drawShapeZ3(uint16_t x, uint16_t y, uint16_t color) // Z
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
 8001212:	460b      	mov	r3, r1
 8001214:	80bb      	strh	r3, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	807b      	strh	r3, [r7, #2]
	//int index = 0;
	drawSquare(x, y+24, color);
 800121a:	88bb      	ldrh	r3, [r7, #4]
 800121c:	3318      	adds	r3, #24
 800121e:	b299      	uxth	r1, r3
 8001220:	887a      	ldrh	r2, [r7, #2]
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	4618      	mov	r0, r3
 8001226:	f002 fb6d 	bl	8003904 <drawSquare>
	drawSquare(x+24, y+24, color);
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	3318      	adds	r3, #24
 800122e:	b298      	uxth	r0, r3
 8001230:	88bb      	ldrh	r3, [r7, #4]
 8001232:	3318      	adds	r3, #24
 8001234:	b29b      	uxth	r3, r3
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	4619      	mov	r1, r3
 800123a:	f002 fb63 	bl	8003904 <drawSquare>
	drawSquare(x+24, y, color);
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	3318      	adds	r3, #24
 8001242:	b29b      	uxth	r3, r3
 8001244:	887a      	ldrh	r2, [r7, #2]
 8001246:	88b9      	ldrh	r1, [r7, #4]
 8001248:	4618      	mov	r0, r3
 800124a:	f002 fb5b 	bl	8003904 <drawSquare>
	drawSquare(x+48, y, color);
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	3330      	adds	r3, #48	@ 0x30
 8001252:	b29b      	uxth	r3, r3
 8001254:	887a      	ldrh	r2, [r7, #2]
 8001256:	88b9      	ldrh	r1, [r7, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	f002 fb53 	bl	8003904 <drawSquare>
	index_count = 9;
 800125e:	4b03      	ldr	r3, [pc, #12]	@ (800126c <drawShapeZ3+0x64>)
 8001260:	2209      	movs	r2, #9
 8001262:	801a      	strh	r2, [r3, #0]
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200000bc 	.word	0x200000bc

08001270 <removeShapeZ3>:
void removeShapeZ3(uint16_t x, uint16_t y)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	460a      	mov	r2, r1
 800127a:	80fb      	strh	r3, [r7, #6]
 800127c:	4613      	mov	r3, r2
 800127e:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x, y+24);
 8001280:	88bb      	ldrh	r3, [r7, #4]
 8001282:	3318      	adds	r3, #24
 8001284:	b29a      	uxth	r2, r3
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fc72 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y+24);
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	3318      	adds	r3, #24
 8001294:	b29a      	uxth	r2, r3
 8001296:	88bb      	ldrh	r3, [r7, #4]
 8001298:	3318      	adds	r3, #24
 800129a:	b29b      	uxth	r3, r3
 800129c:	4619      	mov	r1, r3
 800129e:	4610      	mov	r0, r2
 80012a0:	f7ff fc68 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y);
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	3318      	adds	r3, #24
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	88ba      	ldrh	r2, [r7, #4]
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fc60 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+48, y);
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	3330      	adds	r3, #48	@ 0x30
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	88ba      	ldrh	r2, [r7, #4]
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fc58 	bl	8000b74 <drawWhiteSquare>
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <drawShapeL>:



void drawShapeL(uint16_t x, uint16_t y, uint16_t color) // L
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	80fb      	strh	r3, [r7, #6]
 80012d6:	460b      	mov	r3, r1
 80012d8:	80bb      	strh	r3, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	807b      	strh	r3, [r7, #2]
	drawSquare(x, y, color);
 80012de:	887a      	ldrh	r2, [r7, #2]
 80012e0:	88b9      	ldrh	r1, [r7, #4]
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 fb0d 	bl	8003904 <drawSquare>
	drawSquare(x, y+24, color);
 80012ea:	88bb      	ldrh	r3, [r7, #4]
 80012ec:	3318      	adds	r3, #24
 80012ee:	b299      	uxth	r1, r3
 80012f0:	887a      	ldrh	r2, [r7, #2]
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 fb05 	bl	8003904 <drawSquare>
	drawSquare(x, y+48, color);
 80012fa:	88bb      	ldrh	r3, [r7, #4]
 80012fc:	3330      	adds	r3, #48	@ 0x30
 80012fe:	b299      	uxth	r1, r3
 8001300:	887a      	ldrh	r2, [r7, #2]
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	4618      	mov	r0, r3
 8001306:	f002 fafd 	bl	8003904 <drawSquare>
	drawSquare(x+24, y+48, color);
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	3318      	adds	r3, #24
 800130e:	b298      	uxth	r0, r3
 8001310:	88bb      	ldrh	r3, [r7, #4]
 8001312:	3330      	adds	r3, #48	@ 0x30
 8001314:	b29b      	uxth	r3, r3
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	4619      	mov	r1, r3
 800131a:	f002 faf3 	bl	8003904 <drawSquare>
	index_count = 10;
 800131e:	4b03      	ldr	r3, [pc, #12]	@ (800132c <drawShapeL+0x60>)
 8001320:	220a      	movs	r2, #10
 8001322:	801a      	strh	r2, [r3, #0]
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200000bc 	.word	0x200000bc

08001330 <removeShapeL>:
void removeShapeL(uint16_t x, uint16_t y)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	460a      	mov	r2, r1
 800133a:	80fb      	strh	r3, [r7, #6]
 800133c:	4613      	mov	r3, r2
 800133e:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x, y);
 8001340:	88ba      	ldrh	r2, [r7, #4]
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fc14 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+24);
 800134c:	88bb      	ldrh	r3, [r7, #4]
 800134e:	3318      	adds	r3, #24
 8001350:	b29a      	uxth	r2, r3
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fc0c 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+48);
 800135c:	88bb      	ldrh	r3, [r7, #4]
 800135e:	3330      	adds	r3, #48	@ 0x30
 8001360:	b29a      	uxth	r2, r3
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fc04 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y+48);
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	3318      	adds	r3, #24
 8001370:	b29a      	uxth	r2, r3
 8001372:	88bb      	ldrh	r3, [r7, #4]
 8001374:	3330      	adds	r3, #48	@ 0x30
 8001376:	b29b      	uxth	r3, r3
 8001378:	4619      	mov	r1, r3
 800137a:	4610      	mov	r0, r2
 800137c:	f7ff fbfa 	bl	8000b74 <drawWhiteSquare>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <drawShapeL2>:
void drawShapeL2(uint16_t x, uint16_t y, uint16_t color) // L
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	80fb      	strh	r3, [r7, #6]
 8001392:	460b      	mov	r3, r1
 8001394:	80bb      	strh	r3, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	807b      	strh	r3, [r7, #2]
	drawSquare(x, y+24, color);
 800139a:	88bb      	ldrh	r3, [r7, #4]
 800139c:	3318      	adds	r3, #24
 800139e:	b299      	uxth	r1, r3
 80013a0:	887a      	ldrh	r2, [r7, #2]
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 faad 	bl	8003904 <drawSquare>
	drawSquare(x+24, y+24, color);
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	3318      	adds	r3, #24
 80013ae:	b298      	uxth	r0, r3
 80013b0:	88bb      	ldrh	r3, [r7, #4]
 80013b2:	3318      	adds	r3, #24
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f002 faa3 	bl	8003904 <drawSquare>
	drawSquare(x+48, y+24, color);
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	3330      	adds	r3, #48	@ 0x30
 80013c2:	b298      	uxth	r0, r3
 80013c4:	88bb      	ldrh	r3, [r7, #4]
 80013c6:	3318      	adds	r3, #24
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	887a      	ldrh	r2, [r7, #2]
 80013cc:	4619      	mov	r1, r3
 80013ce:	f002 fa99 	bl	8003904 <drawSquare>
	drawSquare(x+48, y, color);
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	3330      	adds	r3, #48	@ 0x30
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	887a      	ldrh	r2, [r7, #2]
 80013da:	88b9      	ldrh	r1, [r7, #4]
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fa91 	bl	8003904 <drawSquare>
	index_count = 11;
 80013e2:	4b03      	ldr	r3, [pc, #12]	@ (80013f0 <drawShapeL2+0x68>)
 80013e4:	220b      	movs	r2, #11
 80013e6:	801a      	strh	r2, [r3, #0]
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200000bc 	.word	0x200000bc

080013f4 <removeShapeL2>:
void removeShapeL2(uint16_t x, uint16_t y)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	460a      	mov	r2, r1
 80013fe:	80fb      	strh	r3, [r7, #6]
 8001400:	4613      	mov	r3, r2
 8001402:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x, y+24);
 8001404:	88bb      	ldrh	r3, [r7, #4]
 8001406:	3318      	adds	r3, #24
 8001408:	b29a      	uxth	r2, r3
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fbb0 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y+24);
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	3318      	adds	r3, #24
 8001418:	b29a      	uxth	r2, r3
 800141a:	88bb      	ldrh	r3, [r7, #4]
 800141c:	3318      	adds	r3, #24
 800141e:	b29b      	uxth	r3, r3
 8001420:	4619      	mov	r1, r3
 8001422:	4610      	mov	r0, r2
 8001424:	f7ff fba6 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+48, y+24);
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	3330      	adds	r3, #48	@ 0x30
 800142c:	b29a      	uxth	r2, r3
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	3318      	adds	r3, #24
 8001432:	b29b      	uxth	r3, r3
 8001434:	4619      	mov	r1, r3
 8001436:	4610      	mov	r0, r2
 8001438:	f7ff fb9c 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+48, y);
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	3330      	adds	r3, #48	@ 0x30
 8001440:	b29b      	uxth	r3, r3
 8001442:	88ba      	ldrh	r2, [r7, #4]
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fb94 	bl	8000b74 <drawWhiteSquare>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <drawShapeL3>:
void drawShapeL3(uint16_t x, uint16_t y, uint16_t color) // L
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	80fb      	strh	r3, [r7, #6]
 800145e:	460b      	mov	r3, r1
 8001460:	80bb      	strh	r3, [r7, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	807b      	strh	r3, [r7, #2]
	drawSquare(x, y, color);
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	88b9      	ldrh	r1, [r7, #4]
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 fa49 	bl	8003904 <drawSquare>
	drawSquare(x, y+24, color);
 8001472:	88bb      	ldrh	r3, [r7, #4]
 8001474:	3318      	adds	r3, #24
 8001476:	b299      	uxth	r1, r3
 8001478:	887a      	ldrh	r2, [r7, #2]
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	4618      	mov	r0, r3
 800147e:	f002 fa41 	bl	8003904 <drawSquare>
	drawSquare(x, y+48, color);
 8001482:	88bb      	ldrh	r3, [r7, #4]
 8001484:	3330      	adds	r3, #48	@ 0x30
 8001486:	b299      	uxth	r1, r3
 8001488:	887a      	ldrh	r2, [r7, #2]
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	4618      	mov	r0, r3
 800148e:	f002 fa39 	bl	8003904 <drawSquare>
	drawSquare(x+24, y, color);
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	3318      	adds	r3, #24
 8001496:	b29b      	uxth	r3, r3
 8001498:	887a      	ldrh	r2, [r7, #2]
 800149a:	88b9      	ldrh	r1, [r7, #4]
 800149c:	4618      	mov	r0, r3
 800149e:	f002 fa31 	bl	8003904 <drawSquare>
	index_count = 12;
 80014a2:	4b03      	ldr	r3, [pc, #12]	@ (80014b0 <drawShapeL3+0x5c>)
 80014a4:	220c      	movs	r2, #12
 80014a6:	801a      	strh	r2, [r3, #0]
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200000bc 	.word	0x200000bc

080014b4 <removeShapeL3>:
void removeShapeL3(uint16_t x, uint16_t y)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	460a      	mov	r2, r1
 80014be:	80fb      	strh	r3, [r7, #6]
 80014c0:	4613      	mov	r3, r2
 80014c2:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x, y);
 80014c4:	88ba      	ldrh	r2, [r7, #4]
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fb52 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+24);
 80014d0:	88bb      	ldrh	r3, [r7, #4]
 80014d2:	3318      	adds	r3, #24
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	4611      	mov	r1, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fb4a 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+48);
 80014e0:	88bb      	ldrh	r3, [r7, #4]
 80014e2:	3330      	adds	r3, #48	@ 0x30
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	4611      	mov	r1, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fb42 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y);
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	3318      	adds	r3, #24
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	88ba      	ldrh	r2, [r7, #4]
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fb3a 	bl	8000b74 <drawWhiteSquare>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <drawShapeL4>:
void drawShapeL4(uint16_t x, uint16_t y, uint16_t color) // L
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]
 8001512:	460b      	mov	r3, r1
 8001514:	80bb      	strh	r3, [r7, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	807b      	strh	r3, [r7, #2]
	drawSquare(x, y, color);
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	88b9      	ldrh	r1, [r7, #4]
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	4618      	mov	r0, r3
 8001522:	f002 f9ef 	bl	8003904 <drawSquare>
	drawSquare(x, y+24, color);
 8001526:	88bb      	ldrh	r3, [r7, #4]
 8001528:	3318      	adds	r3, #24
 800152a:	b299      	uxth	r1, r3
 800152c:	887a      	ldrh	r2, [r7, #2]
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	4618      	mov	r0, r3
 8001532:	f002 f9e7 	bl	8003904 <drawSquare>
	drawSquare(x+24, y, color);
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	3318      	adds	r3, #24
 800153a:	b29b      	uxth	r3, r3
 800153c:	887a      	ldrh	r2, [r7, #2]
 800153e:	88b9      	ldrh	r1, [r7, #4]
 8001540:	4618      	mov	r0, r3
 8001542:	f002 f9df 	bl	8003904 <drawSquare>
	drawSquare(x+48, y, color);
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	3330      	adds	r3, #48	@ 0x30
 800154a:	b29b      	uxth	r3, r3
 800154c:	887a      	ldrh	r2, [r7, #2]
 800154e:	88b9      	ldrh	r1, [r7, #4]
 8001550:	4618      	mov	r0, r3
 8001552:	f002 f9d7 	bl	8003904 <drawSquare>
	index_count = 13;
 8001556:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <drawShapeL4+0x5c>)
 8001558:	220d      	movs	r2, #13
 800155a:	801a      	strh	r2, [r3, #0]
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200000bc 	.word	0x200000bc

08001568 <removeShapeL4>:
void removeShapeL4(uint16_t x, uint16_t y)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	460a      	mov	r2, r1
 8001572:	80fb      	strh	r3, [r7, #6]
 8001574:	4613      	mov	r3, r2
 8001576:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x, y);
 8001578:	88ba      	ldrh	r2, [r7, #4]
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff faf8 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+24);
 8001584:	88bb      	ldrh	r3, [r7, #4]
 8001586:	3318      	adds	r3, #24
 8001588:	b29a      	uxth	r2, r3
 800158a:	88fb      	ldrh	r3, [r7, #6]
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff faf0 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y);
 8001594:	88fb      	ldrh	r3, [r7, #6]
 8001596:	3318      	adds	r3, #24
 8001598:	b29b      	uxth	r3, r3
 800159a:	88ba      	ldrh	r2, [r7, #4]
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fae8 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+48, y);
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	3330      	adds	r3, #48	@ 0x30
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	88ba      	ldrh	r2, [r7, #4]
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fae0 	bl	8000b74 <drawWhiteSquare>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <drawShapeJ>:



void drawShapeJ(uint16_t x, uint16_t y, uint16_t color) // J
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	80fb      	strh	r3, [r7, #6]
 80015c6:	460b      	mov	r3, r1
 80015c8:	80bb      	strh	r3, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	807b      	strh	r3, [r7, #2]
	drawSquare(x+24, y, color);
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	3318      	adds	r3, #24
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	887a      	ldrh	r2, [r7, #2]
 80015d6:	88b9      	ldrh	r1, [r7, #4]
 80015d8:	4618      	mov	r0, r3
 80015da:	f002 f993 	bl	8003904 <drawSquare>
	drawSquare(x+24, y+24, color);
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	3318      	adds	r3, #24
 80015e2:	b298      	uxth	r0, r3
 80015e4:	88bb      	ldrh	r3, [r7, #4]
 80015e6:	3318      	adds	r3, #24
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f002 f989 	bl	8003904 <drawSquare>
	drawSquare(x+24, y+48, color);
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	3318      	adds	r3, #24
 80015f6:	b298      	uxth	r0, r3
 80015f8:	88bb      	ldrh	r3, [r7, #4]
 80015fa:	3330      	adds	r3, #48	@ 0x30
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	4619      	mov	r1, r3
 8001602:	f002 f97f 	bl	8003904 <drawSquare>
	drawSquare(x, y+48, color);
 8001606:	88bb      	ldrh	r3, [r7, #4]
 8001608:	3330      	adds	r3, #48	@ 0x30
 800160a:	b299      	uxth	r1, r3
 800160c:	887a      	ldrh	r2, [r7, #2]
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	4618      	mov	r0, r3
 8001612:	f002 f977 	bl	8003904 <drawSquare>
	index_count = 14;
 8001616:	4b03      	ldr	r3, [pc, #12]	@ (8001624 <drawShapeJ+0x68>)
 8001618:	220e      	movs	r2, #14
 800161a:	801a      	strh	r2, [r3, #0]
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200000bc 	.word	0x200000bc

08001628 <removeShapeJ>:
void removeShapeJ(uint16_t x, uint16_t y)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	460a      	mov	r2, r1
 8001632:	80fb      	strh	r3, [r7, #6]
 8001634:	4613      	mov	r3, r2
 8001636:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x+24, y);
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	3318      	adds	r3, #24
 800163c:	b29b      	uxth	r3, r3
 800163e:	88ba      	ldrh	r2, [r7, #4]
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fa96 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y+24);
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	3318      	adds	r3, #24
 800164c:	b29a      	uxth	r2, r3
 800164e:	88bb      	ldrh	r3, [r7, #4]
 8001650:	3318      	adds	r3, #24
 8001652:	b29b      	uxth	r3, r3
 8001654:	4619      	mov	r1, r3
 8001656:	4610      	mov	r0, r2
 8001658:	f7ff fa8c 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y+48);
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	3318      	adds	r3, #24
 8001660:	b29a      	uxth	r2, r3
 8001662:	88bb      	ldrh	r3, [r7, #4]
 8001664:	3330      	adds	r3, #48	@ 0x30
 8001666:	b29b      	uxth	r3, r3
 8001668:	4619      	mov	r1, r3
 800166a:	4610      	mov	r0, r2
 800166c:	f7ff fa82 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+48);
 8001670:	88bb      	ldrh	r3, [r7, #4]
 8001672:	3330      	adds	r3, #48	@ 0x30
 8001674:	b29a      	uxth	r2, r3
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fa7a 	bl	8000b74 <drawWhiteSquare>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <drawShapeJ2>:
void drawShapeJ2(uint16_t x, uint16_t y, uint16_t color) // J
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	80fb      	strh	r3, [r7, #6]
 8001692:	460b      	mov	r3, r1
 8001694:	80bb      	strh	r3, [r7, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	807b      	strh	r3, [r7, #2]
	drawSquare(x, y, color);
 800169a:	887a      	ldrh	r2, [r7, #2]
 800169c:	88b9      	ldrh	r1, [r7, #4]
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f002 f92f 	bl	8003904 <drawSquare>
	drawSquare(x, y+24, color);
 80016a6:	88bb      	ldrh	r3, [r7, #4]
 80016a8:	3318      	adds	r3, #24
 80016aa:	b299      	uxth	r1, r3
 80016ac:	887a      	ldrh	r2, [r7, #2]
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 f927 	bl	8003904 <drawSquare>
	drawSquare(x+24, y+24, color);
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	3318      	adds	r3, #24
 80016ba:	b298      	uxth	r0, r3
 80016bc:	88bb      	ldrh	r3, [r7, #4]
 80016be:	3318      	adds	r3, #24
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f002 f91d 	bl	8003904 <drawSquare>
	drawSquare(x+48, y+24, color);
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	3330      	adds	r3, #48	@ 0x30
 80016ce:	b298      	uxth	r0, r3
 80016d0:	88bb      	ldrh	r3, [r7, #4]
 80016d2:	3318      	adds	r3, #24
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	4619      	mov	r1, r3
 80016da:	f002 f913 	bl	8003904 <drawSquare>
	index_count = 15;
 80016de:	4b03      	ldr	r3, [pc, #12]	@ (80016ec <drawShapeJ2+0x64>)
 80016e0:	220f      	movs	r2, #15
 80016e2:	801a      	strh	r2, [r3, #0]
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200000bc 	.word	0x200000bc

080016f0 <removeShapeJ2>:
void removeShapeJ2(uint16_t x, uint16_t y)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	460a      	mov	r2, r1
 80016fa:	80fb      	strh	r3, [r7, #6]
 80016fc:	4613      	mov	r3, r2
 80016fe:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x, y);
 8001700:	88ba      	ldrh	r2, [r7, #4]
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fa34 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+24);
 800170c:	88bb      	ldrh	r3, [r7, #4]
 800170e:	3318      	adds	r3, #24
 8001710:	b29a      	uxth	r2, r3
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fa2c 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y+24);
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	3318      	adds	r3, #24
 8001720:	b29a      	uxth	r2, r3
 8001722:	88bb      	ldrh	r3, [r7, #4]
 8001724:	3318      	adds	r3, #24
 8001726:	b29b      	uxth	r3, r3
 8001728:	4619      	mov	r1, r3
 800172a:	4610      	mov	r0, r2
 800172c:	f7ff fa22 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+48, y+24);
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	3330      	adds	r3, #48	@ 0x30
 8001734:	b29a      	uxth	r2, r3
 8001736:	88bb      	ldrh	r3, [r7, #4]
 8001738:	3318      	adds	r3, #24
 800173a:	b29b      	uxth	r3, r3
 800173c:	4619      	mov	r1, r3
 800173e:	4610      	mov	r0, r2
 8001740:	f7ff fa18 	bl	8000b74 <drawWhiteSquare>
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <drawShapeJ3>:
void drawShapeJ3(uint16_t x, uint16_t y, uint16_t color) // J
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
 8001756:	460b      	mov	r3, r1
 8001758:	80bb      	strh	r3, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	807b      	strh	r3, [r7, #2]
	drawSquare(x, y, color);
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	88b9      	ldrh	r1, [r7, #4]
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	4618      	mov	r0, r3
 8001766:	f002 f8cd 	bl	8003904 <drawSquare>
	drawSquare(x+24, y, color);
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	3318      	adds	r3, #24
 800176e:	b29b      	uxth	r3, r3
 8001770:	887a      	ldrh	r2, [r7, #2]
 8001772:	88b9      	ldrh	r1, [r7, #4]
 8001774:	4618      	mov	r0, r3
 8001776:	f002 f8c5 	bl	8003904 <drawSquare>
	drawSquare(x, y+24, color);
 800177a:	88bb      	ldrh	r3, [r7, #4]
 800177c:	3318      	adds	r3, #24
 800177e:	b299      	uxth	r1, r3
 8001780:	887a      	ldrh	r2, [r7, #2]
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	4618      	mov	r0, r3
 8001786:	f002 f8bd 	bl	8003904 <drawSquare>
	drawSquare(x, y+48, color);
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	3330      	adds	r3, #48	@ 0x30
 800178e:	b299      	uxth	r1, r3
 8001790:	887a      	ldrh	r2, [r7, #2]
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	4618      	mov	r0, r3
 8001796:	f002 f8b5 	bl	8003904 <drawSquare>
	index_count = 16;
 800179a:	4b03      	ldr	r3, [pc, #12]	@ (80017a8 <drawShapeJ3+0x5c>)
 800179c:	2210      	movs	r2, #16
 800179e:	801a      	strh	r2, [r3, #0]
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200000bc 	.word	0x200000bc

080017ac <removeShapeJ3>:
void removeShapeJ3(uint16_t x, uint16_t y)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	460a      	mov	r2, r1
 80017b6:	80fb      	strh	r3, [r7, #6]
 80017b8:	4613      	mov	r3, r2
 80017ba:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x, y);
 80017bc:	88ba      	ldrh	r2, [r7, #4]
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff f9d6 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y);
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	3318      	adds	r3, #24
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	88ba      	ldrh	r2, [r7, #4]
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff f9ce 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+24);
 80017d8:	88bb      	ldrh	r3, [r7, #4]
 80017da:	3318      	adds	r3, #24
 80017dc:	b29a      	uxth	r2, r3
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff f9c6 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+48);
 80017e8:	88bb      	ldrh	r3, [r7, #4]
 80017ea:	3330      	adds	r3, #48	@ 0x30
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	4611      	mov	r1, r2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff f9be 	bl	8000b74 <drawWhiteSquare>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <drawShapeJ4>:
void drawShapeJ4(uint16_t x, uint16_t y, uint16_t color) // J
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	80fb      	strh	r3, [r7, #6]
 800180a:	460b      	mov	r3, r1
 800180c:	80bb      	strh	r3, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	807b      	strh	r3, [r7, #2]
	drawSquare(x, y, color);
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	88b9      	ldrh	r1, [r7, #4]
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	4618      	mov	r0, r3
 800181a:	f002 f873 	bl	8003904 <drawSquare>
	drawSquare(x+24, y, color);
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	3318      	adds	r3, #24
 8001822:	b29b      	uxth	r3, r3
 8001824:	887a      	ldrh	r2, [r7, #2]
 8001826:	88b9      	ldrh	r1, [r7, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	f002 f86b 	bl	8003904 <drawSquare>
	drawSquare(x+48, y, color);
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	3330      	adds	r3, #48	@ 0x30
 8001832:	b29b      	uxth	r3, r3
 8001834:	887a      	ldrh	r2, [r7, #2]
 8001836:	88b9      	ldrh	r1, [r7, #4]
 8001838:	4618      	mov	r0, r3
 800183a:	f002 f863 	bl	8003904 <drawSquare>
	drawSquare(x+48, y+24, color);
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	3330      	adds	r3, #48	@ 0x30
 8001842:	b298      	uxth	r0, r3
 8001844:	88bb      	ldrh	r3, [r7, #4]
 8001846:	3318      	adds	r3, #24
 8001848:	b29b      	uxth	r3, r3
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	4619      	mov	r1, r3
 800184e:	f002 f859 	bl	8003904 <drawSquare>
	index_count = 17;
 8001852:	4b03      	ldr	r3, [pc, #12]	@ (8001860 <drawShapeJ4+0x60>)
 8001854:	2211      	movs	r2, #17
 8001856:	801a      	strh	r2, [r3, #0]
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200000bc 	.word	0x200000bc

08001864 <removeShapeJ4>:
void removeShapeJ4(uint16_t x, uint16_t y)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	460a      	mov	r2, r1
 800186e:	80fb      	strh	r3, [r7, #6]
 8001870:	4613      	mov	r3, r2
 8001872:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x, y);
 8001874:	88ba      	ldrh	r2, [r7, #4]
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff f97a 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y);
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	3318      	adds	r3, #24
 8001884:	b29b      	uxth	r3, r3
 8001886:	88ba      	ldrh	r2, [r7, #4]
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff f972 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+48, y);
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	3330      	adds	r3, #48	@ 0x30
 8001894:	b29b      	uxth	r3, r3
 8001896:	88ba      	ldrh	r2, [r7, #4]
 8001898:	4611      	mov	r1, r2
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f96a 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+48, y+24);
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	3330      	adds	r3, #48	@ 0x30
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	88bb      	ldrh	r3, [r7, #4]
 80018a8:	3318      	adds	r3, #24
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f7ff f960 	bl	8000b74 <drawWhiteSquare>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <drawShapeT>:



void drawShapeT(uint16_t x, uint16_t y, uint16_t color) // T
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	80fb      	strh	r3, [r7, #6]
 80018c6:	460b      	mov	r3, r1
 80018c8:	80bb      	strh	r3, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	807b      	strh	r3, [r7, #2]
	drawSquare(x+24, y, color);
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	3318      	adds	r3, #24
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	887a      	ldrh	r2, [r7, #2]
 80018d6:	88b9      	ldrh	r1, [r7, #4]
 80018d8:	4618      	mov	r0, r3
 80018da:	f002 f813 	bl	8003904 <drawSquare>
	drawSquare(x, y+24, color);
 80018de:	88bb      	ldrh	r3, [r7, #4]
 80018e0:	3318      	adds	r3, #24
 80018e2:	b299      	uxth	r1, r3
 80018e4:	887a      	ldrh	r2, [r7, #2]
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f002 f80b 	bl	8003904 <drawSquare>
	drawSquare(x+24, y+24, color);
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	3318      	adds	r3, #24
 80018f2:	b298      	uxth	r0, r3
 80018f4:	88bb      	ldrh	r3, [r7, #4]
 80018f6:	3318      	adds	r3, #24
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	887a      	ldrh	r2, [r7, #2]
 80018fc:	4619      	mov	r1, r3
 80018fe:	f002 f801 	bl	8003904 <drawSquare>
	drawSquare(x+48, y+24, color);
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	3330      	adds	r3, #48	@ 0x30
 8001906:	b298      	uxth	r0, r3
 8001908:	88bb      	ldrh	r3, [r7, #4]
 800190a:	3318      	adds	r3, #24
 800190c:	b29b      	uxth	r3, r3
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	4619      	mov	r1, r3
 8001912:	f001 fff7 	bl	8003904 <drawSquare>
	index_count = 18;
 8001916:	4b03      	ldr	r3, [pc, #12]	@ (8001924 <drawShapeT+0x68>)
 8001918:	2212      	movs	r2, #18
 800191a:	801a      	strh	r2, [r3, #0]
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200000bc 	.word	0x200000bc

08001928 <removeShapeT>:
void removeShapeT(uint16_t x, uint16_t y)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	460a      	mov	r2, r1
 8001932:	80fb      	strh	r3, [r7, #6]
 8001934:	4613      	mov	r3, r2
 8001936:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x+24, y);
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	3318      	adds	r3, #24
 800193c:	b29b      	uxth	r3, r3
 800193e:	88ba      	ldrh	r2, [r7, #4]
 8001940:	4611      	mov	r1, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff f916 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+24);
 8001948:	88bb      	ldrh	r3, [r7, #4]
 800194a:	3318      	adds	r3, #24
 800194c:	b29a      	uxth	r2, r3
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f90e 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y+24);
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	3318      	adds	r3, #24
 800195c:	b29a      	uxth	r2, r3
 800195e:	88bb      	ldrh	r3, [r7, #4]
 8001960:	3318      	adds	r3, #24
 8001962:	b29b      	uxth	r3, r3
 8001964:	4619      	mov	r1, r3
 8001966:	4610      	mov	r0, r2
 8001968:	f7ff f904 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+48, y+24);
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	3330      	adds	r3, #48	@ 0x30
 8001970:	b29a      	uxth	r2, r3
 8001972:	88bb      	ldrh	r3, [r7, #4]
 8001974:	3318      	adds	r3, #24
 8001976:	b29b      	uxth	r3, r3
 8001978:	4619      	mov	r1, r3
 800197a:	4610      	mov	r0, r2
 800197c:	f7ff f8fa 	bl	8000b74 <drawWhiteSquare>
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <drawShapeT2>:
void drawShapeT2(uint16_t x, uint16_t y, uint16_t color) // T
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
 8001992:	460b      	mov	r3, r1
 8001994:	80bb      	strh	r3, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	807b      	strh	r3, [r7, #2]
	drawSquare(x, y, color);
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	88b9      	ldrh	r1, [r7, #4]
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f001 ffaf 	bl	8003904 <drawSquare>
	drawSquare(x, y+24, color);
 80019a6:	88bb      	ldrh	r3, [r7, #4]
 80019a8:	3318      	adds	r3, #24
 80019aa:	b299      	uxth	r1, r3
 80019ac:	887a      	ldrh	r2, [r7, #2]
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f001 ffa7 	bl	8003904 <drawSquare>
	drawSquare(x+24, y+24, color);
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	3318      	adds	r3, #24
 80019ba:	b298      	uxth	r0, r3
 80019bc:	88bb      	ldrh	r3, [r7, #4]
 80019be:	3318      	adds	r3, #24
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	887a      	ldrh	r2, [r7, #2]
 80019c4:	4619      	mov	r1, r3
 80019c6:	f001 ff9d 	bl	8003904 <drawSquare>
	drawSquare(x, y+48, color);
 80019ca:	88bb      	ldrh	r3, [r7, #4]
 80019cc:	3330      	adds	r3, #48	@ 0x30
 80019ce:	b299      	uxth	r1, r3
 80019d0:	887a      	ldrh	r2, [r7, #2]
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f001 ff95 	bl	8003904 <drawSquare>
	index_count = 19;
 80019da:	4b03      	ldr	r3, [pc, #12]	@ (80019e8 <drawShapeT2+0x60>)
 80019dc:	2213      	movs	r2, #19
 80019de:	801a      	strh	r2, [r3, #0]
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200000bc 	.word	0x200000bc

080019ec <removeShapeT2>:
void removeShapeT2(uint16_t x, uint16_t y)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	460a      	mov	r2, r1
 80019f6:	80fb      	strh	r3, [r7, #6]
 80019f8:	4613      	mov	r3, r2
 80019fa:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x, y);
 80019fc:	88ba      	ldrh	r2, [r7, #4]
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff f8b6 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+24);
 8001a08:	88bb      	ldrh	r3, [r7, #4]
 8001a0a:	3318      	adds	r3, #24
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	4611      	mov	r1, r2
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f8ae 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y+24);
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	3318      	adds	r3, #24
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	88bb      	ldrh	r3, [r7, #4]
 8001a20:	3318      	adds	r3, #24
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4619      	mov	r1, r3
 8001a26:	4610      	mov	r0, r2
 8001a28:	f7ff f8a4 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+48);
 8001a2c:	88bb      	ldrh	r3, [r7, #4]
 8001a2e:	3330      	adds	r3, #48	@ 0x30
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f89c 	bl	8000b74 <drawWhiteSquare>
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <drawShapeT3>:
void drawShapeT3(uint16_t x, uint16_t y, uint16_t color) // T
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	80bb      	strh	r3, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	807b      	strh	r3, [r7, #2]
	drawSquare(x, y, color);
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	88b9      	ldrh	r1, [r7, #4]
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 ff51 	bl	8003904 <drawSquare>
	drawSquare(x+24, y, color);
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	3318      	adds	r3, #24
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	887a      	ldrh	r2, [r7, #2]
 8001a6a:	88b9      	ldrh	r1, [r7, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f001 ff49 	bl	8003904 <drawSquare>
	drawSquare(x+48, y, color);
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	3330      	adds	r3, #48	@ 0x30
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	887a      	ldrh	r2, [r7, #2]
 8001a7a:	88b9      	ldrh	r1, [r7, #4]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f001 ff41 	bl	8003904 <drawSquare>
	drawSquare(x+24, y+24, color);
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	3318      	adds	r3, #24
 8001a86:	b298      	uxth	r0, r3
 8001a88:	88bb      	ldrh	r3, [r7, #4]
 8001a8a:	3318      	adds	r3, #24
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	4619      	mov	r1, r3
 8001a92:	f001 ff37 	bl	8003904 <drawSquare>
	index_count = 20;
 8001a96:	4b03      	ldr	r3, [pc, #12]	@ (8001aa4 <drawShapeT3+0x60>)
 8001a98:	2214      	movs	r2, #20
 8001a9a:	801a      	strh	r2, [r3, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200000bc 	.word	0x200000bc

08001aa8 <removeShapeT3>:
void removeShapeT3(uint16_t x, uint16_t y)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	460a      	mov	r2, r1
 8001ab2:	80fb      	strh	r3, [r7, #6]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x, y);
 8001ab8:	88ba      	ldrh	r2, [r7, #4]
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	4611      	mov	r1, r2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff f858 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y);
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	3318      	adds	r3, #24
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	88ba      	ldrh	r2, [r7, #4]
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f850 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+48, y);
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	3330      	adds	r3, #48	@ 0x30
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	88ba      	ldrh	r2, [r7, #4]
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff f848 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y+24);
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	3318      	adds	r3, #24
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	88bb      	ldrh	r3, [r7, #4]
 8001aec:	3318      	adds	r3, #24
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	4619      	mov	r1, r3
 8001af2:	4610      	mov	r0, r2
 8001af4:	f7ff f83e 	bl	8000b74 <drawWhiteSquare>
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <drawShapeT4>:
void drawShapeT4(uint16_t x, uint16_t y, uint16_t color) // T
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	80bb      	strh	r3, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	807b      	strh	r3, [r7, #2]
	drawSquare(x+24, y, color);
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	3318      	adds	r3, #24
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	887a      	ldrh	r2, [r7, #2]
 8001b1a:	88b9      	ldrh	r1, [r7, #4]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 fef1 	bl	8003904 <drawSquare>
	drawSquare(x+24, y+24, color);
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	3318      	adds	r3, #24
 8001b26:	b298      	uxth	r0, r3
 8001b28:	88bb      	ldrh	r3, [r7, #4]
 8001b2a:	3318      	adds	r3, #24
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	4619      	mov	r1, r3
 8001b32:	f001 fee7 	bl	8003904 <drawSquare>
	drawSquare(x+24, y+48, color);
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	3318      	adds	r3, #24
 8001b3a:	b298      	uxth	r0, r3
 8001b3c:	88bb      	ldrh	r3, [r7, #4]
 8001b3e:	3330      	adds	r3, #48	@ 0x30
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	887a      	ldrh	r2, [r7, #2]
 8001b44:	4619      	mov	r1, r3
 8001b46:	f001 fedd 	bl	8003904 <drawSquare>
	drawSquare(x, y+24, color);
 8001b4a:	88bb      	ldrh	r3, [r7, #4]
 8001b4c:	3318      	adds	r3, #24
 8001b4e:	b299      	uxth	r1, r3
 8001b50:	887a      	ldrh	r2, [r7, #2]
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 fed5 	bl	8003904 <drawSquare>
	index_count = 21;
 8001b5a:	4b03      	ldr	r3, [pc, #12]	@ (8001b68 <drawShapeT4+0x68>)
 8001b5c:	2215      	movs	r2, #21
 8001b5e:	801a      	strh	r2, [r3, #0]
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200000bc 	.word	0x200000bc

08001b6c <removeShapeT4>:
void removeShapeT4(uint16_t x, uint16_t y)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	460a      	mov	r2, r1
 8001b76:	80fb      	strh	r3, [r7, #6]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	80bb      	strh	r3, [r7, #4]
	drawWhiteSquare(x+24, y);
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	3318      	adds	r3, #24
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	88ba      	ldrh	r2, [r7, #4]
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fff4 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y+24);
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	3318      	adds	r3, #24
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	88bb      	ldrh	r3, [r7, #4]
 8001b94:	3318      	adds	r3, #24
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	f7fe ffea 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x+24, y+48);
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	3318      	adds	r3, #24
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	88bb      	ldrh	r3, [r7, #4]
 8001ba8:	3330      	adds	r3, #48	@ 0x30
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	4619      	mov	r1, r3
 8001bae:	4610      	mov	r0, r2
 8001bb0:	f7fe ffe0 	bl	8000b74 <drawWhiteSquare>
	drawWhiteSquare(x, y+24);
 8001bb4:	88bb      	ldrh	r3, [r7, #4]
 8001bb6:	3318      	adds	r3, #24
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe ffd8 	bl	8000b74 <drawWhiteSquare>
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <drawRandomShape>:
/*
 * 		END DRAW ALL SHAPES
 */

void drawRandomShape()
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
	uint32_t num = generateRandomNum();
 8001bd2:	f001 ff3d 	bl	8003a50 <generateRandomNum>
 8001bd6:	6078      	str	r0, [r7, #4]
	num %= 7;
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	4b31      	ldr	r3, [pc, #196]	@ (8001ca0 <drawRandomShape+0xd4>)
 8001bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8001be0:	1ad1      	subs	r1, r2, r3
 8001be2:	0849      	lsrs	r1, r1, #1
 8001be4:	440b      	add	r3, r1
 8001be6:	0899      	lsrs	r1, r3, #2
 8001be8:	460b      	mov	r3, r1
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	1a5b      	subs	r3, r3, r1
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	607b      	str	r3, [r7, #4]
	if (num == 0)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d108      	bne.n	8001c0a <drawRandomShape+0x3e>
	{
		drawShapeO(120, 0, LCD_COLOR_BLUE);
 8001bf8:	221f      	movs	r2, #31
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	2078      	movs	r0, #120	@ 0x78
 8001bfe:	f7ff f807 	bl	8000c10 <drawShapeO>
		shape_is = 1;
 8001c02:	4b28      	ldr	r3, [pc, #160]	@ (8001ca4 <drawRandomShape+0xd8>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
	else if (num == 6)
	{
		drawShapeT(120, 0, LCD_COLOR_BLUE);
		shape_is = 7;
	}
}
 8001c08:	e046      	b.n	8001c98 <drawRandomShape+0xcc>
	else if (num == 1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d108      	bne.n	8001c22 <drawRandomShape+0x56>
		drawShapeI(120, 0, LCD_COLOR_BLUE);
 8001c10:	221f      	movs	r2, #31
 8001c12:	2100      	movs	r1, #0
 8001c14:	2078      	movs	r0, #120	@ 0x78
 8001c16:	f7ff f859 	bl	8000ccc <drawShapeI>
		shape_is = 2;
 8001c1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ca4 <drawRandomShape+0xd8>)
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	601a      	str	r2, [r3, #0]
}
 8001c20:	e03a      	b.n	8001c98 <drawRandomShape+0xcc>
	else if (num == 2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d108      	bne.n	8001c3a <drawRandomShape+0x6e>
		drawShapeS(120, 0, LCD_COLOR_BLUE);
 8001c28:	221f      	movs	r2, #31
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2078      	movs	r0, #120	@ 0x78
 8001c2e:	f7ff f901 	bl	8000e34 <drawShapeS>
		shape_is = 3;
 8001c32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca4 <drawRandomShape+0xd8>)
 8001c34:	2203      	movs	r2, #3
 8001c36:	601a      	str	r2, [r3, #0]
}
 8001c38:	e02e      	b.n	8001c98 <drawRandomShape+0xcc>
	else if (num == 3)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d108      	bne.n	8001c52 <drawRandomShape+0x86>
		drawShapeZ(120, 0, LCD_COLOR_BLUE);
 8001c40:	221f      	movs	r2, #31
 8001c42:	2100      	movs	r1, #0
 8001c44:	2078      	movs	r0, #120	@ 0x78
 8001c46:	f7ff fa1b 	bl	8001080 <drawShapeZ>
		shape_is = 4;
 8001c4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ca4 <drawRandomShape+0xd8>)
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	601a      	str	r2, [r3, #0]
}
 8001c50:	e022      	b.n	8001c98 <drawRandomShape+0xcc>
	else if (num == 4)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d108      	bne.n	8001c6a <drawRandomShape+0x9e>
		drawShapeL(120, 0, LCD_COLOR_BLUE);
 8001c58:	221f      	movs	r2, #31
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2078      	movs	r0, #120	@ 0x78
 8001c5e:	f7ff fb35 	bl	80012cc <drawShapeL>
		shape_is = 5;
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <drawRandomShape+0xd8>)
 8001c64:	2205      	movs	r2, #5
 8001c66:	601a      	str	r2, [r3, #0]
}
 8001c68:	e016      	b.n	8001c98 <drawRandomShape+0xcc>
	else if (num == 5)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b05      	cmp	r3, #5
 8001c6e:	d108      	bne.n	8001c82 <drawRandomShape+0xb6>
		drawShapeJ(120, 0, LCD_COLOR_BLUE);
 8001c70:	221f      	movs	r2, #31
 8001c72:	2100      	movs	r1, #0
 8001c74:	2078      	movs	r0, #120	@ 0x78
 8001c76:	f7ff fca1 	bl	80015bc <drawShapeJ>
		shape_is = 6;
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca4 <drawRandomShape+0xd8>)
 8001c7c:	2206      	movs	r2, #6
 8001c7e:	601a      	str	r2, [r3, #0]
}
 8001c80:	e00a      	b.n	8001c98 <drawRandomShape+0xcc>
	else if (num == 6)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b06      	cmp	r3, #6
 8001c86:	d107      	bne.n	8001c98 <drawRandomShape+0xcc>
		drawShapeT(120, 0, LCD_COLOR_BLUE);
 8001c88:	221f      	movs	r2, #31
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2078      	movs	r0, #120	@ 0x78
 8001c8e:	f7ff fe15 	bl	80018bc <drawShapeT>
		shape_is = 7;
 8001c92:	4b04      	ldr	r3, [pc, #16]	@ (8001ca4 <drawRandomShape+0xd8>)
 8001c94:	2207      	movs	r2, #7
 8001c96:	601a      	str	r2, [r3, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	24924925 	.word	0x24924925
 8001ca4:	200000b4 	.word	0x200000b4

08001ca8 <rotateShape>:

void rotateShape()
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	if (shape_is == 1)
 8001cac:	4b9c      	ldr	r3, [pc, #624]	@ (8001f20 <rotateShape+0x278>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	f000 81c9 	beq.w	8002048 <rotateShape+0x3a0>
		{
		default:
			break;
		}
	}
	else if (shape_is == 2)
 8001cb6:	4b9a      	ldr	r3, [pc, #616]	@ (8001f20 <rotateShape+0x278>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d128      	bne.n	8001d10 <rotateShape+0x68>
	{
		switch (index_count)
 8001cbe:	4b99      	ldr	r3, [pc, #612]	@ (8001f24 <rotateShape+0x27c>)
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d002      	beq.n	8001ccc <rotateShape+0x24>
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d011      	beq.n	8001cee <rotateShape+0x46>
		case 3:
			removeShapeI2(x_pos, y_pos);
			drawShapeI(x_pos, y_pos, LCD_COLOR_BLUE);
			break;
		default:
			break;
 8001cca:	e1c8      	b.n	800205e <rotateShape+0x3b6>
			removeShapeI(x_pos, y_pos);
 8001ccc:	4b96      	ldr	r3, [pc, #600]	@ (8001f28 <rotateShape+0x280>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	4a96      	ldr	r2, [pc, #600]	@ (8001f2c <rotateShape+0x284>)
 8001cd2:	8812      	ldrh	r2, [r2, #0]
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f828 	bl	8000d2c <removeShapeI>
			drawShapeI2(x_pos, y_pos, LCD_COLOR_BLUE);
 8001cdc:	4b92      	ldr	r3, [pc, #584]	@ (8001f28 <rotateShape+0x280>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	4a92      	ldr	r2, [pc, #584]	@ (8001f2c <rotateShape+0x284>)
 8001ce2:	8811      	ldrh	r1, [r2, #0]
 8001ce4:	221f      	movs	r2, #31
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff f84a 	bl	8000d80 <drawShapeI2>
			break;
 8001cec:	e1b7      	b.n	800205e <rotateShape+0x3b6>
			removeShapeI2(x_pos, y_pos);
 8001cee:	4b8e      	ldr	r3, [pc, #568]	@ (8001f28 <rotateShape+0x280>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	4a8e      	ldr	r2, [pc, #568]	@ (8001f2c <rotateShape+0x284>)
 8001cf4:	8812      	ldrh	r2, [r2, #0]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f871 	bl	8000de0 <removeShapeI2>
			drawShapeI(x_pos, y_pos, LCD_COLOR_BLUE);
 8001cfe:	4b8a      	ldr	r3, [pc, #552]	@ (8001f28 <rotateShape+0x280>)
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	4a8a      	ldr	r2, [pc, #552]	@ (8001f2c <rotateShape+0x284>)
 8001d04:	8811      	ldrh	r1, [r2, #0]
 8001d06:	221f      	movs	r2, #31
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe ffdf 	bl	8000ccc <drawShapeI>
			break;
 8001d0e:	e1a6      	b.n	800205e <rotateShape+0x3b6>
		}
	}
	else if (shape_is == 3)
 8001d10:	4b83      	ldr	r3, [pc, #524]	@ (8001f20 <rotateShape+0x278>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d13e      	bne.n	8001d96 <rotateShape+0xee>
	{
		switch(index_count)
 8001d18:	4b82      	ldr	r3, [pc, #520]	@ (8001f24 <rotateShape+0x27c>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	2b06      	cmp	r3, #6
 8001d1e:	d029      	beq.n	8001d74 <rotateShape+0xcc>
 8001d20:	2b06      	cmp	r3, #6
 8001d22:	f300 8193 	bgt.w	800204c <rotateShape+0x3a4>
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d002      	beq.n	8001d30 <rotateShape+0x88>
 8001d2a:	2b05      	cmp	r3, #5
 8001d2c:	d011      	beq.n	8001d52 <rotateShape+0xaa>
		case 6:
			removeShapeS3(x_pos, y_pos);
			drawShapeS(x_pos, y_pos, LCD_COLOR_BLUE);
			break;
		default:
			break;
 8001d2e:	e18d      	b.n	800204c <rotateShape+0x3a4>
			removeShapeS(x_pos, y_pos);
 8001d30:	4b7d      	ldr	r3, [pc, #500]	@ (8001f28 <rotateShape+0x280>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	4a7d      	ldr	r2, [pc, #500]	@ (8001f2c <rotateShape+0x284>)
 8001d36:	8812      	ldrh	r2, [r2, #0]
 8001d38:	4611      	mov	r1, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f8ae 	bl	8000e9c <removeShapeS>
			drawShapeS2(x_pos, y_pos, LCD_COLOR_BLUE);
 8001d40:	4b79      	ldr	r3, [pc, #484]	@ (8001f28 <rotateShape+0x280>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	4a79      	ldr	r2, [pc, #484]	@ (8001f2c <rotateShape+0x284>)
 8001d46:	8811      	ldrh	r1, [r2, #0]
 8001d48:	221f      	movs	r2, #31
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff f8d4 	bl	8000ef8 <drawShapeS2>
			break;
 8001d50:	e185      	b.n	800205e <rotateShape+0x3b6>
			removeShapeS2(x_pos, y_pos);
 8001d52:	4b75      	ldr	r3, [pc, #468]	@ (8001f28 <rotateShape+0x280>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	4a75      	ldr	r2, [pc, #468]	@ (8001f2c <rotateShape+0x284>)
 8001d58:	8812      	ldrh	r2, [r2, #0]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff f8ff 	bl	8000f60 <removeShapeS2>
			drawShapeS3(x_pos, y_pos, LCD_COLOR_BLUE);
 8001d62:	4b71      	ldr	r3, [pc, #452]	@ (8001f28 <rotateShape+0x280>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	4a71      	ldr	r2, [pc, #452]	@ (8001f2c <rotateShape+0x284>)
 8001d68:	8811      	ldrh	r1, [r2, #0]
 8001d6a:	221f      	movs	r2, #31
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff f925 	bl	8000fbc <drawShapeS3>
			break;
 8001d72:	e174      	b.n	800205e <rotateShape+0x3b6>
			removeShapeS3(x_pos, y_pos);
 8001d74:	4b6c      	ldr	r3, [pc, #432]	@ (8001f28 <rotateShape+0x280>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	4a6c      	ldr	r2, [pc, #432]	@ (8001f2c <rotateShape+0x284>)
 8001d7a:	8812      	ldrh	r2, [r2, #0]
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff f950 	bl	8001024 <removeShapeS3>
			drawShapeS(x_pos, y_pos, LCD_COLOR_BLUE);
 8001d84:	4b68      	ldr	r3, [pc, #416]	@ (8001f28 <rotateShape+0x280>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	4a68      	ldr	r2, [pc, #416]	@ (8001f2c <rotateShape+0x284>)
 8001d8a:	8811      	ldrh	r1, [r2, #0]
 8001d8c:	221f      	movs	r2, #31
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff f850 	bl	8000e34 <drawShapeS>
			break;
 8001d94:	e163      	b.n	800205e <rotateShape+0x3b6>
		}
	}
	else if (shape_is == 4)
 8001d96:	4b62      	ldr	r3, [pc, #392]	@ (8001f20 <rotateShape+0x278>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d13e      	bne.n	8001e1c <rotateShape+0x174>
	{
		switch(index_count)
 8001d9e:	4b61      	ldr	r3, [pc, #388]	@ (8001f24 <rotateShape+0x27c>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	2b09      	cmp	r3, #9
 8001da4:	d029      	beq.n	8001dfa <rotateShape+0x152>
 8001da6:	2b09      	cmp	r3, #9
 8001da8:	f300 8152 	bgt.w	8002050 <rotateShape+0x3a8>
 8001dac:	2b07      	cmp	r3, #7
 8001dae:	d002      	beq.n	8001db6 <rotateShape+0x10e>
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d011      	beq.n	8001dd8 <rotateShape+0x130>
		case 9:
			removeShapeZ3(x_pos, y_pos);
			drawShapeZ(x_pos, y_pos, LCD_COLOR_BLUE);
			break;
		default:
			break;
 8001db4:	e14c      	b.n	8002050 <rotateShape+0x3a8>
			removeShapeZ(x_pos, y_pos);
 8001db6:	4b5c      	ldr	r3, [pc, #368]	@ (8001f28 <rotateShape+0x280>)
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	4a5c      	ldr	r2, [pc, #368]	@ (8001f2c <rotateShape+0x284>)
 8001dbc:	8812      	ldrh	r2, [r2, #0]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff f991 	bl	80010e8 <removeShapeZ>
			drawShapeZ2(x_pos, y_pos, LCD_COLOR_BLUE);
 8001dc6:	4b58      	ldr	r3, [pc, #352]	@ (8001f28 <rotateShape+0x280>)
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	4a58      	ldr	r2, [pc, #352]	@ (8001f2c <rotateShape+0x284>)
 8001dcc:	8811      	ldrh	r1, [r2, #0]
 8001dce:	221f      	movs	r2, #31
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff f9b7 	bl	8001144 <drawShapeZ2>
			break;
 8001dd6:	e142      	b.n	800205e <rotateShape+0x3b6>
			removeShapeZ2(x_pos, y_pos);
 8001dd8:	4b53      	ldr	r3, [pc, #332]	@ (8001f28 <rotateShape+0x280>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	4a53      	ldr	r2, [pc, #332]	@ (8001f2c <rotateShape+0x284>)
 8001dde:	8812      	ldrh	r2, [r2, #0]
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff f9e2 	bl	80011ac <removeShapeZ2>
			drawShapeZ3(x_pos, y_pos, LCD_COLOR_BLUE);
 8001de8:	4b4f      	ldr	r3, [pc, #316]	@ (8001f28 <rotateShape+0x280>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	4a4f      	ldr	r2, [pc, #316]	@ (8001f2c <rotateShape+0x284>)
 8001dee:	8811      	ldrh	r1, [r2, #0]
 8001df0:	221f      	movs	r2, #31
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fa08 	bl	8001208 <drawShapeZ3>
			break;
 8001df8:	e131      	b.n	800205e <rotateShape+0x3b6>
			removeShapeZ3(x_pos, y_pos);
 8001dfa:	4b4b      	ldr	r3, [pc, #300]	@ (8001f28 <rotateShape+0x280>)
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	4a4b      	ldr	r2, [pc, #300]	@ (8001f2c <rotateShape+0x284>)
 8001e00:	8812      	ldrh	r2, [r2, #0]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fa33 	bl	8001270 <removeShapeZ3>
			drawShapeZ(x_pos, y_pos, LCD_COLOR_BLUE);
 8001e0a:	4b47      	ldr	r3, [pc, #284]	@ (8001f28 <rotateShape+0x280>)
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	4a47      	ldr	r2, [pc, #284]	@ (8001f2c <rotateShape+0x284>)
 8001e10:	8811      	ldrh	r1, [r2, #0]
 8001e12:	221f      	movs	r2, #31
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff f933 	bl	8001080 <drawShapeZ>
			break;
 8001e1a:	e120      	b.n	800205e <rotateShape+0x3b6>
		}
	}
	else if (shape_is == 5)
 8001e1c:	4b40      	ldr	r3, [pc, #256]	@ (8001f20 <rotateShape+0x278>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d155      	bne.n	8001ed0 <rotateShape+0x228>
	{
		switch(index_count)
 8001e24:	4b3f      	ldr	r3, [pc, #252]	@ (8001f24 <rotateShape+0x27c>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	3b0a      	subs	r3, #10
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	f200 8112 	bhi.w	8002054 <rotateShape+0x3ac>
 8001e30:	a201      	add	r2, pc, #4	@ (adr r2, 8001e38 <rotateShape+0x190>)
 8001e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e36:	bf00      	nop
 8001e38:	08001e49 	.word	0x08001e49
 8001e3c:	08001e6b 	.word	0x08001e6b
 8001e40:	08001e8d 	.word	0x08001e8d
 8001e44:	08001eaf 	.word	0x08001eaf
		{
		case 10:
			removeShapeL(x_pos, y_pos);
 8001e48:	4b37      	ldr	r3, [pc, #220]	@ (8001f28 <rotateShape+0x280>)
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	4a37      	ldr	r2, [pc, #220]	@ (8001f2c <rotateShape+0x284>)
 8001e4e:	8812      	ldrh	r2, [r2, #0]
 8001e50:	4611      	mov	r1, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fa6c 	bl	8001330 <removeShapeL>
			drawShapeL2(x_pos, y_pos, LCD_COLOR_BLUE);
 8001e58:	4b33      	ldr	r3, [pc, #204]	@ (8001f28 <rotateShape+0x280>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	4a33      	ldr	r2, [pc, #204]	@ (8001f2c <rotateShape+0x284>)
 8001e5e:	8811      	ldrh	r1, [r2, #0]
 8001e60:	221f      	movs	r2, #31
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fa90 	bl	8001388 <drawShapeL2>
			break;
 8001e68:	e0f9      	b.n	800205e <rotateShape+0x3b6>
		case 11:
			removeShapeL2(x_pos, y_pos);
 8001e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f28 <rotateShape+0x280>)
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	4a2f      	ldr	r2, [pc, #188]	@ (8001f2c <rotateShape+0x284>)
 8001e70:	8812      	ldrh	r2, [r2, #0]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fabd 	bl	80013f4 <removeShapeL2>
			drawShapeL3(x_pos, y_pos, LCD_COLOR_BLUE);
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f28 <rotateShape+0x280>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8001f2c <rotateShape+0x284>)
 8001e80:	8811      	ldrh	r1, [r2, #0]
 8001e82:	221f      	movs	r2, #31
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fae5 	bl	8001454 <drawShapeL3>
			break;
 8001e8a:	e0e8      	b.n	800205e <rotateShape+0x3b6>
		case 12:
			removeShapeL3(x_pos, y_pos);
 8001e8c:	4b26      	ldr	r3, [pc, #152]	@ (8001f28 <rotateShape+0x280>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	4a26      	ldr	r2, [pc, #152]	@ (8001f2c <rotateShape+0x284>)
 8001e92:	8812      	ldrh	r2, [r2, #0]
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fb0c 	bl	80014b4 <removeShapeL3>
			drawShapeL4(x_pos, y_pos, LCD_COLOR_BLUE);
 8001e9c:	4b22      	ldr	r3, [pc, #136]	@ (8001f28 <rotateShape+0x280>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	4a22      	ldr	r2, [pc, #136]	@ (8001f2c <rotateShape+0x284>)
 8001ea2:	8811      	ldrh	r1, [r2, #0]
 8001ea4:	221f      	movs	r2, #31
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fb2e 	bl	8001508 <drawShapeL4>
			break;
 8001eac:	e0d7      	b.n	800205e <rotateShape+0x3b6>
		case 13:
			removeShapeL4(x_pos, y_pos);
 8001eae:	4b1e      	ldr	r3, [pc, #120]	@ (8001f28 <rotateShape+0x280>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f2c <rotateShape+0x284>)
 8001eb4:	8812      	ldrh	r2, [r2, #0]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fb55 	bl	8001568 <removeShapeL4>
			drawShapeL(x_pos, y_pos, LCD_COLOR_BLUE);
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <rotateShape+0x280>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8001f2c <rotateShape+0x284>)
 8001ec4:	8811      	ldrh	r1, [r2, #0]
 8001ec6:	221f      	movs	r2, #31
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff f9ff 	bl	80012cc <drawShapeL>
			break;
 8001ece:	e0c6      	b.n	800205e <rotateShape+0x3b6>
		default:
			break;
		}
	}
	else if (shape_is == 6)
 8001ed0:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <rotateShape+0x278>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b06      	cmp	r3, #6
 8001ed6:	d15e      	bne.n	8001f96 <rotateShape+0x2ee>
	{
		switch(index_count)
 8001ed8:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <rotateShape+0x27c>)
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	3b0e      	subs	r3, #14
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	f200 80ba 	bhi.w	8002058 <rotateShape+0x3b0>
 8001ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8001eec <rotateShape+0x244>)
 8001ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eea:	bf00      	nop
 8001eec:	08001efd 	.word	0x08001efd
 8001ef0:	08001f31 	.word	0x08001f31
 8001ef4:	08001f53 	.word	0x08001f53
 8001ef8:	08001f75 	.word	0x08001f75
		{
		case 14:
			removeShapeJ(x_pos, y_pos);
 8001efc:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <rotateShape+0x280>)
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <rotateShape+0x284>)
 8001f02:	8812      	ldrh	r2, [r2, #0]
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fb8e 	bl	8001628 <removeShapeJ>
			drawShapeJ2(x_pos, y_pos, LCD_COLOR_BLUE);
 8001f0c:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <rotateShape+0x280>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	4a06      	ldr	r2, [pc, #24]	@ (8001f2c <rotateShape+0x284>)
 8001f12:	8811      	ldrh	r1, [r2, #0]
 8001f14:	221f      	movs	r2, #31
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fbb6 	bl	8001688 <drawShapeJ2>
			break;
 8001f1c:	e09f      	b.n	800205e <rotateShape+0x3b6>
 8001f1e:	bf00      	nop
 8001f20:	200000b4 	.word	0x200000b4
 8001f24:	200000bc 	.word	0x200000bc
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	200000b0 	.word	0x200000b0
		case 15:
			removeShapeJ2(x_pos, y_pos);
 8001f30:	4b4c      	ldr	r3, [pc, #304]	@ (8002064 <rotateShape+0x3bc>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	4a4c      	ldr	r2, [pc, #304]	@ (8002068 <rotateShape+0x3c0>)
 8001f36:	8812      	ldrh	r2, [r2, #0]
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fbd8 	bl	80016f0 <removeShapeJ2>
			drawShapeJ3(x_pos, y_pos, LCD_COLOR_BLUE);
 8001f40:	4b48      	ldr	r3, [pc, #288]	@ (8002064 <rotateShape+0x3bc>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	4a48      	ldr	r2, [pc, #288]	@ (8002068 <rotateShape+0x3c0>)
 8001f46:	8811      	ldrh	r1, [r2, #0]
 8001f48:	221f      	movs	r2, #31
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fbfe 	bl	800174c <drawShapeJ3>
			break;
 8001f50:	e085      	b.n	800205e <rotateShape+0x3b6>
		case 16:
			removeShapeJ3(x_pos, y_pos);
 8001f52:	4b44      	ldr	r3, [pc, #272]	@ (8002064 <rotateShape+0x3bc>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	4a44      	ldr	r2, [pc, #272]	@ (8002068 <rotateShape+0x3c0>)
 8001f58:	8812      	ldrh	r2, [r2, #0]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fc25 	bl	80017ac <removeShapeJ3>
			drawShapeJ4(x_pos, y_pos, LCD_COLOR_BLUE);
 8001f62:	4b40      	ldr	r3, [pc, #256]	@ (8002064 <rotateShape+0x3bc>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	4a40      	ldr	r2, [pc, #256]	@ (8002068 <rotateShape+0x3c0>)
 8001f68:	8811      	ldrh	r1, [r2, #0]
 8001f6a:	221f      	movs	r2, #31
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fc47 	bl	8001800 <drawShapeJ4>
			break;
 8001f72:	e074      	b.n	800205e <rotateShape+0x3b6>
		case 17:
			removeShapeJ4(x_pos, y_pos);
 8001f74:	4b3b      	ldr	r3, [pc, #236]	@ (8002064 <rotateShape+0x3bc>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	4a3b      	ldr	r2, [pc, #236]	@ (8002068 <rotateShape+0x3c0>)
 8001f7a:	8812      	ldrh	r2, [r2, #0]
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fc70 	bl	8001864 <removeShapeJ4>
			drawShapeJ(x_pos, y_pos, LCD_COLOR_BLUE);
 8001f84:	4b37      	ldr	r3, [pc, #220]	@ (8002064 <rotateShape+0x3bc>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	4a37      	ldr	r2, [pc, #220]	@ (8002068 <rotateShape+0x3c0>)
 8001f8a:	8811      	ldrh	r1, [r2, #0]
 8001f8c:	221f      	movs	r2, #31
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fb14 	bl	80015bc <drawShapeJ>
			break;
 8001f94:	e063      	b.n	800205e <rotateShape+0x3b6>
		default:
			break;
		}
	}
	else if (shape_is == 7)
 8001f96:	4b35      	ldr	r3, [pc, #212]	@ (800206c <rotateShape+0x3c4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b07      	cmp	r3, #7
 8001f9c:	d15f      	bne.n	800205e <rotateShape+0x3b6>
	{
		switch(index_count)
 8001f9e:	4b34      	ldr	r3, [pc, #208]	@ (8002070 <rotateShape+0x3c8>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	3b12      	subs	r3, #18
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d859      	bhi.n	800205c <rotateShape+0x3b4>
 8001fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8001fb0 <rotateShape+0x308>)
 8001faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fae:	bf00      	nop
 8001fb0:	08001fc1 	.word	0x08001fc1
 8001fb4:	08001fe3 	.word	0x08001fe3
 8001fb8:	08002005 	.word	0x08002005
 8001fbc:	08002027 	.word	0x08002027
		{
		case 18:
			removeShapeT(x_pos, y_pos);
 8001fc0:	4b28      	ldr	r3, [pc, #160]	@ (8002064 <rotateShape+0x3bc>)
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	4a28      	ldr	r2, [pc, #160]	@ (8002068 <rotateShape+0x3c0>)
 8001fc6:	8812      	ldrh	r2, [r2, #0]
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fcac 	bl	8001928 <removeShapeT>
			drawShapeT2(x_pos, y_pos, LCD_COLOR_BLUE);
 8001fd0:	4b24      	ldr	r3, [pc, #144]	@ (8002064 <rotateShape+0x3bc>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	4a24      	ldr	r2, [pc, #144]	@ (8002068 <rotateShape+0x3c0>)
 8001fd6:	8811      	ldrh	r1, [r2, #0]
 8001fd8:	221f      	movs	r2, #31
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fcd4 	bl	8001988 <drawShapeT2>
			break;
 8001fe0:	e03d      	b.n	800205e <rotateShape+0x3b6>
		case 19:
			removeShapeT2(x_pos, y_pos);
 8001fe2:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <rotateShape+0x3bc>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	4a20      	ldr	r2, [pc, #128]	@ (8002068 <rotateShape+0x3c0>)
 8001fe8:	8812      	ldrh	r2, [r2, #0]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fcfd 	bl	80019ec <removeShapeT2>
			drawShapeT3(x_pos, y_pos, LCD_COLOR_BLUE);
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8002064 <rotateShape+0x3bc>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8002068 <rotateShape+0x3c0>)
 8001ff8:	8811      	ldrh	r1, [r2, #0]
 8001ffa:	221f      	movs	r2, #31
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fd21 	bl	8001a44 <drawShapeT3>
			break;
 8002002:	e02c      	b.n	800205e <rotateShape+0x3b6>
		case 20:
			removeShapeT3(x_pos, y_pos);
 8002004:	4b17      	ldr	r3, [pc, #92]	@ (8002064 <rotateShape+0x3bc>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	4a17      	ldr	r2, [pc, #92]	@ (8002068 <rotateShape+0x3c0>)
 800200a:	8812      	ldrh	r2, [r2, #0]
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fd4a 	bl	8001aa8 <removeShapeT3>
			drawShapeT4(x_pos, y_pos, LCD_COLOR_BLUE);
 8002014:	4b13      	ldr	r3, [pc, #76]	@ (8002064 <rotateShape+0x3bc>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	4a13      	ldr	r2, [pc, #76]	@ (8002068 <rotateShape+0x3c0>)
 800201a:	8811      	ldrh	r1, [r2, #0]
 800201c:	221f      	movs	r2, #31
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fd6e 	bl	8001b00 <drawShapeT4>
			break;
 8002024:	e01b      	b.n	800205e <rotateShape+0x3b6>
		case 21:
			removeShapeT4(x_pos, y_pos);
 8002026:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <rotateShape+0x3bc>)
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	4a0f      	ldr	r2, [pc, #60]	@ (8002068 <rotateShape+0x3c0>)
 800202c:	8812      	ldrh	r2, [r2, #0]
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fd9b 	bl	8001b6c <removeShapeT4>
			drawShapeT(x_pos, y_pos, LCD_COLOR_BLUE);
 8002036:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <rotateShape+0x3bc>)
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	4a0b      	ldr	r2, [pc, #44]	@ (8002068 <rotateShape+0x3c0>)
 800203c:	8811      	ldrh	r1, [r2, #0]
 800203e:	221f      	movs	r2, #31
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fc3b 	bl	80018bc <drawShapeT>
			break;
 8002046:	e00a      	b.n	800205e <rotateShape+0x3b6>
			break;
 8002048:	bf00      	nop
 800204a:	e008      	b.n	800205e <rotateShape+0x3b6>
			break;
 800204c:	bf00      	nop
 800204e:	e006      	b.n	800205e <rotateShape+0x3b6>
			break;
 8002050:	bf00      	nop
 8002052:	e004      	b.n	800205e <rotateShape+0x3b6>
			break;
 8002054:	bf00      	nop
 8002056:	e002      	b.n	800205e <rotateShape+0x3b6>
			break;
 8002058:	bf00      	nop
 800205a:	e000      	b.n	800205e <rotateShape+0x3b6>
		default:
			break;
 800205c:	bf00      	nop
		}
	}
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000000 	.word	0x20000000
 8002068:	200000b0 	.word	0x200000b0
 800206c:	200000b4 	.word	0x200000b4
 8002070:	200000bc 	.word	0x200000bc

08002074 <moveDownOne>:

void moveDownOne()
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
	y_pos += YSTEP;
 8002078:	4b99      	ldr	r3, [pc, #612]	@ (80022e0 <moveDownOne+0x26c>)
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	3318      	adds	r3, #24
 800207e:	b29a      	uxth	r2, r3
 8002080:	4b97      	ldr	r3, [pc, #604]	@ (80022e0 <moveDownOne+0x26c>)
 8002082:	801a      	strh	r2, [r3, #0]
	if (shape_is == 1){
 8002084:	4b97      	ldr	r3, [pc, #604]	@ (80022e4 <moveDownOne+0x270>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d117      	bne.n	80020bc <moveDownOne+0x48>
		switch(index_count)
 800208c:	4b96      	ldr	r3, [pc, #600]	@ (80022e8 <moveDownOne+0x274>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	2b01      	cmp	r3, #1
 8002092:	f040 8201 	bne.w	8002498 <moveDownOne+0x424>
		{
		case 1:
			removeShapeO(x_pos, y_pos - YSTEP);
 8002096:	4b95      	ldr	r3, [pc, #596]	@ (80022ec <moveDownOne+0x278>)
 8002098:	881a      	ldrh	r2, [r3, #0]
 800209a:	4b91      	ldr	r3, [pc, #580]	@ (80022e0 <moveDownOne+0x26c>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	3b18      	subs	r3, #24
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4619      	mov	r1, r3
 80020a4:	4610      	mov	r0, r2
 80020a6:	f7fe fde5 	bl	8000c74 <removeShapeO>
			drawShapeO(x_pos, y_pos, LCD_COLOR_BLUE);
 80020aa:	4b90      	ldr	r3, [pc, #576]	@ (80022ec <moveDownOne+0x278>)
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	4a8c      	ldr	r2, [pc, #560]	@ (80022e0 <moveDownOne+0x26c>)
 80020b0:	8811      	ldrh	r1, [r2, #0]
 80020b2:	221f      	movs	r2, #31
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fdab 	bl	8000c10 <drawShapeO>
			break;
 80020ba:	e1ed      	b.n	8002498 <moveDownOne+0x424>
		}
	}
	else if (shape_is == 2) {
 80020bc:	4b89      	ldr	r3, [pc, #548]	@ (80022e4 <moveDownOne+0x270>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d12c      	bne.n	800211e <moveDownOne+0xaa>
		switch(index_count)
 80020c4:	4b88      	ldr	r3, [pc, #544]	@ (80022e8 <moveDownOne+0x274>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d002      	beq.n	80020d2 <moveDownOne+0x5e>
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d013      	beq.n	80020f8 <moveDownOne+0x84>
			removeShapeT4(x_pos, y_pos - YSTEP);
			drawShapeT4(x_pos, y_pos, LCD_COLOR_BLUE);
			break;
		}
	}
}
 80020d0:	e1e2      	b.n	8002498 <moveDownOne+0x424>
			removeShapeI(x_pos, y_pos - YSTEP);
 80020d2:	4b86      	ldr	r3, [pc, #536]	@ (80022ec <moveDownOne+0x278>)
 80020d4:	881a      	ldrh	r2, [r3, #0]
 80020d6:	4b82      	ldr	r3, [pc, #520]	@ (80022e0 <moveDownOne+0x26c>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	3b18      	subs	r3, #24
 80020dc:	b29b      	uxth	r3, r3
 80020de:	4619      	mov	r1, r3
 80020e0:	4610      	mov	r0, r2
 80020e2:	f7fe fe23 	bl	8000d2c <removeShapeI>
			drawShapeI(x_pos, y_pos, LCD_COLOR_BLUE);
 80020e6:	4b81      	ldr	r3, [pc, #516]	@ (80022ec <moveDownOne+0x278>)
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	4a7d      	ldr	r2, [pc, #500]	@ (80022e0 <moveDownOne+0x26c>)
 80020ec:	8811      	ldrh	r1, [r2, #0]
 80020ee:	221f      	movs	r2, #31
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fdeb 	bl	8000ccc <drawShapeI>
			break;
 80020f6:	e1cf      	b.n	8002498 <moveDownOne+0x424>
			removeShapeI2(x_pos, y_pos - YSTEP);
 80020f8:	4b7c      	ldr	r3, [pc, #496]	@ (80022ec <moveDownOne+0x278>)
 80020fa:	881a      	ldrh	r2, [r3, #0]
 80020fc:	4b78      	ldr	r3, [pc, #480]	@ (80022e0 <moveDownOne+0x26c>)
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	3b18      	subs	r3, #24
 8002102:	b29b      	uxth	r3, r3
 8002104:	4619      	mov	r1, r3
 8002106:	4610      	mov	r0, r2
 8002108:	f7fe fe6a 	bl	8000de0 <removeShapeI2>
			drawShapeI2(x_pos, y_pos, LCD_COLOR_BLUE);
 800210c:	4b77      	ldr	r3, [pc, #476]	@ (80022ec <moveDownOne+0x278>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	4a73      	ldr	r2, [pc, #460]	@ (80022e0 <moveDownOne+0x26c>)
 8002112:	8811      	ldrh	r1, [r2, #0]
 8002114:	221f      	movs	r2, #31
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fe32 	bl	8000d80 <drawShapeI2>
			break;
 800211c:	e1bc      	b.n	8002498 <moveDownOne+0x424>
	else if (shape_is == 3){
 800211e:	4b71      	ldr	r3, [pc, #452]	@ (80022e4 <moveDownOne+0x270>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d144      	bne.n	80021b0 <moveDownOne+0x13c>
		switch(index_count)
 8002126:	4b70      	ldr	r3, [pc, #448]	@ (80022e8 <moveDownOne+0x274>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	2b06      	cmp	r3, #6
 800212c:	d02d      	beq.n	800218a <moveDownOne+0x116>
 800212e:	2b06      	cmp	r3, #6
 8002130:	f300 81b2 	bgt.w	8002498 <moveDownOne+0x424>
 8002134:	2b04      	cmp	r3, #4
 8002136:	d002      	beq.n	800213e <moveDownOne+0xca>
 8002138:	2b05      	cmp	r3, #5
 800213a:	d013      	beq.n	8002164 <moveDownOne+0xf0>
}
 800213c:	e1ac      	b.n	8002498 <moveDownOne+0x424>
			removeShapeS(x_pos, y_pos - YSTEP);
 800213e:	4b6b      	ldr	r3, [pc, #428]	@ (80022ec <moveDownOne+0x278>)
 8002140:	881a      	ldrh	r2, [r3, #0]
 8002142:	4b67      	ldr	r3, [pc, #412]	@ (80022e0 <moveDownOne+0x26c>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	3b18      	subs	r3, #24
 8002148:	b29b      	uxth	r3, r3
 800214a:	4619      	mov	r1, r3
 800214c:	4610      	mov	r0, r2
 800214e:	f7fe fea5 	bl	8000e9c <removeShapeS>
			drawShapeS(x_pos, y_pos, LCD_COLOR_BLUE);
 8002152:	4b66      	ldr	r3, [pc, #408]	@ (80022ec <moveDownOne+0x278>)
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	4a62      	ldr	r2, [pc, #392]	@ (80022e0 <moveDownOne+0x26c>)
 8002158:	8811      	ldrh	r1, [r2, #0]
 800215a:	221f      	movs	r2, #31
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe fe69 	bl	8000e34 <drawShapeS>
			break;
 8002162:	e199      	b.n	8002498 <moveDownOne+0x424>
			removeShapeS2(x_pos, y_pos - YSTEP);
 8002164:	4b61      	ldr	r3, [pc, #388]	@ (80022ec <moveDownOne+0x278>)
 8002166:	881a      	ldrh	r2, [r3, #0]
 8002168:	4b5d      	ldr	r3, [pc, #372]	@ (80022e0 <moveDownOne+0x26c>)
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	3b18      	subs	r3, #24
 800216e:	b29b      	uxth	r3, r3
 8002170:	4619      	mov	r1, r3
 8002172:	4610      	mov	r0, r2
 8002174:	f7fe fef4 	bl	8000f60 <removeShapeS2>
			drawShapeS2(x_pos, y_pos, LCD_COLOR_BLUE);
 8002178:	4b5c      	ldr	r3, [pc, #368]	@ (80022ec <moveDownOne+0x278>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	4a58      	ldr	r2, [pc, #352]	@ (80022e0 <moveDownOne+0x26c>)
 800217e:	8811      	ldrh	r1, [r2, #0]
 8002180:	221f      	movs	r2, #31
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe feb8 	bl	8000ef8 <drawShapeS2>
			break;
 8002188:	e186      	b.n	8002498 <moveDownOne+0x424>
			removeShapeS3(x_pos, y_pos - YSTEP);
 800218a:	4b58      	ldr	r3, [pc, #352]	@ (80022ec <moveDownOne+0x278>)
 800218c:	881a      	ldrh	r2, [r3, #0]
 800218e:	4b54      	ldr	r3, [pc, #336]	@ (80022e0 <moveDownOne+0x26c>)
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	3b18      	subs	r3, #24
 8002194:	b29b      	uxth	r3, r3
 8002196:	4619      	mov	r1, r3
 8002198:	4610      	mov	r0, r2
 800219a:	f7fe ff43 	bl	8001024 <removeShapeS3>
			drawShapeS3(x_pos, y_pos, LCD_COLOR_BLUE);
 800219e:	4b53      	ldr	r3, [pc, #332]	@ (80022ec <moveDownOne+0x278>)
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	4a4f      	ldr	r2, [pc, #316]	@ (80022e0 <moveDownOne+0x26c>)
 80021a4:	8811      	ldrh	r1, [r2, #0]
 80021a6:	221f      	movs	r2, #31
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe ff07 	bl	8000fbc <drawShapeS3>
			break;
 80021ae:	e173      	b.n	8002498 <moveDownOne+0x424>
	else if (shape_is == 4){
 80021b0:	4b4c      	ldr	r3, [pc, #304]	@ (80022e4 <moveDownOne+0x270>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d144      	bne.n	8002242 <moveDownOne+0x1ce>
		switch(index_count)
 80021b8:	4b4b      	ldr	r3, [pc, #300]	@ (80022e8 <moveDownOne+0x274>)
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	2b09      	cmp	r3, #9
 80021be:	d02d      	beq.n	800221c <moveDownOne+0x1a8>
 80021c0:	2b09      	cmp	r3, #9
 80021c2:	f300 8169 	bgt.w	8002498 <moveDownOne+0x424>
 80021c6:	2b07      	cmp	r3, #7
 80021c8:	d002      	beq.n	80021d0 <moveDownOne+0x15c>
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d013      	beq.n	80021f6 <moveDownOne+0x182>
}
 80021ce:	e163      	b.n	8002498 <moveDownOne+0x424>
			removeShapeZ(x_pos, y_pos - YSTEP);
 80021d0:	4b46      	ldr	r3, [pc, #280]	@ (80022ec <moveDownOne+0x278>)
 80021d2:	881a      	ldrh	r2, [r3, #0]
 80021d4:	4b42      	ldr	r3, [pc, #264]	@ (80022e0 <moveDownOne+0x26c>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	3b18      	subs	r3, #24
 80021da:	b29b      	uxth	r3, r3
 80021dc:	4619      	mov	r1, r3
 80021de:	4610      	mov	r0, r2
 80021e0:	f7fe ff82 	bl	80010e8 <removeShapeZ>
			drawShapeZ(x_pos, y_pos, LCD_COLOR_BLUE);
 80021e4:	4b41      	ldr	r3, [pc, #260]	@ (80022ec <moveDownOne+0x278>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	4a3d      	ldr	r2, [pc, #244]	@ (80022e0 <moveDownOne+0x26c>)
 80021ea:	8811      	ldrh	r1, [r2, #0]
 80021ec:	221f      	movs	r2, #31
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe ff46 	bl	8001080 <drawShapeZ>
			break;
 80021f4:	e150      	b.n	8002498 <moveDownOne+0x424>
			removeShapeZ2(x_pos, y_pos - YSTEP);
 80021f6:	4b3d      	ldr	r3, [pc, #244]	@ (80022ec <moveDownOne+0x278>)
 80021f8:	881a      	ldrh	r2, [r3, #0]
 80021fa:	4b39      	ldr	r3, [pc, #228]	@ (80022e0 <moveDownOne+0x26c>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	3b18      	subs	r3, #24
 8002200:	b29b      	uxth	r3, r3
 8002202:	4619      	mov	r1, r3
 8002204:	4610      	mov	r0, r2
 8002206:	f7fe ffd1 	bl	80011ac <removeShapeZ2>
			drawShapeZ2(x_pos, y_pos, LCD_COLOR_BLUE);
 800220a:	4b38      	ldr	r3, [pc, #224]	@ (80022ec <moveDownOne+0x278>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	4a34      	ldr	r2, [pc, #208]	@ (80022e0 <moveDownOne+0x26c>)
 8002210:	8811      	ldrh	r1, [r2, #0]
 8002212:	221f      	movs	r2, #31
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe ff95 	bl	8001144 <drawShapeZ2>
			break;
 800221a:	e13d      	b.n	8002498 <moveDownOne+0x424>
			removeShapeZ3(x_pos, y_pos - YSTEP);
 800221c:	4b33      	ldr	r3, [pc, #204]	@ (80022ec <moveDownOne+0x278>)
 800221e:	881a      	ldrh	r2, [r3, #0]
 8002220:	4b2f      	ldr	r3, [pc, #188]	@ (80022e0 <moveDownOne+0x26c>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	3b18      	subs	r3, #24
 8002226:	b29b      	uxth	r3, r3
 8002228:	4619      	mov	r1, r3
 800222a:	4610      	mov	r0, r2
 800222c:	f7ff f820 	bl	8001270 <removeShapeZ3>
			drawShapeZ3(x_pos, y_pos, LCD_COLOR_BLUE);
 8002230:	4b2e      	ldr	r3, [pc, #184]	@ (80022ec <moveDownOne+0x278>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	4a2a      	ldr	r2, [pc, #168]	@ (80022e0 <moveDownOne+0x26c>)
 8002236:	8811      	ldrh	r1, [r2, #0]
 8002238:	221f      	movs	r2, #31
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe ffe4 	bl	8001208 <drawShapeZ3>
			break;
 8002240:	e12a      	b.n	8002498 <moveDownOne+0x424>
	else if (shape_is == 5){
 8002242:	4b28      	ldr	r3, [pc, #160]	@ (80022e4 <moveDownOne+0x270>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b05      	cmp	r3, #5
 8002248:	d165      	bne.n	8002316 <moveDownOne+0x2a2>
		switch(index_count)
 800224a:	4b27      	ldr	r3, [pc, #156]	@ (80022e8 <moveDownOne+0x274>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	3b0a      	subs	r3, #10
 8002250:	2b03      	cmp	r3, #3
 8002252:	f200 8121 	bhi.w	8002498 <moveDownOne+0x424>
 8002256:	a201      	add	r2, pc, #4	@ (adr r2, 800225c <moveDownOne+0x1e8>)
 8002258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225c:	0800226d 	.word	0x0800226d
 8002260:	08002293 	.word	0x08002293
 8002264:	080022b9 	.word	0x080022b9
 8002268:	080022f1 	.word	0x080022f1
			removeShapeL(x_pos, y_pos - YSTEP);
 800226c:	4b1f      	ldr	r3, [pc, #124]	@ (80022ec <moveDownOne+0x278>)
 800226e:	881a      	ldrh	r2, [r3, #0]
 8002270:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <moveDownOne+0x26c>)
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	3b18      	subs	r3, #24
 8002276:	b29b      	uxth	r3, r3
 8002278:	4619      	mov	r1, r3
 800227a:	4610      	mov	r0, r2
 800227c:	f7ff f858 	bl	8001330 <removeShapeL>
			drawShapeL(x_pos, y_pos, LCD_COLOR_BLUE);
 8002280:	4b1a      	ldr	r3, [pc, #104]	@ (80022ec <moveDownOne+0x278>)
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	4a16      	ldr	r2, [pc, #88]	@ (80022e0 <moveDownOne+0x26c>)
 8002286:	8811      	ldrh	r1, [r2, #0]
 8002288:	221f      	movs	r2, #31
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f81e 	bl	80012cc <drawShapeL>
			break;
 8002290:	e102      	b.n	8002498 <moveDownOne+0x424>
			removeShapeL2(x_pos, y_pos - YSTEP);
 8002292:	4b16      	ldr	r3, [pc, #88]	@ (80022ec <moveDownOne+0x278>)
 8002294:	881a      	ldrh	r2, [r3, #0]
 8002296:	4b12      	ldr	r3, [pc, #72]	@ (80022e0 <moveDownOne+0x26c>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	3b18      	subs	r3, #24
 800229c:	b29b      	uxth	r3, r3
 800229e:	4619      	mov	r1, r3
 80022a0:	4610      	mov	r0, r2
 80022a2:	f7ff f8a7 	bl	80013f4 <removeShapeL2>
			drawShapeL2(x_pos, y_pos, LCD_COLOR_BLUE);
 80022a6:	4b11      	ldr	r3, [pc, #68]	@ (80022ec <moveDownOne+0x278>)
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	4a0d      	ldr	r2, [pc, #52]	@ (80022e0 <moveDownOne+0x26c>)
 80022ac:	8811      	ldrh	r1, [r2, #0]
 80022ae:	221f      	movs	r2, #31
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff f869 	bl	8001388 <drawShapeL2>
			break;
 80022b6:	e0ef      	b.n	8002498 <moveDownOne+0x424>
			removeShapeL3(x_pos, y_pos - YSTEP);
 80022b8:	4b0c      	ldr	r3, [pc, #48]	@ (80022ec <moveDownOne+0x278>)
 80022ba:	881a      	ldrh	r2, [r3, #0]
 80022bc:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <moveDownOne+0x26c>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	3b18      	subs	r3, #24
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4619      	mov	r1, r3
 80022c6:	4610      	mov	r0, r2
 80022c8:	f7ff f8f4 	bl	80014b4 <removeShapeL3>
			drawShapeL3(x_pos, y_pos, LCD_COLOR_BLUE);
 80022cc:	4b07      	ldr	r3, [pc, #28]	@ (80022ec <moveDownOne+0x278>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	4a03      	ldr	r2, [pc, #12]	@ (80022e0 <moveDownOne+0x26c>)
 80022d2:	8811      	ldrh	r1, [r2, #0]
 80022d4:	221f      	movs	r2, #31
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff f8bc 	bl	8001454 <drawShapeL3>
			break;
 80022dc:	e0dc      	b.n	8002498 <moveDownOne+0x424>
 80022de:	bf00      	nop
 80022e0:	200000b0 	.word	0x200000b0
 80022e4:	200000b4 	.word	0x200000b4
 80022e8:	200000bc 	.word	0x200000bc
 80022ec:	20000000 	.word	0x20000000
			removeShapeL4(x_pos, y_pos - YSTEP);
 80022f0:	4b6a      	ldr	r3, [pc, #424]	@ (800249c <moveDownOne+0x428>)
 80022f2:	881a      	ldrh	r2, [r3, #0]
 80022f4:	4b6a      	ldr	r3, [pc, #424]	@ (80024a0 <moveDownOne+0x42c>)
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	3b18      	subs	r3, #24
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	4619      	mov	r1, r3
 80022fe:	4610      	mov	r0, r2
 8002300:	f7ff f932 	bl	8001568 <removeShapeL4>
			drawShapeL4(x_pos, y_pos, LCD_COLOR_BLUE);
 8002304:	4b65      	ldr	r3, [pc, #404]	@ (800249c <moveDownOne+0x428>)
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	4a65      	ldr	r2, [pc, #404]	@ (80024a0 <moveDownOne+0x42c>)
 800230a:	8811      	ldrh	r1, [r2, #0]
 800230c:	221f      	movs	r2, #31
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff f8fa 	bl	8001508 <drawShapeL4>
			break;
 8002314:	e0c0      	b.n	8002498 <moveDownOne+0x424>
	else if (shape_is == 6){
 8002316:	4b63      	ldr	r3, [pc, #396]	@ (80024a4 <moveDownOne+0x430>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b06      	cmp	r3, #6
 800231c:	d15c      	bne.n	80023d8 <moveDownOne+0x364>
		switch(index_count)
 800231e:	4b62      	ldr	r3, [pc, #392]	@ (80024a8 <moveDownOne+0x434>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	3b0e      	subs	r3, #14
 8002324:	2b03      	cmp	r3, #3
 8002326:	f200 80b7 	bhi.w	8002498 <moveDownOne+0x424>
 800232a:	a201      	add	r2, pc, #4	@ (adr r2, 8002330 <moveDownOne+0x2bc>)
 800232c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002330:	08002341 	.word	0x08002341
 8002334:	08002367 	.word	0x08002367
 8002338:	0800238d 	.word	0x0800238d
 800233c:	080023b3 	.word	0x080023b3
			removeShapeJ(x_pos, y_pos - YSTEP);
 8002340:	4b56      	ldr	r3, [pc, #344]	@ (800249c <moveDownOne+0x428>)
 8002342:	881a      	ldrh	r2, [r3, #0]
 8002344:	4b56      	ldr	r3, [pc, #344]	@ (80024a0 <moveDownOne+0x42c>)
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	3b18      	subs	r3, #24
 800234a:	b29b      	uxth	r3, r3
 800234c:	4619      	mov	r1, r3
 800234e:	4610      	mov	r0, r2
 8002350:	f7ff f96a 	bl	8001628 <removeShapeJ>
			drawShapeJ(x_pos, y_pos, LCD_COLOR_BLUE);
 8002354:	4b51      	ldr	r3, [pc, #324]	@ (800249c <moveDownOne+0x428>)
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	4a51      	ldr	r2, [pc, #324]	@ (80024a0 <moveDownOne+0x42c>)
 800235a:	8811      	ldrh	r1, [r2, #0]
 800235c:	221f      	movs	r2, #31
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff f92c 	bl	80015bc <drawShapeJ>
			break;
 8002364:	e098      	b.n	8002498 <moveDownOne+0x424>
			removeShapeJ2(x_pos, y_pos - YSTEP);
 8002366:	4b4d      	ldr	r3, [pc, #308]	@ (800249c <moveDownOne+0x428>)
 8002368:	881a      	ldrh	r2, [r3, #0]
 800236a:	4b4d      	ldr	r3, [pc, #308]	@ (80024a0 <moveDownOne+0x42c>)
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	3b18      	subs	r3, #24
 8002370:	b29b      	uxth	r3, r3
 8002372:	4619      	mov	r1, r3
 8002374:	4610      	mov	r0, r2
 8002376:	f7ff f9bb 	bl	80016f0 <removeShapeJ2>
			drawShapeJ2(x_pos, y_pos, LCD_COLOR_BLUE);
 800237a:	4b48      	ldr	r3, [pc, #288]	@ (800249c <moveDownOne+0x428>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	4a48      	ldr	r2, [pc, #288]	@ (80024a0 <moveDownOne+0x42c>)
 8002380:	8811      	ldrh	r1, [r2, #0]
 8002382:	221f      	movs	r2, #31
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff f97f 	bl	8001688 <drawShapeJ2>
			break;
 800238a:	e085      	b.n	8002498 <moveDownOne+0x424>
			removeShapeJ3(x_pos, y_pos - YSTEP);
 800238c:	4b43      	ldr	r3, [pc, #268]	@ (800249c <moveDownOne+0x428>)
 800238e:	881a      	ldrh	r2, [r3, #0]
 8002390:	4b43      	ldr	r3, [pc, #268]	@ (80024a0 <moveDownOne+0x42c>)
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	3b18      	subs	r3, #24
 8002396:	b29b      	uxth	r3, r3
 8002398:	4619      	mov	r1, r3
 800239a:	4610      	mov	r0, r2
 800239c:	f7ff fa06 	bl	80017ac <removeShapeJ3>
			drawShapeJ3(x_pos, y_pos, LCD_COLOR_BLUE);
 80023a0:	4b3e      	ldr	r3, [pc, #248]	@ (800249c <moveDownOne+0x428>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	4a3e      	ldr	r2, [pc, #248]	@ (80024a0 <moveDownOne+0x42c>)
 80023a6:	8811      	ldrh	r1, [r2, #0]
 80023a8:	221f      	movs	r2, #31
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff f9ce 	bl	800174c <drawShapeJ3>
			break;
 80023b0:	e072      	b.n	8002498 <moveDownOne+0x424>
			removeShapeJ4(x_pos, y_pos - YSTEP);
 80023b2:	4b3a      	ldr	r3, [pc, #232]	@ (800249c <moveDownOne+0x428>)
 80023b4:	881a      	ldrh	r2, [r3, #0]
 80023b6:	4b3a      	ldr	r3, [pc, #232]	@ (80024a0 <moveDownOne+0x42c>)
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	3b18      	subs	r3, #24
 80023bc:	b29b      	uxth	r3, r3
 80023be:	4619      	mov	r1, r3
 80023c0:	4610      	mov	r0, r2
 80023c2:	f7ff fa4f 	bl	8001864 <removeShapeJ4>
			drawShapeJ4(x_pos, y_pos, LCD_COLOR_BLUE);
 80023c6:	4b35      	ldr	r3, [pc, #212]	@ (800249c <moveDownOne+0x428>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	4a35      	ldr	r2, [pc, #212]	@ (80024a0 <moveDownOne+0x42c>)
 80023cc:	8811      	ldrh	r1, [r2, #0]
 80023ce:	221f      	movs	r2, #31
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fa15 	bl	8001800 <drawShapeJ4>
			break;
 80023d6:	e05f      	b.n	8002498 <moveDownOne+0x424>
	else if (shape_is == 7){
 80023d8:	4b32      	ldr	r3, [pc, #200]	@ (80024a4 <moveDownOne+0x430>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b07      	cmp	r3, #7
 80023de:	d15b      	bne.n	8002498 <moveDownOne+0x424>
		switch(index_count)
 80023e0:	4b31      	ldr	r3, [pc, #196]	@ (80024a8 <moveDownOne+0x434>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	3b12      	subs	r3, #18
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d856      	bhi.n	8002498 <moveDownOne+0x424>
 80023ea:	a201      	add	r2, pc, #4	@ (adr r2, 80023f0 <moveDownOne+0x37c>)
 80023ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f0:	08002401 	.word	0x08002401
 80023f4:	08002427 	.word	0x08002427
 80023f8:	0800244d 	.word	0x0800244d
 80023fc:	08002473 	.word	0x08002473
			removeShapeT(x_pos, y_pos - YSTEP);
 8002400:	4b26      	ldr	r3, [pc, #152]	@ (800249c <moveDownOne+0x428>)
 8002402:	881a      	ldrh	r2, [r3, #0]
 8002404:	4b26      	ldr	r3, [pc, #152]	@ (80024a0 <moveDownOne+0x42c>)
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	3b18      	subs	r3, #24
 800240a:	b29b      	uxth	r3, r3
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f7ff fa8a 	bl	8001928 <removeShapeT>
			drawShapeT(x_pos, y_pos, LCD_COLOR_BLUE);
 8002414:	4b21      	ldr	r3, [pc, #132]	@ (800249c <moveDownOne+0x428>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	4a21      	ldr	r2, [pc, #132]	@ (80024a0 <moveDownOne+0x42c>)
 800241a:	8811      	ldrh	r1, [r2, #0]
 800241c:	221f      	movs	r2, #31
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fa4c 	bl	80018bc <drawShapeT>
			break;
 8002424:	e038      	b.n	8002498 <moveDownOne+0x424>
			removeShapeT2(x_pos, y_pos - YSTEP);
 8002426:	4b1d      	ldr	r3, [pc, #116]	@ (800249c <moveDownOne+0x428>)
 8002428:	881a      	ldrh	r2, [r3, #0]
 800242a:	4b1d      	ldr	r3, [pc, #116]	@ (80024a0 <moveDownOne+0x42c>)
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	3b18      	subs	r3, #24
 8002430:	b29b      	uxth	r3, r3
 8002432:	4619      	mov	r1, r3
 8002434:	4610      	mov	r0, r2
 8002436:	f7ff fad9 	bl	80019ec <removeShapeT2>
			drawShapeT2(x_pos, y_pos, LCD_COLOR_BLUE);
 800243a:	4b18      	ldr	r3, [pc, #96]	@ (800249c <moveDownOne+0x428>)
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	4a18      	ldr	r2, [pc, #96]	@ (80024a0 <moveDownOne+0x42c>)
 8002440:	8811      	ldrh	r1, [r2, #0]
 8002442:	221f      	movs	r2, #31
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fa9f 	bl	8001988 <drawShapeT2>
			break;
 800244a:	e025      	b.n	8002498 <moveDownOne+0x424>
			removeShapeT3(x_pos, y_pos - YSTEP);
 800244c:	4b13      	ldr	r3, [pc, #76]	@ (800249c <moveDownOne+0x428>)
 800244e:	881a      	ldrh	r2, [r3, #0]
 8002450:	4b13      	ldr	r3, [pc, #76]	@ (80024a0 <moveDownOne+0x42c>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	3b18      	subs	r3, #24
 8002456:	b29b      	uxth	r3, r3
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f7ff fb24 	bl	8001aa8 <removeShapeT3>
			drawShapeT3(x_pos, y_pos, LCD_COLOR_BLUE);
 8002460:	4b0e      	ldr	r3, [pc, #56]	@ (800249c <moveDownOne+0x428>)
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	4a0e      	ldr	r2, [pc, #56]	@ (80024a0 <moveDownOne+0x42c>)
 8002466:	8811      	ldrh	r1, [r2, #0]
 8002468:	221f      	movs	r2, #31
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff faea 	bl	8001a44 <drawShapeT3>
			break;
 8002470:	e012      	b.n	8002498 <moveDownOne+0x424>
			removeShapeT4(x_pos, y_pos - YSTEP);
 8002472:	4b0a      	ldr	r3, [pc, #40]	@ (800249c <moveDownOne+0x428>)
 8002474:	881a      	ldrh	r2, [r3, #0]
 8002476:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <moveDownOne+0x42c>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	3b18      	subs	r3, #24
 800247c:	b29b      	uxth	r3, r3
 800247e:	4619      	mov	r1, r3
 8002480:	4610      	mov	r0, r2
 8002482:	f7ff fb73 	bl	8001b6c <removeShapeT4>
			drawShapeT4(x_pos, y_pos, LCD_COLOR_BLUE);
 8002486:	4b05      	ldr	r3, [pc, #20]	@ (800249c <moveDownOne+0x428>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	4a05      	ldr	r2, [pc, #20]	@ (80024a0 <moveDownOne+0x42c>)
 800248c:	8811      	ldrh	r1, [r2, #0]
 800248e:	221f      	movs	r2, #31
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fb35 	bl	8001b00 <drawShapeT4>
			break;
 8002496:	bf00      	nop
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000000 	.word	0x20000000
 80024a0:	200000b0 	.word	0x200000b0
 80024a4:	200000b4 	.word	0x200000b4
 80024a8:	200000bc 	.word	0x200000bc

080024ac <moveOneLeft>:

void moveOneLeft()
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
	x_pos -= 24;
 80024b0:	4b99      	ldr	r3, [pc, #612]	@ (8002718 <moveOneLeft+0x26c>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	3b18      	subs	r3, #24
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	4b97      	ldr	r3, [pc, #604]	@ (8002718 <moveOneLeft+0x26c>)
 80024ba:	801a      	strh	r2, [r3, #0]
	if (shape_is == 1){
 80024bc:	4b97      	ldr	r3, [pc, #604]	@ (800271c <moveOneLeft+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d117      	bne.n	80024f4 <moveOneLeft+0x48>
		switch(index_count)
 80024c4:	4b96      	ldr	r3, [pc, #600]	@ (8002720 <moveOneLeft+0x274>)
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	f040 8201 	bne.w	80028d0 <moveOneLeft+0x424>
		{
		case 1:
			removeShapeO(x_pos + 24, y_pos);
 80024ce:	4b92      	ldr	r3, [pc, #584]	@ (8002718 <moveOneLeft+0x26c>)
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	3318      	adds	r3, #24
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	4a93      	ldr	r2, [pc, #588]	@ (8002724 <moveOneLeft+0x278>)
 80024d8:	8812      	ldrh	r2, [r2, #0]
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe fbc9 	bl	8000c74 <removeShapeO>
			drawShapeO(x_pos, y_pos, LCD_COLOR_BLUE);
 80024e2:	4b8d      	ldr	r3, [pc, #564]	@ (8002718 <moveOneLeft+0x26c>)
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	4a8f      	ldr	r2, [pc, #572]	@ (8002724 <moveOneLeft+0x278>)
 80024e8:	8811      	ldrh	r1, [r2, #0]
 80024ea:	221f      	movs	r2, #31
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fb8f 	bl	8000c10 <drawShapeO>
			break;
 80024f2:	e1ed      	b.n	80028d0 <moveOneLeft+0x424>
		}
	}
	else if (shape_is == 2){
 80024f4:	4b89      	ldr	r3, [pc, #548]	@ (800271c <moveOneLeft+0x270>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d12c      	bne.n	8002556 <moveOneLeft+0xaa>
		switch(index_count)
 80024fc:	4b88      	ldr	r3, [pc, #544]	@ (8002720 <moveOneLeft+0x274>)
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d002      	beq.n	800250a <moveOneLeft+0x5e>
 8002504:	2b03      	cmp	r3, #3
 8002506:	d013      	beq.n	8002530 <moveOneLeft+0x84>
			removeShapeT4(x_pos+24, y_pos);
			drawShapeT4(x_pos, y_pos, LCD_COLOR_BLUE);
			break;
		}
	}
}
 8002508:	e1e2      	b.n	80028d0 <moveOneLeft+0x424>
			removeShapeI(x_pos +24, y_pos);
 800250a:	4b83      	ldr	r3, [pc, #524]	@ (8002718 <moveOneLeft+0x26c>)
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	3318      	adds	r3, #24
 8002510:	b29b      	uxth	r3, r3
 8002512:	4a84      	ldr	r2, [pc, #528]	@ (8002724 <moveOneLeft+0x278>)
 8002514:	8812      	ldrh	r2, [r2, #0]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe fc07 	bl	8000d2c <removeShapeI>
			drawShapeI(x_pos, y_pos, LCD_COLOR_BLUE);
 800251e:	4b7e      	ldr	r3, [pc, #504]	@ (8002718 <moveOneLeft+0x26c>)
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	4a80      	ldr	r2, [pc, #512]	@ (8002724 <moveOneLeft+0x278>)
 8002524:	8811      	ldrh	r1, [r2, #0]
 8002526:	221f      	movs	r2, #31
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe fbcf 	bl	8000ccc <drawShapeI>
			break;
 800252e:	e1cf      	b.n	80028d0 <moveOneLeft+0x424>
			removeShapeI2(x_pos+24, y_pos);
 8002530:	4b79      	ldr	r3, [pc, #484]	@ (8002718 <moveOneLeft+0x26c>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	3318      	adds	r3, #24
 8002536:	b29b      	uxth	r3, r3
 8002538:	4a7a      	ldr	r2, [pc, #488]	@ (8002724 <moveOneLeft+0x278>)
 800253a:	8812      	ldrh	r2, [r2, #0]
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe fc4e 	bl	8000de0 <removeShapeI2>
			drawShapeI2(x_pos, y_pos, LCD_COLOR_BLUE);
 8002544:	4b74      	ldr	r3, [pc, #464]	@ (8002718 <moveOneLeft+0x26c>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	4a76      	ldr	r2, [pc, #472]	@ (8002724 <moveOneLeft+0x278>)
 800254a:	8811      	ldrh	r1, [r2, #0]
 800254c:	221f      	movs	r2, #31
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fc16 	bl	8000d80 <drawShapeI2>
			break;
 8002554:	e1bc      	b.n	80028d0 <moveOneLeft+0x424>
	else if (shape_is == 3){
 8002556:	4b71      	ldr	r3, [pc, #452]	@ (800271c <moveOneLeft+0x270>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d144      	bne.n	80025e8 <moveOneLeft+0x13c>
		switch(index_count)
 800255e:	4b70      	ldr	r3, [pc, #448]	@ (8002720 <moveOneLeft+0x274>)
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	2b06      	cmp	r3, #6
 8002564:	d02d      	beq.n	80025c2 <moveOneLeft+0x116>
 8002566:	2b06      	cmp	r3, #6
 8002568:	f300 81b2 	bgt.w	80028d0 <moveOneLeft+0x424>
 800256c:	2b04      	cmp	r3, #4
 800256e:	d002      	beq.n	8002576 <moveOneLeft+0xca>
 8002570:	2b05      	cmp	r3, #5
 8002572:	d013      	beq.n	800259c <moveOneLeft+0xf0>
}
 8002574:	e1ac      	b.n	80028d0 <moveOneLeft+0x424>
			removeShapeS(x_pos+24, y_pos );
 8002576:	4b68      	ldr	r3, [pc, #416]	@ (8002718 <moveOneLeft+0x26c>)
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	3318      	adds	r3, #24
 800257c:	b29b      	uxth	r3, r3
 800257e:	4a69      	ldr	r2, [pc, #420]	@ (8002724 <moveOneLeft+0x278>)
 8002580:	8812      	ldrh	r2, [r2, #0]
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe fc89 	bl	8000e9c <removeShapeS>
			drawShapeS(x_pos, y_pos, LCD_COLOR_BLUE);
 800258a:	4b63      	ldr	r3, [pc, #396]	@ (8002718 <moveOneLeft+0x26c>)
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	4a65      	ldr	r2, [pc, #404]	@ (8002724 <moveOneLeft+0x278>)
 8002590:	8811      	ldrh	r1, [r2, #0]
 8002592:	221f      	movs	r2, #31
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fc4d 	bl	8000e34 <drawShapeS>
			break;
 800259a:	e199      	b.n	80028d0 <moveOneLeft+0x424>
			removeShapeS2(x_pos+24, y_pos);
 800259c:	4b5e      	ldr	r3, [pc, #376]	@ (8002718 <moveOneLeft+0x26c>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	3318      	adds	r3, #24
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002724 <moveOneLeft+0x278>)
 80025a6:	8812      	ldrh	r2, [r2, #0]
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fcd8 	bl	8000f60 <removeShapeS2>
			drawShapeS2(x_pos, y_pos, LCD_COLOR_BLUE);
 80025b0:	4b59      	ldr	r3, [pc, #356]	@ (8002718 <moveOneLeft+0x26c>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	4a5b      	ldr	r2, [pc, #364]	@ (8002724 <moveOneLeft+0x278>)
 80025b6:	8811      	ldrh	r1, [r2, #0]
 80025b8:	221f      	movs	r2, #31
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fc9c 	bl	8000ef8 <drawShapeS2>
			break;
 80025c0:	e186      	b.n	80028d0 <moveOneLeft+0x424>
			removeShapeS3(x_pos+24, y_pos );
 80025c2:	4b55      	ldr	r3, [pc, #340]	@ (8002718 <moveOneLeft+0x26c>)
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	3318      	adds	r3, #24
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	4a56      	ldr	r2, [pc, #344]	@ (8002724 <moveOneLeft+0x278>)
 80025cc:	8812      	ldrh	r2, [r2, #0]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe fd27 	bl	8001024 <removeShapeS3>
			drawShapeS3(x_pos, y_pos, LCD_COLOR_BLUE);
 80025d6:	4b50      	ldr	r3, [pc, #320]	@ (8002718 <moveOneLeft+0x26c>)
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	4a52      	ldr	r2, [pc, #328]	@ (8002724 <moveOneLeft+0x278>)
 80025dc:	8811      	ldrh	r1, [r2, #0]
 80025de:	221f      	movs	r2, #31
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fceb 	bl	8000fbc <drawShapeS3>
			break;
 80025e6:	e173      	b.n	80028d0 <moveOneLeft+0x424>
	else if (shape_is == 4){
 80025e8:	4b4c      	ldr	r3, [pc, #304]	@ (800271c <moveOneLeft+0x270>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d144      	bne.n	800267a <moveOneLeft+0x1ce>
		switch(index_count)
 80025f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002720 <moveOneLeft+0x274>)
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	2b09      	cmp	r3, #9
 80025f6:	d02d      	beq.n	8002654 <moveOneLeft+0x1a8>
 80025f8:	2b09      	cmp	r3, #9
 80025fa:	f300 8169 	bgt.w	80028d0 <moveOneLeft+0x424>
 80025fe:	2b07      	cmp	r3, #7
 8002600:	d002      	beq.n	8002608 <moveOneLeft+0x15c>
 8002602:	2b08      	cmp	r3, #8
 8002604:	d013      	beq.n	800262e <moveOneLeft+0x182>
}
 8002606:	e163      	b.n	80028d0 <moveOneLeft+0x424>
			removeShapeZ(x_pos+24, y_pos);
 8002608:	4b43      	ldr	r3, [pc, #268]	@ (8002718 <moveOneLeft+0x26c>)
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	3318      	adds	r3, #24
 800260e:	b29b      	uxth	r3, r3
 8002610:	4a44      	ldr	r2, [pc, #272]	@ (8002724 <moveOneLeft+0x278>)
 8002612:	8812      	ldrh	r2, [r2, #0]
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fd66 	bl	80010e8 <removeShapeZ>
			drawShapeZ(x_pos, y_pos, LCD_COLOR_BLUE);
 800261c:	4b3e      	ldr	r3, [pc, #248]	@ (8002718 <moveOneLeft+0x26c>)
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	4a40      	ldr	r2, [pc, #256]	@ (8002724 <moveOneLeft+0x278>)
 8002622:	8811      	ldrh	r1, [r2, #0]
 8002624:	221f      	movs	r2, #31
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fd2a 	bl	8001080 <drawShapeZ>
			break;
 800262c:	e150      	b.n	80028d0 <moveOneLeft+0x424>
			removeShapeZ2(x_pos+24, y_pos);
 800262e:	4b3a      	ldr	r3, [pc, #232]	@ (8002718 <moveOneLeft+0x26c>)
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	3318      	adds	r3, #24
 8002634:	b29b      	uxth	r3, r3
 8002636:	4a3b      	ldr	r2, [pc, #236]	@ (8002724 <moveOneLeft+0x278>)
 8002638:	8812      	ldrh	r2, [r2, #0]
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fdb5 	bl	80011ac <removeShapeZ2>
			drawShapeZ2(x_pos, y_pos, LCD_COLOR_BLUE);
 8002642:	4b35      	ldr	r3, [pc, #212]	@ (8002718 <moveOneLeft+0x26c>)
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	4a37      	ldr	r2, [pc, #220]	@ (8002724 <moveOneLeft+0x278>)
 8002648:	8811      	ldrh	r1, [r2, #0]
 800264a:	221f      	movs	r2, #31
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fd79 	bl	8001144 <drawShapeZ2>
			break;
 8002652:	e13d      	b.n	80028d0 <moveOneLeft+0x424>
			removeShapeZ3(x_pos+24, y_pos);
 8002654:	4b30      	ldr	r3, [pc, #192]	@ (8002718 <moveOneLeft+0x26c>)
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	3318      	adds	r3, #24
 800265a:	b29b      	uxth	r3, r3
 800265c:	4a31      	ldr	r2, [pc, #196]	@ (8002724 <moveOneLeft+0x278>)
 800265e:	8812      	ldrh	r2, [r2, #0]
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fe04 	bl	8001270 <removeShapeZ3>
			drawShapeZ3(x_pos, y_pos, LCD_COLOR_BLUE);
 8002668:	4b2b      	ldr	r3, [pc, #172]	@ (8002718 <moveOneLeft+0x26c>)
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	4a2d      	ldr	r2, [pc, #180]	@ (8002724 <moveOneLeft+0x278>)
 800266e:	8811      	ldrh	r1, [r2, #0]
 8002670:	221f      	movs	r2, #31
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fdc8 	bl	8001208 <drawShapeZ3>
			break;
 8002678:	e12a      	b.n	80028d0 <moveOneLeft+0x424>
	else if (shape_is == 5){
 800267a:	4b28      	ldr	r3, [pc, #160]	@ (800271c <moveOneLeft+0x270>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b05      	cmp	r3, #5
 8002680:	d165      	bne.n	800274e <moveOneLeft+0x2a2>
		switch(index_count)
 8002682:	4b27      	ldr	r3, [pc, #156]	@ (8002720 <moveOneLeft+0x274>)
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	3b0a      	subs	r3, #10
 8002688:	2b03      	cmp	r3, #3
 800268a:	f200 8121 	bhi.w	80028d0 <moveOneLeft+0x424>
 800268e:	a201      	add	r2, pc, #4	@ (adr r2, 8002694 <moveOneLeft+0x1e8>)
 8002690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002694:	080026a5 	.word	0x080026a5
 8002698:	080026cb 	.word	0x080026cb
 800269c:	080026f1 	.word	0x080026f1
 80026a0:	08002729 	.word	0x08002729
			removeShapeL(x_pos+24, y_pos);
 80026a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002718 <moveOneLeft+0x26c>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	3318      	adds	r3, #24
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002724 <moveOneLeft+0x278>)
 80026ae:	8812      	ldrh	r2, [r2, #0]
 80026b0:	4611      	mov	r1, r2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe fe3c 	bl	8001330 <removeShapeL>
			drawShapeL(x_pos, y_pos, LCD_COLOR_BLUE);
 80026b8:	4b17      	ldr	r3, [pc, #92]	@ (8002718 <moveOneLeft+0x26c>)
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	4a19      	ldr	r2, [pc, #100]	@ (8002724 <moveOneLeft+0x278>)
 80026be:	8811      	ldrh	r1, [r2, #0]
 80026c0:	221f      	movs	r2, #31
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fe02 	bl	80012cc <drawShapeL>
			break;
 80026c8:	e102      	b.n	80028d0 <moveOneLeft+0x424>
			removeShapeL2(x_pos+24, y_pos);
 80026ca:	4b13      	ldr	r3, [pc, #76]	@ (8002718 <moveOneLeft+0x26c>)
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	3318      	adds	r3, #24
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	4a14      	ldr	r2, [pc, #80]	@ (8002724 <moveOneLeft+0x278>)
 80026d4:	8812      	ldrh	r2, [r2, #0]
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe fe8b 	bl	80013f4 <removeShapeL2>
			drawShapeL2(x_pos, y_pos, LCD_COLOR_BLUE);
 80026de:	4b0e      	ldr	r3, [pc, #56]	@ (8002718 <moveOneLeft+0x26c>)
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	4a10      	ldr	r2, [pc, #64]	@ (8002724 <moveOneLeft+0x278>)
 80026e4:	8811      	ldrh	r1, [r2, #0]
 80026e6:	221f      	movs	r2, #31
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fe4d 	bl	8001388 <drawShapeL2>
			break;
 80026ee:	e0ef      	b.n	80028d0 <moveOneLeft+0x424>
			removeShapeL3(x_pos+24, y_pos);
 80026f0:	4b09      	ldr	r3, [pc, #36]	@ (8002718 <moveOneLeft+0x26c>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	3318      	adds	r3, #24
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002724 <moveOneLeft+0x278>)
 80026fa:	8812      	ldrh	r2, [r2, #0]
 80026fc:	4611      	mov	r1, r2
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fed8 	bl	80014b4 <removeShapeL3>
			drawShapeL3(x_pos, y_pos, LCD_COLOR_BLUE);
 8002704:	4b04      	ldr	r3, [pc, #16]	@ (8002718 <moveOneLeft+0x26c>)
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	4a06      	ldr	r2, [pc, #24]	@ (8002724 <moveOneLeft+0x278>)
 800270a:	8811      	ldrh	r1, [r2, #0]
 800270c:	221f      	movs	r2, #31
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe fea0 	bl	8001454 <drawShapeL3>
			break;
 8002714:	e0dc      	b.n	80028d0 <moveOneLeft+0x424>
 8002716:	bf00      	nop
 8002718:	20000000 	.word	0x20000000
 800271c:	200000b4 	.word	0x200000b4
 8002720:	200000bc 	.word	0x200000bc
 8002724:	200000b0 	.word	0x200000b0
			removeShapeL4(x_pos+24, y_pos);
 8002728:	4b6a      	ldr	r3, [pc, #424]	@ (80028d4 <moveOneLeft+0x428>)
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	3318      	adds	r3, #24
 800272e:	b29b      	uxth	r3, r3
 8002730:	4a69      	ldr	r2, [pc, #420]	@ (80028d8 <moveOneLeft+0x42c>)
 8002732:	8812      	ldrh	r2, [r2, #0]
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe ff16 	bl	8001568 <removeShapeL4>
			drawShapeL4(x_pos, y_pos, LCD_COLOR_BLUE);
 800273c:	4b65      	ldr	r3, [pc, #404]	@ (80028d4 <moveOneLeft+0x428>)
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	4a65      	ldr	r2, [pc, #404]	@ (80028d8 <moveOneLeft+0x42c>)
 8002742:	8811      	ldrh	r1, [r2, #0]
 8002744:	221f      	movs	r2, #31
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fede 	bl	8001508 <drawShapeL4>
			break;
 800274c:	e0c0      	b.n	80028d0 <moveOneLeft+0x424>
	else if (shape_is == 6){
 800274e:	4b63      	ldr	r3, [pc, #396]	@ (80028dc <moveOneLeft+0x430>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b06      	cmp	r3, #6
 8002754:	d15c      	bne.n	8002810 <moveOneLeft+0x364>
		switch(index_count)
 8002756:	4b62      	ldr	r3, [pc, #392]	@ (80028e0 <moveOneLeft+0x434>)
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	3b0e      	subs	r3, #14
 800275c:	2b03      	cmp	r3, #3
 800275e:	f200 80b7 	bhi.w	80028d0 <moveOneLeft+0x424>
 8002762:	a201      	add	r2, pc, #4	@ (adr r2, 8002768 <moveOneLeft+0x2bc>)
 8002764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002768:	08002779 	.word	0x08002779
 800276c:	0800279f 	.word	0x0800279f
 8002770:	080027c5 	.word	0x080027c5
 8002774:	080027eb 	.word	0x080027eb
			removeShapeJ(x_pos+24, y_pos);
 8002778:	4b56      	ldr	r3, [pc, #344]	@ (80028d4 <moveOneLeft+0x428>)
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	3318      	adds	r3, #24
 800277e:	b29b      	uxth	r3, r3
 8002780:	4a55      	ldr	r2, [pc, #340]	@ (80028d8 <moveOneLeft+0x42c>)
 8002782:	8812      	ldrh	r2, [r2, #0]
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe ff4e 	bl	8001628 <removeShapeJ>
			drawShapeJ(x_pos, y_pos, LCD_COLOR_BLUE);
 800278c:	4b51      	ldr	r3, [pc, #324]	@ (80028d4 <moveOneLeft+0x428>)
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	4a51      	ldr	r2, [pc, #324]	@ (80028d8 <moveOneLeft+0x42c>)
 8002792:	8811      	ldrh	r1, [r2, #0]
 8002794:	221f      	movs	r2, #31
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe ff10 	bl	80015bc <drawShapeJ>
			break;
 800279c:	e098      	b.n	80028d0 <moveOneLeft+0x424>
			removeShapeJ2(x_pos+24, y_pos);
 800279e:	4b4d      	ldr	r3, [pc, #308]	@ (80028d4 <moveOneLeft+0x428>)
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	3318      	adds	r3, #24
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	4a4c      	ldr	r2, [pc, #304]	@ (80028d8 <moveOneLeft+0x42c>)
 80027a8:	8812      	ldrh	r2, [r2, #0]
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fe ff9f 	bl	80016f0 <removeShapeJ2>
			drawShapeJ2(x_pos, y_pos, LCD_COLOR_BLUE);
 80027b2:	4b48      	ldr	r3, [pc, #288]	@ (80028d4 <moveOneLeft+0x428>)
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	4a48      	ldr	r2, [pc, #288]	@ (80028d8 <moveOneLeft+0x42c>)
 80027b8:	8811      	ldrh	r1, [r2, #0]
 80027ba:	221f      	movs	r2, #31
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe ff63 	bl	8001688 <drawShapeJ2>
			break;
 80027c2:	e085      	b.n	80028d0 <moveOneLeft+0x424>
			removeShapeJ3(x_pos+24, y_pos);
 80027c4:	4b43      	ldr	r3, [pc, #268]	@ (80028d4 <moveOneLeft+0x428>)
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	3318      	adds	r3, #24
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	4a42      	ldr	r2, [pc, #264]	@ (80028d8 <moveOneLeft+0x42c>)
 80027ce:	8812      	ldrh	r2, [r2, #0]
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe ffea 	bl	80017ac <removeShapeJ3>
			drawShapeJ3(x_pos, y_pos, LCD_COLOR_BLUE);
 80027d8:	4b3e      	ldr	r3, [pc, #248]	@ (80028d4 <moveOneLeft+0x428>)
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	4a3e      	ldr	r2, [pc, #248]	@ (80028d8 <moveOneLeft+0x42c>)
 80027de:	8811      	ldrh	r1, [r2, #0]
 80027e0:	221f      	movs	r2, #31
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe ffb2 	bl	800174c <drawShapeJ3>
			break;
 80027e8:	e072      	b.n	80028d0 <moveOneLeft+0x424>
			removeShapeJ4(x_pos+24, y_pos);
 80027ea:	4b3a      	ldr	r3, [pc, #232]	@ (80028d4 <moveOneLeft+0x428>)
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	3318      	adds	r3, #24
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	4a39      	ldr	r2, [pc, #228]	@ (80028d8 <moveOneLeft+0x42c>)
 80027f4:	8812      	ldrh	r2, [r2, #0]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff f833 	bl	8001864 <removeShapeJ4>
			drawShapeJ4(x_pos, y_pos, LCD_COLOR_BLUE);
 80027fe:	4b35      	ldr	r3, [pc, #212]	@ (80028d4 <moveOneLeft+0x428>)
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	4a35      	ldr	r2, [pc, #212]	@ (80028d8 <moveOneLeft+0x42c>)
 8002804:	8811      	ldrh	r1, [r2, #0]
 8002806:	221f      	movs	r2, #31
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fff9 	bl	8001800 <drawShapeJ4>
			break;
 800280e:	e05f      	b.n	80028d0 <moveOneLeft+0x424>
	else if (shape_is == 7){
 8002810:	4b32      	ldr	r3, [pc, #200]	@ (80028dc <moveOneLeft+0x430>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b07      	cmp	r3, #7
 8002816:	d15b      	bne.n	80028d0 <moveOneLeft+0x424>
		switch(index_count)
 8002818:	4b31      	ldr	r3, [pc, #196]	@ (80028e0 <moveOneLeft+0x434>)
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	3b12      	subs	r3, #18
 800281e:	2b03      	cmp	r3, #3
 8002820:	d856      	bhi.n	80028d0 <moveOneLeft+0x424>
 8002822:	a201      	add	r2, pc, #4	@ (adr r2, 8002828 <moveOneLeft+0x37c>)
 8002824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002828:	08002839 	.word	0x08002839
 800282c:	0800285f 	.word	0x0800285f
 8002830:	08002885 	.word	0x08002885
 8002834:	080028ab 	.word	0x080028ab
			removeShapeT(x_pos+24, y_pos);
 8002838:	4b26      	ldr	r3, [pc, #152]	@ (80028d4 <moveOneLeft+0x428>)
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	3318      	adds	r3, #24
 800283e:	b29b      	uxth	r3, r3
 8002840:	4a25      	ldr	r2, [pc, #148]	@ (80028d8 <moveOneLeft+0x42c>)
 8002842:	8812      	ldrh	r2, [r2, #0]
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff f86e 	bl	8001928 <removeShapeT>
			drawShapeT(x_pos, y_pos, LCD_COLOR_BLUE);
 800284c:	4b21      	ldr	r3, [pc, #132]	@ (80028d4 <moveOneLeft+0x428>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	4a21      	ldr	r2, [pc, #132]	@ (80028d8 <moveOneLeft+0x42c>)
 8002852:	8811      	ldrh	r1, [r2, #0]
 8002854:	221f      	movs	r2, #31
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f830 	bl	80018bc <drawShapeT>
			break;
 800285c:	e038      	b.n	80028d0 <moveOneLeft+0x424>
			removeShapeT2(x_pos+24, y_pos);
 800285e:	4b1d      	ldr	r3, [pc, #116]	@ (80028d4 <moveOneLeft+0x428>)
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	3318      	adds	r3, #24
 8002864:	b29b      	uxth	r3, r3
 8002866:	4a1c      	ldr	r2, [pc, #112]	@ (80028d8 <moveOneLeft+0x42c>)
 8002868:	8812      	ldrh	r2, [r2, #0]
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff f8bd 	bl	80019ec <removeShapeT2>
			drawShapeT2(x_pos, y_pos, LCD_COLOR_BLUE);
 8002872:	4b18      	ldr	r3, [pc, #96]	@ (80028d4 <moveOneLeft+0x428>)
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	4a18      	ldr	r2, [pc, #96]	@ (80028d8 <moveOneLeft+0x42c>)
 8002878:	8811      	ldrh	r1, [r2, #0]
 800287a:	221f      	movs	r2, #31
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff f883 	bl	8001988 <drawShapeT2>
			break;
 8002882:	e025      	b.n	80028d0 <moveOneLeft+0x424>
			removeShapeT3(x_pos+24, y_pos);
 8002884:	4b13      	ldr	r3, [pc, #76]	@ (80028d4 <moveOneLeft+0x428>)
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	3318      	adds	r3, #24
 800288a:	b29b      	uxth	r3, r3
 800288c:	4a12      	ldr	r2, [pc, #72]	@ (80028d8 <moveOneLeft+0x42c>)
 800288e:	8812      	ldrh	r2, [r2, #0]
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f908 	bl	8001aa8 <removeShapeT3>
			drawShapeT3(x_pos, y_pos, LCD_COLOR_BLUE);
 8002898:	4b0e      	ldr	r3, [pc, #56]	@ (80028d4 <moveOneLeft+0x428>)
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	4a0e      	ldr	r2, [pc, #56]	@ (80028d8 <moveOneLeft+0x42c>)
 800289e:	8811      	ldrh	r1, [r2, #0]
 80028a0:	221f      	movs	r2, #31
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff f8ce 	bl	8001a44 <drawShapeT3>
			break;
 80028a8:	e012      	b.n	80028d0 <moveOneLeft+0x424>
			removeShapeT4(x_pos+24, y_pos);
 80028aa:	4b0a      	ldr	r3, [pc, #40]	@ (80028d4 <moveOneLeft+0x428>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	3318      	adds	r3, #24
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	4a09      	ldr	r2, [pc, #36]	@ (80028d8 <moveOneLeft+0x42c>)
 80028b4:	8812      	ldrh	r2, [r2, #0]
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff f957 	bl	8001b6c <removeShapeT4>
			drawShapeT4(x_pos, y_pos, LCD_COLOR_BLUE);
 80028be:	4b05      	ldr	r3, [pc, #20]	@ (80028d4 <moveOneLeft+0x428>)
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	4a05      	ldr	r2, [pc, #20]	@ (80028d8 <moveOneLeft+0x42c>)
 80028c4:	8811      	ldrh	r1, [r2, #0]
 80028c6:	221f      	movs	r2, #31
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff f919 	bl	8001b00 <drawShapeT4>
			break;
 80028ce:	bf00      	nop
}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000000 	.word	0x20000000
 80028d8:	200000b0 	.word	0x200000b0
 80028dc:	200000b4 	.word	0x200000b4
 80028e0:	200000bc 	.word	0x200000bc

080028e4 <moveOneRight>:

void moveOneRight()
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
	x_pos += 24;
 80028e8:	4b99      	ldr	r3, [pc, #612]	@ (8002b50 <moveOneRight+0x26c>)
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	3318      	adds	r3, #24
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	4b97      	ldr	r3, [pc, #604]	@ (8002b50 <moveOneRight+0x26c>)
 80028f2:	801a      	strh	r2, [r3, #0]
	if (shape_is == 1){
 80028f4:	4b97      	ldr	r3, [pc, #604]	@ (8002b54 <moveOneRight+0x270>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d117      	bne.n	800292c <moveOneRight+0x48>
			switch(index_count)
 80028fc:	4b96      	ldr	r3, [pc, #600]	@ (8002b58 <moveOneRight+0x274>)
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	f040 8201 	bne.w	8002d08 <moveOneRight+0x424>
			{
			case 1:
				removeShapeO(x_pos-24, y_pos);
 8002906:	4b92      	ldr	r3, [pc, #584]	@ (8002b50 <moveOneRight+0x26c>)
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	3b18      	subs	r3, #24
 800290c:	b29b      	uxth	r3, r3
 800290e:	4a93      	ldr	r2, [pc, #588]	@ (8002b5c <moveOneRight+0x278>)
 8002910:	8812      	ldrh	r2, [r2, #0]
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe f9ad 	bl	8000c74 <removeShapeO>
				drawShapeO(x_pos, y_pos, LCD_COLOR_BLUE);
 800291a:	4b8d      	ldr	r3, [pc, #564]	@ (8002b50 <moveOneRight+0x26c>)
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	4a8f      	ldr	r2, [pc, #572]	@ (8002b5c <moveOneRight+0x278>)
 8002920:	8811      	ldrh	r1, [r2, #0]
 8002922:	221f      	movs	r2, #31
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe f973 	bl	8000c10 <drawShapeO>
				break;
 800292a:	e1ed      	b.n	8002d08 <moveOneRight+0x424>
			}
		}
		else if (shape_is == 2){
 800292c:	4b89      	ldr	r3, [pc, #548]	@ (8002b54 <moveOneRight+0x270>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d12c      	bne.n	800298e <moveOneRight+0xaa>
			switch(index_count)
 8002934:	4b88      	ldr	r3, [pc, #544]	@ (8002b58 <moveOneRight+0x274>)
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d002      	beq.n	8002942 <moveOneRight+0x5e>
 800293c:	2b03      	cmp	r3, #3
 800293e:	d013      	beq.n	8002968 <moveOneRight+0x84>
				removeShapeT4(x_pos-24, y_pos);
				drawShapeT4(x_pos, y_pos, LCD_COLOR_BLUE);
				break;
			}
		}
}
 8002940:	e1e2      	b.n	8002d08 <moveOneRight+0x424>
				removeShapeI(x_pos-24, y_pos);
 8002942:	4b83      	ldr	r3, [pc, #524]	@ (8002b50 <moveOneRight+0x26c>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	3b18      	subs	r3, #24
 8002948:	b29b      	uxth	r3, r3
 800294a:	4a84      	ldr	r2, [pc, #528]	@ (8002b5c <moveOneRight+0x278>)
 800294c:	8812      	ldrh	r2, [r2, #0]
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f7fe f9eb 	bl	8000d2c <removeShapeI>
				drawShapeI(x_pos, y_pos, LCD_COLOR_BLUE);
 8002956:	4b7e      	ldr	r3, [pc, #504]	@ (8002b50 <moveOneRight+0x26c>)
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	4a80      	ldr	r2, [pc, #512]	@ (8002b5c <moveOneRight+0x278>)
 800295c:	8811      	ldrh	r1, [r2, #0]
 800295e:	221f      	movs	r2, #31
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe f9b3 	bl	8000ccc <drawShapeI>
				break;
 8002966:	e1cf      	b.n	8002d08 <moveOneRight+0x424>
				removeShapeI2(x_pos-24, y_pos );
 8002968:	4b79      	ldr	r3, [pc, #484]	@ (8002b50 <moveOneRight+0x26c>)
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	3b18      	subs	r3, #24
 800296e:	b29b      	uxth	r3, r3
 8002970:	4a7a      	ldr	r2, [pc, #488]	@ (8002b5c <moveOneRight+0x278>)
 8002972:	8812      	ldrh	r2, [r2, #0]
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fa32 	bl	8000de0 <removeShapeI2>
				drawShapeI2(x_pos, y_pos, LCD_COLOR_BLUE);
 800297c:	4b74      	ldr	r3, [pc, #464]	@ (8002b50 <moveOneRight+0x26c>)
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	4a76      	ldr	r2, [pc, #472]	@ (8002b5c <moveOneRight+0x278>)
 8002982:	8811      	ldrh	r1, [r2, #0]
 8002984:	221f      	movs	r2, #31
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe f9fa 	bl	8000d80 <drawShapeI2>
				break;
 800298c:	e1bc      	b.n	8002d08 <moveOneRight+0x424>
		else if (shape_is == 3){
 800298e:	4b71      	ldr	r3, [pc, #452]	@ (8002b54 <moveOneRight+0x270>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d144      	bne.n	8002a20 <moveOneRight+0x13c>
			switch(index_count)
 8002996:	4b70      	ldr	r3, [pc, #448]	@ (8002b58 <moveOneRight+0x274>)
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	2b06      	cmp	r3, #6
 800299c:	d02d      	beq.n	80029fa <moveOneRight+0x116>
 800299e:	2b06      	cmp	r3, #6
 80029a0:	f300 81b2 	bgt.w	8002d08 <moveOneRight+0x424>
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d002      	beq.n	80029ae <moveOneRight+0xca>
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d013      	beq.n	80029d4 <moveOneRight+0xf0>
}
 80029ac:	e1ac      	b.n	8002d08 <moveOneRight+0x424>
				removeShapeS(x_pos-24, y_pos );
 80029ae:	4b68      	ldr	r3, [pc, #416]	@ (8002b50 <moveOneRight+0x26c>)
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	3b18      	subs	r3, #24
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	4a69      	ldr	r2, [pc, #420]	@ (8002b5c <moveOneRight+0x278>)
 80029b8:	8812      	ldrh	r2, [r2, #0]
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe fa6d 	bl	8000e9c <removeShapeS>
				drawShapeS(x_pos, y_pos, LCD_COLOR_BLUE);
 80029c2:	4b63      	ldr	r3, [pc, #396]	@ (8002b50 <moveOneRight+0x26c>)
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	4a65      	ldr	r2, [pc, #404]	@ (8002b5c <moveOneRight+0x278>)
 80029c8:	8811      	ldrh	r1, [r2, #0]
 80029ca:	221f      	movs	r2, #31
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe fa31 	bl	8000e34 <drawShapeS>
				break;
 80029d2:	e199      	b.n	8002d08 <moveOneRight+0x424>
				removeShapeS2(x_pos-24, y_pos);
 80029d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002b50 <moveOneRight+0x26c>)
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	3b18      	subs	r3, #24
 80029da:	b29b      	uxth	r3, r3
 80029dc:	4a5f      	ldr	r2, [pc, #380]	@ (8002b5c <moveOneRight+0x278>)
 80029de:	8812      	ldrh	r2, [r2, #0]
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe fabc 	bl	8000f60 <removeShapeS2>
				drawShapeS2(x_pos, y_pos, LCD_COLOR_BLUE);
 80029e8:	4b59      	ldr	r3, [pc, #356]	@ (8002b50 <moveOneRight+0x26c>)
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	4a5b      	ldr	r2, [pc, #364]	@ (8002b5c <moveOneRight+0x278>)
 80029ee:	8811      	ldrh	r1, [r2, #0]
 80029f0:	221f      	movs	r2, #31
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fa80 	bl	8000ef8 <drawShapeS2>
				break;
 80029f8:	e186      	b.n	8002d08 <moveOneRight+0x424>
				removeShapeS3(x_pos-24, y_pos );
 80029fa:	4b55      	ldr	r3, [pc, #340]	@ (8002b50 <moveOneRight+0x26c>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	3b18      	subs	r3, #24
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	4a56      	ldr	r2, [pc, #344]	@ (8002b5c <moveOneRight+0x278>)
 8002a04:	8812      	ldrh	r2, [r2, #0]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe fb0b 	bl	8001024 <removeShapeS3>
				drawShapeS3(x_pos, y_pos, LCD_COLOR_BLUE);
 8002a0e:	4b50      	ldr	r3, [pc, #320]	@ (8002b50 <moveOneRight+0x26c>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	4a52      	ldr	r2, [pc, #328]	@ (8002b5c <moveOneRight+0x278>)
 8002a14:	8811      	ldrh	r1, [r2, #0]
 8002a16:	221f      	movs	r2, #31
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fe facf 	bl	8000fbc <drawShapeS3>
				break;
 8002a1e:	e173      	b.n	8002d08 <moveOneRight+0x424>
		else if (shape_is == 4){
 8002a20:	4b4c      	ldr	r3, [pc, #304]	@ (8002b54 <moveOneRight+0x270>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d144      	bne.n	8002ab2 <moveOneRight+0x1ce>
			switch(index_count)
 8002a28:	4b4b      	ldr	r3, [pc, #300]	@ (8002b58 <moveOneRight+0x274>)
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	2b09      	cmp	r3, #9
 8002a2e:	d02d      	beq.n	8002a8c <moveOneRight+0x1a8>
 8002a30:	2b09      	cmp	r3, #9
 8002a32:	f300 8169 	bgt.w	8002d08 <moveOneRight+0x424>
 8002a36:	2b07      	cmp	r3, #7
 8002a38:	d002      	beq.n	8002a40 <moveOneRight+0x15c>
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d013      	beq.n	8002a66 <moveOneRight+0x182>
}
 8002a3e:	e163      	b.n	8002d08 <moveOneRight+0x424>
				removeShapeZ(x_pos-24, y_pos);
 8002a40:	4b43      	ldr	r3, [pc, #268]	@ (8002b50 <moveOneRight+0x26c>)
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	3b18      	subs	r3, #24
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	4a44      	ldr	r2, [pc, #272]	@ (8002b5c <moveOneRight+0x278>)
 8002a4a:	8812      	ldrh	r2, [r2, #0]
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe fb4a 	bl	80010e8 <removeShapeZ>
				drawShapeZ(x_pos, y_pos, LCD_COLOR_BLUE);
 8002a54:	4b3e      	ldr	r3, [pc, #248]	@ (8002b50 <moveOneRight+0x26c>)
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	4a40      	ldr	r2, [pc, #256]	@ (8002b5c <moveOneRight+0x278>)
 8002a5a:	8811      	ldrh	r1, [r2, #0]
 8002a5c:	221f      	movs	r2, #31
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe fb0e 	bl	8001080 <drawShapeZ>
				break;
 8002a64:	e150      	b.n	8002d08 <moveOneRight+0x424>
				removeShapeZ2(x_pos-24, y_pos);
 8002a66:	4b3a      	ldr	r3, [pc, #232]	@ (8002b50 <moveOneRight+0x26c>)
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	3b18      	subs	r3, #24
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	4a3b      	ldr	r2, [pc, #236]	@ (8002b5c <moveOneRight+0x278>)
 8002a70:	8812      	ldrh	r2, [r2, #0]
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fe fb99 	bl	80011ac <removeShapeZ2>
				drawShapeZ2(x_pos, y_pos, LCD_COLOR_BLUE);
 8002a7a:	4b35      	ldr	r3, [pc, #212]	@ (8002b50 <moveOneRight+0x26c>)
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	4a37      	ldr	r2, [pc, #220]	@ (8002b5c <moveOneRight+0x278>)
 8002a80:	8811      	ldrh	r1, [r2, #0]
 8002a82:	221f      	movs	r2, #31
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe fb5d 	bl	8001144 <drawShapeZ2>
				break;
 8002a8a:	e13d      	b.n	8002d08 <moveOneRight+0x424>
				removeShapeZ3(x_pos-24, y_pos);
 8002a8c:	4b30      	ldr	r3, [pc, #192]	@ (8002b50 <moveOneRight+0x26c>)
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	3b18      	subs	r3, #24
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	4a31      	ldr	r2, [pc, #196]	@ (8002b5c <moveOneRight+0x278>)
 8002a96:	8812      	ldrh	r2, [r2, #0]
 8002a98:	4611      	mov	r1, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fbe8 	bl	8001270 <removeShapeZ3>
				drawShapeZ3(x_pos, y_pos, LCD_COLOR_BLUE);
 8002aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8002b50 <moveOneRight+0x26c>)
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8002b5c <moveOneRight+0x278>)
 8002aa6:	8811      	ldrh	r1, [r2, #0]
 8002aa8:	221f      	movs	r2, #31
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe fbac 	bl	8001208 <drawShapeZ3>
				break;
 8002ab0:	e12a      	b.n	8002d08 <moveOneRight+0x424>
		else if (shape_is == 5){
 8002ab2:	4b28      	ldr	r3, [pc, #160]	@ (8002b54 <moveOneRight+0x270>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b05      	cmp	r3, #5
 8002ab8:	d165      	bne.n	8002b86 <moveOneRight+0x2a2>
			switch(index_count)
 8002aba:	4b27      	ldr	r3, [pc, #156]	@ (8002b58 <moveOneRight+0x274>)
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	3b0a      	subs	r3, #10
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	f200 8121 	bhi.w	8002d08 <moveOneRight+0x424>
 8002ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8002acc <moveOneRight+0x1e8>)
 8002ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002acc:	08002add 	.word	0x08002add
 8002ad0:	08002b03 	.word	0x08002b03
 8002ad4:	08002b29 	.word	0x08002b29
 8002ad8:	08002b61 	.word	0x08002b61
				removeShapeL(x_pos-24, y_pos);
 8002adc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b50 <moveOneRight+0x26c>)
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	3b18      	subs	r3, #24
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b5c <moveOneRight+0x278>)
 8002ae6:	8812      	ldrh	r2, [r2, #0]
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe fc20 	bl	8001330 <removeShapeL>
				drawShapeL(x_pos, y_pos, LCD_COLOR_BLUE);
 8002af0:	4b17      	ldr	r3, [pc, #92]	@ (8002b50 <moveOneRight+0x26c>)
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	4a19      	ldr	r2, [pc, #100]	@ (8002b5c <moveOneRight+0x278>)
 8002af6:	8811      	ldrh	r1, [r2, #0]
 8002af8:	221f      	movs	r2, #31
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe fbe6 	bl	80012cc <drawShapeL>
				break;
 8002b00:	e102      	b.n	8002d08 <moveOneRight+0x424>
				removeShapeL2(x_pos-24, y_pos);
 8002b02:	4b13      	ldr	r3, [pc, #76]	@ (8002b50 <moveOneRight+0x26c>)
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	3b18      	subs	r3, #24
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4a14      	ldr	r2, [pc, #80]	@ (8002b5c <moveOneRight+0x278>)
 8002b0c:	8812      	ldrh	r2, [r2, #0]
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe fc6f 	bl	80013f4 <removeShapeL2>
				drawShapeL2(x_pos, y_pos, LCD_COLOR_BLUE);
 8002b16:	4b0e      	ldr	r3, [pc, #56]	@ (8002b50 <moveOneRight+0x26c>)
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	4a10      	ldr	r2, [pc, #64]	@ (8002b5c <moveOneRight+0x278>)
 8002b1c:	8811      	ldrh	r1, [r2, #0]
 8002b1e:	221f      	movs	r2, #31
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe fc31 	bl	8001388 <drawShapeL2>
				break;
 8002b26:	e0ef      	b.n	8002d08 <moveOneRight+0x424>
				removeShapeL3(x_pos-24, y_pos);
 8002b28:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <moveOneRight+0x26c>)
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	3b18      	subs	r3, #24
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	4a0a      	ldr	r2, [pc, #40]	@ (8002b5c <moveOneRight+0x278>)
 8002b32:	8812      	ldrh	r2, [r2, #0]
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe fcbc 	bl	80014b4 <removeShapeL3>
				drawShapeL3(x_pos, y_pos, LCD_COLOR_BLUE);
 8002b3c:	4b04      	ldr	r3, [pc, #16]	@ (8002b50 <moveOneRight+0x26c>)
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	4a06      	ldr	r2, [pc, #24]	@ (8002b5c <moveOneRight+0x278>)
 8002b42:	8811      	ldrh	r1, [r2, #0]
 8002b44:	221f      	movs	r2, #31
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fc84 	bl	8001454 <drawShapeL3>
				break;
 8002b4c:	e0dc      	b.n	8002d08 <moveOneRight+0x424>
 8002b4e:	bf00      	nop
 8002b50:	20000000 	.word	0x20000000
 8002b54:	200000b4 	.word	0x200000b4
 8002b58:	200000bc 	.word	0x200000bc
 8002b5c:	200000b0 	.word	0x200000b0
				removeShapeL4(x_pos-24, y_pos);
 8002b60:	4b6a      	ldr	r3, [pc, #424]	@ (8002d0c <moveOneRight+0x428>)
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	3b18      	subs	r3, #24
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	4a69      	ldr	r2, [pc, #420]	@ (8002d10 <moveOneRight+0x42c>)
 8002b6a:	8812      	ldrh	r2, [r2, #0]
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe fcfa 	bl	8001568 <removeShapeL4>
				drawShapeL4(x_pos, y_pos, LCD_COLOR_BLUE);
 8002b74:	4b65      	ldr	r3, [pc, #404]	@ (8002d0c <moveOneRight+0x428>)
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	4a65      	ldr	r2, [pc, #404]	@ (8002d10 <moveOneRight+0x42c>)
 8002b7a:	8811      	ldrh	r1, [r2, #0]
 8002b7c:	221f      	movs	r2, #31
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe fcc2 	bl	8001508 <drawShapeL4>
				break;
 8002b84:	e0c0      	b.n	8002d08 <moveOneRight+0x424>
		else if (shape_is == 6){
 8002b86:	4b63      	ldr	r3, [pc, #396]	@ (8002d14 <moveOneRight+0x430>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d15c      	bne.n	8002c48 <moveOneRight+0x364>
			switch(index_count)
 8002b8e:	4b62      	ldr	r3, [pc, #392]	@ (8002d18 <moveOneRight+0x434>)
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	3b0e      	subs	r3, #14
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	f200 80b7 	bhi.w	8002d08 <moveOneRight+0x424>
 8002b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba0 <moveOneRight+0x2bc>)
 8002b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba0:	08002bb1 	.word	0x08002bb1
 8002ba4:	08002bd7 	.word	0x08002bd7
 8002ba8:	08002bfd 	.word	0x08002bfd
 8002bac:	08002c23 	.word	0x08002c23
				removeShapeJ(x_pos-24, y_pos);
 8002bb0:	4b56      	ldr	r3, [pc, #344]	@ (8002d0c <moveOneRight+0x428>)
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	3b18      	subs	r3, #24
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4a55      	ldr	r2, [pc, #340]	@ (8002d10 <moveOneRight+0x42c>)
 8002bba:	8812      	ldrh	r2, [r2, #0]
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fd32 	bl	8001628 <removeShapeJ>
				drawShapeJ(x_pos, y_pos, LCD_COLOR_BLUE);
 8002bc4:	4b51      	ldr	r3, [pc, #324]	@ (8002d0c <moveOneRight+0x428>)
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	4a51      	ldr	r2, [pc, #324]	@ (8002d10 <moveOneRight+0x42c>)
 8002bca:	8811      	ldrh	r1, [r2, #0]
 8002bcc:	221f      	movs	r2, #31
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fcf4 	bl	80015bc <drawShapeJ>
				break;
 8002bd4:	e098      	b.n	8002d08 <moveOneRight+0x424>
				removeShapeJ2(x_pos-24, y_pos);
 8002bd6:	4b4d      	ldr	r3, [pc, #308]	@ (8002d0c <moveOneRight+0x428>)
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	3b18      	subs	r3, #24
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	4a4c      	ldr	r2, [pc, #304]	@ (8002d10 <moveOneRight+0x42c>)
 8002be0:	8812      	ldrh	r2, [r2, #0]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe fd83 	bl	80016f0 <removeShapeJ2>
				drawShapeJ2(x_pos, y_pos, LCD_COLOR_BLUE);
 8002bea:	4b48      	ldr	r3, [pc, #288]	@ (8002d0c <moveOneRight+0x428>)
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	4a48      	ldr	r2, [pc, #288]	@ (8002d10 <moveOneRight+0x42c>)
 8002bf0:	8811      	ldrh	r1, [r2, #0]
 8002bf2:	221f      	movs	r2, #31
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe fd47 	bl	8001688 <drawShapeJ2>
				break;
 8002bfa:	e085      	b.n	8002d08 <moveOneRight+0x424>
				removeShapeJ3(x_pos-24, y_pos);
 8002bfc:	4b43      	ldr	r3, [pc, #268]	@ (8002d0c <moveOneRight+0x428>)
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	3b18      	subs	r3, #24
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	4a42      	ldr	r2, [pc, #264]	@ (8002d10 <moveOneRight+0x42c>)
 8002c06:	8812      	ldrh	r2, [r2, #0]
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fdce 	bl	80017ac <removeShapeJ3>
				drawShapeJ3(x_pos, y_pos, LCD_COLOR_BLUE);
 8002c10:	4b3e      	ldr	r3, [pc, #248]	@ (8002d0c <moveOneRight+0x428>)
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	4a3e      	ldr	r2, [pc, #248]	@ (8002d10 <moveOneRight+0x42c>)
 8002c16:	8811      	ldrh	r1, [r2, #0]
 8002c18:	221f      	movs	r2, #31
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe fd96 	bl	800174c <drawShapeJ3>
				break;
 8002c20:	e072      	b.n	8002d08 <moveOneRight+0x424>
				removeShapeJ4(x_pos-24, y_pos);
 8002c22:	4b3a      	ldr	r3, [pc, #232]	@ (8002d0c <moveOneRight+0x428>)
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	3b18      	subs	r3, #24
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	4a39      	ldr	r2, [pc, #228]	@ (8002d10 <moveOneRight+0x42c>)
 8002c2c:	8812      	ldrh	r2, [r2, #0]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe fe17 	bl	8001864 <removeShapeJ4>
				drawShapeJ4(x_pos, y_pos, LCD_COLOR_BLUE);
 8002c36:	4b35      	ldr	r3, [pc, #212]	@ (8002d0c <moveOneRight+0x428>)
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	4a35      	ldr	r2, [pc, #212]	@ (8002d10 <moveOneRight+0x42c>)
 8002c3c:	8811      	ldrh	r1, [r2, #0]
 8002c3e:	221f      	movs	r2, #31
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe fddd 	bl	8001800 <drawShapeJ4>
				break;
 8002c46:	e05f      	b.n	8002d08 <moveOneRight+0x424>
		else if (shape_is == 7){
 8002c48:	4b32      	ldr	r3, [pc, #200]	@ (8002d14 <moveOneRight+0x430>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b07      	cmp	r3, #7
 8002c4e:	d15b      	bne.n	8002d08 <moveOneRight+0x424>
			switch(index_count)
 8002c50:	4b31      	ldr	r3, [pc, #196]	@ (8002d18 <moveOneRight+0x434>)
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	3b12      	subs	r3, #18
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d856      	bhi.n	8002d08 <moveOneRight+0x424>
 8002c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c60 <moveOneRight+0x37c>)
 8002c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c60:	08002c71 	.word	0x08002c71
 8002c64:	08002c97 	.word	0x08002c97
 8002c68:	08002cbd 	.word	0x08002cbd
 8002c6c:	08002ce3 	.word	0x08002ce3
				removeShapeT(x_pos-24, y_pos);
 8002c70:	4b26      	ldr	r3, [pc, #152]	@ (8002d0c <moveOneRight+0x428>)
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	3b18      	subs	r3, #24
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	4a25      	ldr	r2, [pc, #148]	@ (8002d10 <moveOneRight+0x42c>)
 8002c7a:	8812      	ldrh	r2, [r2, #0]
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fe52 	bl	8001928 <removeShapeT>
				drawShapeT(x_pos, y_pos, LCD_COLOR_BLUE);
 8002c84:	4b21      	ldr	r3, [pc, #132]	@ (8002d0c <moveOneRight+0x428>)
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	4a21      	ldr	r2, [pc, #132]	@ (8002d10 <moveOneRight+0x42c>)
 8002c8a:	8811      	ldrh	r1, [r2, #0]
 8002c8c:	221f      	movs	r2, #31
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fe14 	bl	80018bc <drawShapeT>
				break;
 8002c94:	e038      	b.n	8002d08 <moveOneRight+0x424>
				removeShapeT2(x_pos-24, y_pos);
 8002c96:	4b1d      	ldr	r3, [pc, #116]	@ (8002d0c <moveOneRight+0x428>)
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	3b18      	subs	r3, #24
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002d10 <moveOneRight+0x42c>)
 8002ca0:	8812      	ldrh	r2, [r2, #0]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe fea1 	bl	80019ec <removeShapeT2>
				drawShapeT2(x_pos, y_pos, LCD_COLOR_BLUE);
 8002caa:	4b18      	ldr	r3, [pc, #96]	@ (8002d0c <moveOneRight+0x428>)
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	4a18      	ldr	r2, [pc, #96]	@ (8002d10 <moveOneRight+0x42c>)
 8002cb0:	8811      	ldrh	r1, [r2, #0]
 8002cb2:	221f      	movs	r2, #31
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe fe67 	bl	8001988 <drawShapeT2>
				break;
 8002cba:	e025      	b.n	8002d08 <moveOneRight+0x424>
				removeShapeT3(x_pos-24, y_pos);
 8002cbc:	4b13      	ldr	r3, [pc, #76]	@ (8002d0c <moveOneRight+0x428>)
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	3b18      	subs	r3, #24
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	4a12      	ldr	r2, [pc, #72]	@ (8002d10 <moveOneRight+0x42c>)
 8002cc6:	8812      	ldrh	r2, [r2, #0]
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe feec 	bl	8001aa8 <removeShapeT3>
				drawShapeT3(x_pos, y_pos, LCD_COLOR_BLUE);
 8002cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8002d0c <moveOneRight+0x428>)
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	4a0e      	ldr	r2, [pc, #56]	@ (8002d10 <moveOneRight+0x42c>)
 8002cd6:	8811      	ldrh	r1, [r2, #0]
 8002cd8:	221f      	movs	r2, #31
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe feb2 	bl	8001a44 <drawShapeT3>
				break;
 8002ce0:	e012      	b.n	8002d08 <moveOneRight+0x424>
				removeShapeT4(x_pos-24, y_pos);
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d0c <moveOneRight+0x428>)
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	3b18      	subs	r3, #24
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	4a09      	ldr	r2, [pc, #36]	@ (8002d10 <moveOneRight+0x42c>)
 8002cec:	8812      	ldrh	r2, [r2, #0]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fe ff3b 	bl	8001b6c <removeShapeT4>
				drawShapeT4(x_pos, y_pos, LCD_COLOR_BLUE);
 8002cf6:	4b05      	ldr	r3, [pc, #20]	@ (8002d0c <moveOneRight+0x428>)
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	4a05      	ldr	r2, [pc, #20]	@ (8002d10 <moveOneRight+0x42c>)
 8002cfc:	8811      	ldrh	r1, [r2, #0]
 8002cfe:	221f      	movs	r2, #31
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe fefd 	bl	8001b00 <drawShapeT4>
				break;
 8002d06:	bf00      	nop
}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	200000b0 	.word	0x200000b0
 8002d14:	200000b4 	.word	0x200000b4
 8002d18:	200000bc 	.word	0x200000bc

08002d1c <Row_Check_Delete>:

bool row_done = false;

void Row_Check_Delete()
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
	int count;
	for (int y=12; y<308; y+=24) {
 8002d22:	230c      	movs	r3, #12
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	e147      	b.n	8002fb8 <Row_Check_Delete+0x29c>
		count = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]
		for (int x=12; x<240; x+=24) {
 8002d2c:	230c      	movs	r3, #12
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	e13b      	b.n	8002faa <Row_Check_Delete+0x28e>
			if (LCD_Read_Pixel(x, y) == LCD_COLOR_BLUE) {count++;}
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	b292      	uxth	r2, r2
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fca5 	bl	800368c <LCD_Read_Pixel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b1f      	cmp	r3, #31
 8002d46:	d102      	bne.n	8002d4e <Row_Check_Delete+0x32>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]
			if (count == 10)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b0a      	cmp	r3, #10
 8002d52:	f040 8127 	bne.w	8002fa4 <Row_Check_Delete+0x288>
			{
				row_done = true;
 8002d56:	4b9d      	ldr	r3, [pc, #628]	@ (8002fcc <Row_Check_Delete+0x2b0>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
				for(x=0; x<240; x+=24)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	607b      	str	r3, [r7, #4]
 8002d60:	e11c      	b.n	8002f9c <Row_Check_Delete+0x280>
				{
					switch(index_count)
 8002d62:	4b9b      	ldr	r3, [pc, #620]	@ (8002fd0 <Row_Check_Delete+0x2b4>)
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	2b14      	cmp	r3, #20
 8002d6a:	f200 8114 	bhi.w	8002f96 <Row_Check_Delete+0x27a>
 8002d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d74 <Row_Check_Delete+0x58>)
 8002d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d74:	08002dc9 	.word	0x08002dc9
 8002d78:	08002ddf 	.word	0x08002ddf
 8002d7c:	08002df5 	.word	0x08002df5
 8002d80:	08002e0b 	.word	0x08002e0b
 8002d84:	08002e21 	.word	0x08002e21
 8002d88:	08002e37 	.word	0x08002e37
 8002d8c:	08002e4d 	.word	0x08002e4d
 8002d90:	08002e63 	.word	0x08002e63
 8002d94:	08002e79 	.word	0x08002e79
 8002d98:	08002e8f 	.word	0x08002e8f
 8002d9c:	08002ea5 	.word	0x08002ea5
 8002da0:	08002ebb 	.word	0x08002ebb
 8002da4:	08002ed1 	.word	0x08002ed1
 8002da8:	08002ee7 	.word	0x08002ee7
 8002dac:	08002efd 	.word	0x08002efd
 8002db0:	08002f13 	.word	0x08002f13
 8002db4:	08002f29 	.word	0x08002f29
 8002db8:	08002f3f 	.word	0x08002f3f
 8002dbc:	08002f55 	.word	0x08002f55
 8002dc0:	08002f6b 	.word	0x08002f6b
 8002dc4:	08002f81 	.word	0x08002f81
					{
					case 1:
						drawWhiteSquare(x, y_pos+24);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	4b81      	ldr	r3, [pc, #516]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	3318      	adds	r3, #24
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	f7fd fecc 	bl	8000b74 <drawWhiteSquare>
						break;
 8002ddc:	e0db      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 2:
						drawWhiteSquare(x, y_pos+72);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	4b7c      	ldr	r3, [pc, #496]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	3348      	adds	r3, #72	@ 0x48
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	4619      	mov	r1, r3
 8002dec:	4610      	mov	r0, r2
 8002dee:	f7fd fec1 	bl	8000b74 <drawWhiteSquare>
						break;
 8002df2:	e0d0      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 3:
						drawWhiteSquare(x, y_pos+24);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	4b76      	ldr	r3, [pc, #472]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	3318      	adds	r3, #24
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	4619      	mov	r1, r3
 8002e02:	4610      	mov	r0, r2
 8002e04:	f7fd feb6 	bl	8000b74 <drawWhiteSquare>
						break;
 8002e08:	e0c5      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 4:
						drawWhiteSquare(x, y_pos+48);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	4b71      	ldr	r3, [pc, #452]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	3330      	adds	r3, #48	@ 0x30
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	4619      	mov	r1, r3
 8002e18:	4610      	mov	r0, r2
 8002e1a:	f7fd feab 	bl	8000b74 <drawWhiteSquare>
						break;
 8002e1e:	e0ba      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 5:
						drawWhiteSquare(x, y_pos+48);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	4b6b      	ldr	r3, [pc, #428]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	3330      	adds	r3, #48	@ 0x30
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	f7fd fea0 	bl	8000b74 <drawWhiteSquare>
						break;
 8002e34:	e0af      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 6:
						drawWhiteSquare(x, y_pos+24);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	4b66      	ldr	r3, [pc, #408]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	3318      	adds	r3, #24
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	4619      	mov	r1, r3
 8002e44:	4610      	mov	r0, r2
 8002e46:	f7fd fe95 	bl	8000b74 <drawWhiteSquare>
						break;
 8002e4a:	e0a4      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 7:
						drawWhiteSquare(x, y_pos+24);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	4b60      	ldr	r3, [pc, #384]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	3318      	adds	r3, #24
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f7fd fe8a 	bl	8000b74 <drawWhiteSquare>
						break;
 8002e60:	e099      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 8:
						drawWhiteSquare(x, y_pos+48);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	4b5b      	ldr	r3, [pc, #364]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	3330      	adds	r3, #48	@ 0x30
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4610      	mov	r0, r2
 8002e72:	f7fd fe7f 	bl	8000b74 <drawWhiteSquare>
						break;
 8002e76:	e08e      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 9:
						drawWhiteSquare(x, y_pos+24);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	4b55      	ldr	r3, [pc, #340]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	3318      	adds	r3, #24
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	4619      	mov	r1, r3
 8002e86:	4610      	mov	r0, r2
 8002e88:	f7fd fe74 	bl	8000b74 <drawWhiteSquare>
						break;
 8002e8c:	e083      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 10:
						drawWhiteSquare(x, y_pos+48);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	4b50      	ldr	r3, [pc, #320]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	3330      	adds	r3, #48	@ 0x30
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	f7fd fe69 	bl	8000b74 <drawWhiteSquare>
						break;
 8002ea2:	e078      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 11:
						drawWhiteSquare(x, y_pos+24);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	3318      	adds	r3, #24
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f7fd fe5e 	bl	8000b74 <drawWhiteSquare>
						break;
 8002eb8:	e06d      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 12:
						drawWhiteSquare(x, y_pos+48);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	4b45      	ldr	r3, [pc, #276]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	3330      	adds	r3, #48	@ 0x30
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4610      	mov	r0, r2
 8002eca:	f7fd fe53 	bl	8000b74 <drawWhiteSquare>
						break;
 8002ece:	e062      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 13:
						drawWhiteSquare(x, y_pos+24);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	3318      	adds	r3, #24
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	4619      	mov	r1, r3
 8002ede:	4610      	mov	r0, r2
 8002ee0:	f7fd fe48 	bl	8000b74 <drawWhiteSquare>
						break;
 8002ee4:	e057      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 14:
						drawWhiteSquare(x, y_pos+48);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	4b3a      	ldr	r3, [pc, #232]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	3330      	adds	r3, #48	@ 0x30
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	f7fd fe3d 	bl	8000b74 <drawWhiteSquare>
						break;
 8002efa:	e04c      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 15:
						drawWhiteSquare(x, y_pos+24);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	4b34      	ldr	r3, [pc, #208]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	3318      	adds	r3, #24
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	f7fd fe32 	bl	8000b74 <drawWhiteSquare>
						break;
 8002f10:	e041      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 16:
						drawWhiteSquare(x, y_pos+48);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	3330      	adds	r3, #48	@ 0x30
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4610      	mov	r0, r2
 8002f22:	f7fd fe27 	bl	8000b74 <drawWhiteSquare>
						break;
 8002f26:	e036      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 17:
						drawWhiteSquare(x, y_pos+24);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	4b29      	ldr	r3, [pc, #164]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	3318      	adds	r3, #24
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	4619      	mov	r1, r3
 8002f36:	4610      	mov	r0, r2
 8002f38:	f7fd fe1c 	bl	8000b74 <drawWhiteSquare>
						break;
 8002f3c:	e02b      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 18:
						drawWhiteSquare(x, y_pos+24);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	4b24      	ldr	r3, [pc, #144]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	3318      	adds	r3, #24
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	f7fd fe11 	bl	8000b74 <drawWhiteSquare>
						break;
 8002f52:	e020      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 19:
						drawWhiteSquare(x, y_pos+48);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	3330      	adds	r3, #48	@ 0x30
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	4619      	mov	r1, r3
 8002f62:	4610      	mov	r0, r2
 8002f64:	f7fd fe06 	bl	8000b74 <drawWhiteSquare>
						break;
 8002f68:	e015      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 20:
						drawWhiteSquare(x, y_pos+24);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	4b19      	ldr	r3, [pc, #100]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	3318      	adds	r3, #24
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	4619      	mov	r1, r3
 8002f78:	4610      	mov	r0, r2
 8002f7a:	f7fd fdfb 	bl	8000b74 <drawWhiteSquare>
						break;
 8002f7e:	e00a      	b.n	8002f96 <Row_Check_Delete+0x27a>
					case 21:
						drawWhiteSquare(x, y_pos+48);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	4b13      	ldr	r3, [pc, #76]	@ (8002fd4 <Row_Check_Delete+0x2b8>)
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	3330      	adds	r3, #48	@ 0x30
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	f7fd fdf0 	bl	8000b74 <drawWhiteSquare>
						break;
 8002f94:	bf00      	nop
				for(x=0; x<240; x+=24)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3318      	adds	r3, #24
 8002f9a:	607b      	str	r3, [r7, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2bef      	cmp	r3, #239	@ 0xef
 8002fa0:	f77f aedf 	ble.w	8002d62 <Row_Check_Delete+0x46>
		for (int x=12; x<240; x+=24) {
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3318      	adds	r3, #24
 8002fa8:	607b      	str	r3, [r7, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2bef      	cmp	r3, #239	@ 0xef
 8002fae:	f77f aec0 	ble.w	8002d32 <Row_Check_Delete+0x16>
	for (int y=12; y<308; y+=24) {
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	3318      	adds	r3, #24
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8002fbe:	f6ff aeb3 	blt.w	8002d28 <Row_Check_Delete+0xc>
					}
				}
			}
		}
	}
}
 8002fc2:	bf00      	nop
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	200000be 	.word	0x200000be
 8002fd0:	200000bc 	.word	0x200000bc
 8002fd4:	200000b0 	.word	0x200000b0

08002fd8 <White_Space_Below>:

bool White_Space_Below()
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
	uint16_t color = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	80fb      	strh	r3, [r7, #6]
	switch(index_count) // each case specifies low point on shape & (y+1) to look one pixel below shape
 8002fe2:	4ba8      	ldr	r3, [pc, #672]	@ (8003284 <White_Space_Below+0x2ac>)
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	2b14      	cmp	r3, #20
 8002fea:	f200 816f 	bhi.w	80032cc <White_Space_Below+0x2f4>
 8002fee:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff4 <White_Space_Below+0x1c>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	08003049 	.word	0x08003049
 8002ff8:	08003067 	.word	0x08003067
 8002ffc:	08003085 	.word	0x08003085
 8003000:	080030a3 	.word	0x080030a3
 8003004:	080030c1 	.word	0x080030c1
 8003008:	080030df 	.word	0x080030df
 800300c:	080030fd 	.word	0x080030fd
 8003010:	0800311b 	.word	0x0800311b
 8003014:	08003139 	.word	0x08003139
 8003018:	08003157 	.word	0x08003157
 800301c:	08003175 	.word	0x08003175
 8003020:	08003193 	.word	0x08003193
 8003024:	080031b1 	.word	0x080031b1
 8003028:	080031cf 	.word	0x080031cf
 800302c:	080031ed 	.word	0x080031ed
 8003030:	0800320b 	.word	0x0800320b
 8003034:	08003229 	.word	0x08003229
 8003038:	08003247 	.word	0x08003247
 800303c:	08003265 	.word	0x08003265
 8003040:	08003291 	.word	0x08003291
 8003044:	080032af 	.word	0x080032af
	{
	case 1:
		color = LCD_Read_Pixel(x_pos+10, y_pos+49);
 8003048:	4b8f      	ldr	r3, [pc, #572]	@ (8003288 <White_Space_Below+0x2b0>)
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	330a      	adds	r3, #10
 800304e:	b29a      	uxth	r2, r3
 8003050:	4b8e      	ldr	r3, [pc, #568]	@ (800328c <White_Space_Below+0x2b4>)
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	3331      	adds	r3, #49	@ 0x31
 8003056:	b29b      	uxth	r3, r3
 8003058:	4619      	mov	r1, r3
 800305a:	4610      	mov	r0, r2
 800305c:	f000 fb16 	bl	800368c <LCD_Read_Pixel>
 8003060:	4603      	mov	r3, r0
 8003062:	80fb      	strh	r3, [r7, #6]
		break;
 8003064:	e132      	b.n	80032cc <White_Space_Below+0x2f4>
	case 2:
		color = LCD_Read_Pixel(x_pos+10, y_pos+98);
 8003066:	4b88      	ldr	r3, [pc, #544]	@ (8003288 <White_Space_Below+0x2b0>)
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	330a      	adds	r3, #10
 800306c:	b29a      	uxth	r2, r3
 800306e:	4b87      	ldr	r3, [pc, #540]	@ (800328c <White_Space_Below+0x2b4>)
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	3362      	adds	r3, #98	@ 0x62
 8003074:	b29b      	uxth	r3, r3
 8003076:	4619      	mov	r1, r3
 8003078:	4610      	mov	r0, r2
 800307a:	f000 fb07 	bl	800368c <LCD_Read_Pixel>
 800307e:	4603      	mov	r3, r0
 8003080:	80fb      	strh	r3, [r7, #6]
		break;
 8003082:	e123      	b.n	80032cc <White_Space_Below+0x2f4>
	case 3:
		color = LCD_Read_Pixel(x_pos+10, y_pos+25);
 8003084:	4b80      	ldr	r3, [pc, #512]	@ (8003288 <White_Space_Below+0x2b0>)
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	330a      	adds	r3, #10
 800308a:	b29a      	uxth	r2, r3
 800308c:	4b7f      	ldr	r3, [pc, #508]	@ (800328c <White_Space_Below+0x2b4>)
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	3319      	adds	r3, #25
 8003092:	b29b      	uxth	r3, r3
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f000 faf8 	bl	800368c <LCD_Read_Pixel>
 800309c:	4603      	mov	r3, r0
 800309e:	80fb      	strh	r3, [r7, #6]
		break;
 80030a0:	e114      	b.n	80032cc <White_Space_Below+0x2f4>
	case 4:
		color = LCD_Read_Pixel(x_pos+10, y_pos+49);
 80030a2:	4b79      	ldr	r3, [pc, #484]	@ (8003288 <White_Space_Below+0x2b0>)
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	330a      	adds	r3, #10
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	4b78      	ldr	r3, [pc, #480]	@ (800328c <White_Space_Below+0x2b4>)
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	3331      	adds	r3, #49	@ 0x31
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	4619      	mov	r1, r3
 80030b4:	4610      	mov	r0, r2
 80030b6:	f000 fae9 	bl	800368c <LCD_Read_Pixel>
 80030ba:	4603      	mov	r3, r0
 80030bc:	80fb      	strh	r3, [r7, #6]
		break;
 80030be:	e105      	b.n	80032cc <White_Space_Below+0x2f4>
	case 5:
		color = LCD_Read_Pixel(x_pos+10, y_pos+73);
 80030c0:	4b71      	ldr	r3, [pc, #452]	@ (8003288 <White_Space_Below+0x2b0>)
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	330a      	adds	r3, #10
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	4b70      	ldr	r3, [pc, #448]	@ (800328c <White_Space_Below+0x2b4>)
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	3349      	adds	r3, #73	@ 0x49
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	4619      	mov	r1, r3
 80030d2:	4610      	mov	r0, r2
 80030d4:	f000 fada 	bl	800368c <LCD_Read_Pixel>
 80030d8:	4603      	mov	r3, r0
 80030da:	80fb      	strh	r3, [r7, #6]
		break;
 80030dc:	e0f6      	b.n	80032cc <White_Space_Below+0x2f4>
	case 6:
		color = LCD_Read_Pixel(x_pos+10, y_pos+49);
 80030de:	4b6a      	ldr	r3, [pc, #424]	@ (8003288 <White_Space_Below+0x2b0>)
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	330a      	adds	r3, #10
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	4b69      	ldr	r3, [pc, #420]	@ (800328c <White_Space_Below+0x2b4>)
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	3331      	adds	r3, #49	@ 0x31
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	4619      	mov	r1, r3
 80030f0:	4610      	mov	r0, r2
 80030f2:	f000 facb 	bl	800368c <LCD_Read_Pixel>
 80030f6:	4603      	mov	r3, r0
 80030f8:	80fb      	strh	r3, [r7, #6]
		break;
 80030fa:	e0e7      	b.n	80032cc <White_Space_Below+0x2f4>
	case 7:
		color = LCD_Read_Pixel(x_pos+25, y_pos+49);
 80030fc:	4b62      	ldr	r3, [pc, #392]	@ (8003288 <White_Space_Below+0x2b0>)
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	3319      	adds	r3, #25
 8003102:	b29a      	uxth	r2, r3
 8003104:	4b61      	ldr	r3, [pc, #388]	@ (800328c <White_Space_Below+0x2b4>)
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	3331      	adds	r3, #49	@ 0x31
 800310a:	b29b      	uxth	r3, r3
 800310c:	4619      	mov	r1, r3
 800310e:	4610      	mov	r0, r2
 8003110:	f000 fabc 	bl	800368c <LCD_Read_Pixel>
 8003114:	4603      	mov	r3, r0
 8003116:	80fb      	strh	r3, [r7, #6]
		break;
 8003118:	e0d8      	b.n	80032cc <White_Space_Below+0x2f4>
	case 8:
		color = LCD_Read_Pixel(x_pos+25, y_pos+73);
 800311a:	4b5b      	ldr	r3, [pc, #364]	@ (8003288 <White_Space_Below+0x2b0>)
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	3319      	adds	r3, #25
 8003120:	b29a      	uxth	r2, r3
 8003122:	4b5a      	ldr	r3, [pc, #360]	@ (800328c <White_Space_Below+0x2b4>)
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	3349      	adds	r3, #73	@ 0x49
 8003128:	b29b      	uxth	r3, r3
 800312a:	4619      	mov	r1, r3
 800312c:	4610      	mov	r0, r2
 800312e:	f000 faad 	bl	800368c <LCD_Read_Pixel>
 8003132:	4603      	mov	r3, r0
 8003134:	80fb      	strh	r3, [r7, #6]
		break;
 8003136:	e0c9      	b.n	80032cc <White_Space_Below+0x2f4>
	case 9:
		color = LCD_Read_Pixel(x_pos+10, y_pos+49);
 8003138:	4b53      	ldr	r3, [pc, #332]	@ (8003288 <White_Space_Below+0x2b0>)
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	330a      	adds	r3, #10
 800313e:	b29a      	uxth	r2, r3
 8003140:	4b52      	ldr	r3, [pc, #328]	@ (800328c <White_Space_Below+0x2b4>)
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	3331      	adds	r3, #49	@ 0x31
 8003146:	b29b      	uxth	r3, r3
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f000 fa9e 	bl	800368c <LCD_Read_Pixel>
 8003150:	4603      	mov	r3, r0
 8003152:	80fb      	strh	r3, [r7, #6]
		break;
 8003154:	e0ba      	b.n	80032cc <White_Space_Below+0x2f4>
	case 10:
		color = LCD_Read_Pixel(x_pos+10, y_pos+73);
 8003156:	4b4c      	ldr	r3, [pc, #304]	@ (8003288 <White_Space_Below+0x2b0>)
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	330a      	adds	r3, #10
 800315c:	b29a      	uxth	r2, r3
 800315e:	4b4b      	ldr	r3, [pc, #300]	@ (800328c <White_Space_Below+0x2b4>)
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	3349      	adds	r3, #73	@ 0x49
 8003164:	b29b      	uxth	r3, r3
 8003166:	4619      	mov	r1, r3
 8003168:	4610      	mov	r0, r2
 800316a:	f000 fa8f 	bl	800368c <LCD_Read_Pixel>
 800316e:	4603      	mov	r3, r0
 8003170:	80fb      	strh	r3, [r7, #6]
		break;
 8003172:	e0ab      	b.n	80032cc <White_Space_Below+0x2f4>
	case 11:
		color = LCD_Read_Pixel(x_pos+10, y_pos+49);
 8003174:	4b44      	ldr	r3, [pc, #272]	@ (8003288 <White_Space_Below+0x2b0>)
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	330a      	adds	r3, #10
 800317a:	b29a      	uxth	r2, r3
 800317c:	4b43      	ldr	r3, [pc, #268]	@ (800328c <White_Space_Below+0x2b4>)
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	3331      	adds	r3, #49	@ 0x31
 8003182:	b29b      	uxth	r3, r3
 8003184:	4619      	mov	r1, r3
 8003186:	4610      	mov	r0, r2
 8003188:	f000 fa80 	bl	800368c <LCD_Read_Pixel>
 800318c:	4603      	mov	r3, r0
 800318e:	80fb      	strh	r3, [r7, #6]
		break;
 8003190:	e09c      	b.n	80032cc <White_Space_Below+0x2f4>
	case 12:
		color = LCD_Read_Pixel(x_pos+10, y_pos+73);
 8003192:	4b3d      	ldr	r3, [pc, #244]	@ (8003288 <White_Space_Below+0x2b0>)
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	330a      	adds	r3, #10
 8003198:	b29a      	uxth	r2, r3
 800319a:	4b3c      	ldr	r3, [pc, #240]	@ (800328c <White_Space_Below+0x2b4>)
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	3349      	adds	r3, #73	@ 0x49
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	4619      	mov	r1, r3
 80031a4:	4610      	mov	r0, r2
 80031a6:	f000 fa71 	bl	800368c <LCD_Read_Pixel>
 80031aa:	4603      	mov	r3, r0
 80031ac:	80fb      	strh	r3, [r7, #6]
		break;
 80031ae:	e08d      	b.n	80032cc <White_Space_Below+0x2f4>
	case 13:
		color = LCD_Read_Pixel(x_pos+10, y_pos+49);
 80031b0:	4b35      	ldr	r3, [pc, #212]	@ (8003288 <White_Space_Below+0x2b0>)
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	330a      	adds	r3, #10
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	4b34      	ldr	r3, [pc, #208]	@ (800328c <White_Space_Below+0x2b4>)
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	3331      	adds	r3, #49	@ 0x31
 80031be:	b29b      	uxth	r3, r3
 80031c0:	4619      	mov	r1, r3
 80031c2:	4610      	mov	r0, r2
 80031c4:	f000 fa62 	bl	800368c <LCD_Read_Pixel>
 80031c8:	4603      	mov	r3, r0
 80031ca:	80fb      	strh	r3, [r7, #6]
		break;
 80031cc:	e07e      	b.n	80032cc <White_Space_Below+0x2f4>
	case 14:
		color = LCD_Read_Pixel(x_pos+10, y_pos+73);
 80031ce:	4b2e      	ldr	r3, [pc, #184]	@ (8003288 <White_Space_Below+0x2b0>)
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	330a      	adds	r3, #10
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	4b2d      	ldr	r3, [pc, #180]	@ (800328c <White_Space_Below+0x2b4>)
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	3349      	adds	r3, #73	@ 0x49
 80031dc:	b29b      	uxth	r3, r3
 80031de:	4619      	mov	r1, r3
 80031e0:	4610      	mov	r0, r2
 80031e2:	f000 fa53 	bl	800368c <LCD_Read_Pixel>
 80031e6:	4603      	mov	r3, r0
 80031e8:	80fb      	strh	r3, [r7, #6]
		break;
 80031ea:	e06f      	b.n	80032cc <White_Space_Below+0x2f4>
	case 15:
		color = LCD_Read_Pixel(x_pos+10, y_pos+49);
 80031ec:	4b26      	ldr	r3, [pc, #152]	@ (8003288 <White_Space_Below+0x2b0>)
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	330a      	adds	r3, #10
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	4b25      	ldr	r3, [pc, #148]	@ (800328c <White_Space_Below+0x2b4>)
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	3331      	adds	r3, #49	@ 0x31
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f000 fa44 	bl	800368c <LCD_Read_Pixel>
 8003204:	4603      	mov	r3, r0
 8003206:	80fb      	strh	r3, [r7, #6]
		break;
 8003208:	e060      	b.n	80032cc <White_Space_Below+0x2f4>
	case 16:
		color = LCD_Read_Pixel(x_pos+10, y_pos+73);
 800320a:	4b1f      	ldr	r3, [pc, #124]	@ (8003288 <White_Space_Below+0x2b0>)
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	330a      	adds	r3, #10
 8003210:	b29a      	uxth	r2, r3
 8003212:	4b1e      	ldr	r3, [pc, #120]	@ (800328c <White_Space_Below+0x2b4>)
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	3349      	adds	r3, #73	@ 0x49
 8003218:	b29b      	uxth	r3, r3
 800321a:	4619      	mov	r1, r3
 800321c:	4610      	mov	r0, r2
 800321e:	f000 fa35 	bl	800368c <LCD_Read_Pixel>
 8003222:	4603      	mov	r3, r0
 8003224:	80fb      	strh	r3, [r7, #6]
		break;
 8003226:	e051      	b.n	80032cc <White_Space_Below+0x2f4>
	case 17:
		color = LCD_Read_Pixel(x_pos+10, y_pos+49);
 8003228:	4b17      	ldr	r3, [pc, #92]	@ (8003288 <White_Space_Below+0x2b0>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	330a      	adds	r3, #10
 800322e:	b29a      	uxth	r2, r3
 8003230:	4b16      	ldr	r3, [pc, #88]	@ (800328c <White_Space_Below+0x2b4>)
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	3331      	adds	r3, #49	@ 0x31
 8003236:	b29b      	uxth	r3, r3
 8003238:	4619      	mov	r1, r3
 800323a:	4610      	mov	r0, r2
 800323c:	f000 fa26 	bl	800368c <LCD_Read_Pixel>
 8003240:	4603      	mov	r3, r0
 8003242:	80fb      	strh	r3, [r7, #6]
		break;
 8003244:	e042      	b.n	80032cc <White_Space_Below+0x2f4>
	case 18:
		color = LCD_Read_Pixel(x_pos+10, y_pos+49);
 8003246:	4b10      	ldr	r3, [pc, #64]	@ (8003288 <White_Space_Below+0x2b0>)
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	330a      	adds	r3, #10
 800324c:	b29a      	uxth	r2, r3
 800324e:	4b0f      	ldr	r3, [pc, #60]	@ (800328c <White_Space_Below+0x2b4>)
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	3331      	adds	r3, #49	@ 0x31
 8003254:	b29b      	uxth	r3, r3
 8003256:	4619      	mov	r1, r3
 8003258:	4610      	mov	r0, r2
 800325a:	f000 fa17 	bl	800368c <LCD_Read_Pixel>
 800325e:	4603      	mov	r3, r0
 8003260:	80fb      	strh	r3, [r7, #6]
		break;
 8003262:	e033      	b.n	80032cc <White_Space_Below+0x2f4>
	case 19:
		color = LCD_Read_Pixel(x_pos+10, y_pos+73);
 8003264:	4b08      	ldr	r3, [pc, #32]	@ (8003288 <White_Space_Below+0x2b0>)
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	330a      	adds	r3, #10
 800326a:	b29a      	uxth	r2, r3
 800326c:	4b07      	ldr	r3, [pc, #28]	@ (800328c <White_Space_Below+0x2b4>)
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	3349      	adds	r3, #73	@ 0x49
 8003272:	b29b      	uxth	r3, r3
 8003274:	4619      	mov	r1, r3
 8003276:	4610      	mov	r0, r2
 8003278:	f000 fa08 	bl	800368c <LCD_Read_Pixel>
 800327c:	4603      	mov	r3, r0
 800327e:	80fb      	strh	r3, [r7, #6]
		break;
 8003280:	e024      	b.n	80032cc <White_Space_Below+0x2f4>
 8003282:	bf00      	nop
 8003284:	200000bc 	.word	0x200000bc
 8003288:	20000000 	.word	0x20000000
 800328c:	200000b0 	.word	0x200000b0
	case 20:
		color = LCD_Read_Pixel(x_pos+25, y_pos+49);
 8003290:	4b14      	ldr	r3, [pc, #80]	@ (80032e4 <White_Space_Below+0x30c>)
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	3319      	adds	r3, #25
 8003296:	b29a      	uxth	r2, r3
 8003298:	4b13      	ldr	r3, [pc, #76]	@ (80032e8 <White_Space_Below+0x310>)
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	3331      	adds	r3, #49	@ 0x31
 800329e:	b29b      	uxth	r3, r3
 80032a0:	4619      	mov	r1, r3
 80032a2:	4610      	mov	r0, r2
 80032a4:	f000 f9f2 	bl	800368c <LCD_Read_Pixel>
 80032a8:	4603      	mov	r3, r0
 80032aa:	80fb      	strh	r3, [r7, #6]
		break;
 80032ac:	e00e      	b.n	80032cc <White_Space_Below+0x2f4>
	case 21:
		color = LCD_Read_Pixel(x_pos+10, y_pos+73);
 80032ae:	4b0d      	ldr	r3, [pc, #52]	@ (80032e4 <White_Space_Below+0x30c>)
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	330a      	adds	r3, #10
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	4b0c      	ldr	r3, [pc, #48]	@ (80032e8 <White_Space_Below+0x310>)
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	3349      	adds	r3, #73	@ 0x49
 80032bc:	b29b      	uxth	r3, r3
 80032be:	4619      	mov	r1, r3
 80032c0:	4610      	mov	r0, r2
 80032c2:	f000 f9e3 	bl	800368c <LCD_Read_Pixel>
 80032c6:	4603      	mov	r3, r0
 80032c8:	80fb      	strh	r3, [r7, #6]
		break;
 80032ca:	bf00      	nop
	}
	if (color == LCD_COLOR_WHITE) {
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d101      	bne.n	80032da <White_Space_Below+0x302>
		return true;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <White_Space_Below+0x304>
	}
	else {
		return false;
 80032da:	2300      	movs	r3, #0
	}
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000000 	.word	0x20000000
 80032e8:	200000b0 	.word	0x200000b0

080032ec <executeGame>:

bool game_started = false;

void executeGame()
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
	game_started = true;
 80032f0:	4b15      	ldr	r3, [pc, #84]	@ (8003348 <executeGame+0x5c>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
	y_pos = 0;
 80032f6:	4b15      	ldr	r3, [pc, #84]	@ (800334c <executeGame+0x60>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	801a      	strh	r2, [r3, #0]
	x_pos = 120;
 80032fc:	4b14      	ldr	r3, [pc, #80]	@ (8003350 <executeGame+0x64>)
 80032fe:	2278      	movs	r2, #120	@ 0x78
 8003300:	801a      	strh	r2, [r3, #0]
	drawRandomShape();
 8003302:	f7fe fc63 	bl	8001bcc <drawRandomShape>
	while(White_Space_Below() == true)
 8003306:	e017      	b.n	8003338 <executeGame+0x4c>
	{
		moveDownOne();
 8003308:	f7fe feb4 	bl	8002074 <moveDownOne>
		gameDelay(); // make this 3000 for submission
 800330c:	f7fd fa94 	bl	8000838 <gameDelay>
		Row_Check_Delete();
 8003310:	f7ff fd04 	bl	8002d1c <Row_Check_Delete>
		if (row_done == true)
 8003314:	4b0f      	ldr	r3, [pc, #60]	@ (8003354 <executeGame+0x68>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00d      	beq.n	8003338 <executeGame+0x4c>
		{
			HAL_Delay(1000);
 800331c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003320:	f001 fdc2 	bl	8004ea8 <HAL_Delay>
			TIM6_Stop();
 8003324:	f000 fc0c 	bl	8003b40 <TIM6_Stop>
			endGameScreen();
 8003328:	f7fd fb54 	bl	80009d4 <endGameScreen>
			game_started = false;
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <executeGame+0x5c>)
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
			exit(0);
 8003332:	2000      	movs	r0, #0
 8003334:	f005 f982 	bl	800863c <exit>
	while(White_Space_Below() == true)
 8003338:	f7ff fe4e 	bl	8002fd8 <White_Space_Below>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e2      	bne.n	8003308 <executeGame+0x1c>
		}
	}
}
 8003342:	bf00      	nop
 8003344:	bf00      	nop
 8003346:	bd80      	pop	{r7, pc}
 8003348:	200000bf 	.word	0x200000bf
 800334c:	200000b0 	.word	0x200000b0
 8003350:	20000000 	.word	0x20000000
 8003354:	200000be 	.word	0x200000be

08003358 <TIM6_DAC_IRQHandler>:
TIM_HandleTypeDef htim6;
/////////// TIM6 IRQ HANDLER ///////////////
void TIM6_DAC_IRQHandler()
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
	htim6.Instance = TIM6;
 800335c:	4b06      	ldr	r3, [pc, #24]	@ (8003378 <TIM6_DAC_IRQHandler+0x20>)
 800335e:	4a07      	ldr	r2, [pc, #28]	@ (800337c <TIM6_DAC_IRQHandler+0x24>)
 8003360:	601a      	str	r2, [r3, #0]
	HAL_TIM_IRQHandler(&htim6);
 8003362:	4805      	ldr	r0, [pc, #20]	@ (8003378 <TIM6_DAC_IRQHandler+0x20>)
 8003364:	f004 ff87 	bl	8008276 <HAL_TIM_IRQHandler>
	time_seconds++;
 8003368:	4b05      	ldr	r3, [pc, #20]	@ (8003380 <TIM6_DAC_IRQHandler+0x28>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3301      	adds	r3, #1
 800336e:	4a04      	ldr	r2, [pc, #16]	@ (8003380 <TIM6_DAC_IRQHandler+0x28>)
 8003370:	6013      	str	r3, [r2, #0]
}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	200000c0 	.word	0x200000c0
 800337c:	40001000 	.word	0x40001000
 8003380:	200000b8 	.word	0x200000b8

08003384 <LCD_GPIO_Init>:

//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.

void LCD_GPIO_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08c      	sub	sp, #48	@ 0x30
 8003388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	4b5a      	ldr	r3, [pc, #360]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003392:	4a59      	ldr	r2, [pc, #356]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 8003394:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003398:	6453      	str	r3, [r2, #68]	@ 0x44
 800339a:	4b57      	ldr	r3, [pc, #348]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	4b53      	ldr	r3, [pc, #332]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ae:	4a52      	ldr	r2, [pc, #328]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b6:	4b50      	ldr	r3, [pc, #320]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	4b4c      	ldr	r3, [pc, #304]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	4a4b      	ldr	r2, [pc, #300]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 80033cc:	f043 0302 	orr.w	r3, r3, #2
 80033d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033d2:	4b49      	ldr	r3, [pc, #292]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	4b45      	ldr	r3, [pc, #276]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	4a44      	ldr	r2, [pc, #272]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 80033e8:	f043 0304 	orr.w	r3, r3, #4
 80033ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ee:	4b42      	ldr	r3, [pc, #264]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	4b3e      	ldr	r3, [pc, #248]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003402:	4a3d      	ldr	r2, [pc, #244]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 8003404:	f043 0308 	orr.w	r3, r3, #8
 8003408:	6313      	str	r3, [r2, #48]	@ 0x30
 800340a:	4b3b      	ldr	r3, [pc, #236]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	4b37      	ldr	r3, [pc, #220]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341e:	4a36      	ldr	r2, [pc, #216]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 8003420:	f043 0320 	orr.w	r3, r3, #32
 8003424:	6313      	str	r3, [r2, #48]	@ 0x30
 8003426:	4b34      	ldr	r3, [pc, #208]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	607b      	str	r3, [r7, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	603b      	str	r3, [r7, #0]
 8003436:	4b30      	ldr	r3, [pc, #192]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343a:	4a2f      	ldr	r2, [pc, #188]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 800343c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003440:	6313      	str	r3, [r2, #48]	@ 0x30
 8003442:	4b2d      	ldr	r3, [pc, #180]	@ (80034f8 <LCD_GPIO_Init+0x174>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800344e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003452:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800345c:	2302      	movs	r3, #2
 800345e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003460:	230e      	movs	r3, #14
 8003462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003464:	f107 031c 	add.w	r3, r7, #28
 8003468:	4619      	mov	r1, r3
 800346a:	4824      	ldr	r0, [pc, #144]	@ (80034fc <LCD_GPIO_Init+0x178>)
 800346c:	f001 fec8 	bl	8005200 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003470:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003474:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003476:	f107 031c 	add.w	r3, r7, #28
 800347a:	4619      	mov	r1, r3
 800347c:	4820      	ldr	r0, [pc, #128]	@ (8003500 <LCD_GPIO_Init+0x17c>)
 800347e:	f001 febf 	bl	8005200 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003482:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003488:	f107 031c 	add.w	r3, r7, #28
 800348c:	4619      	mov	r1, r3
 800348e:	481d      	ldr	r0, [pc, #116]	@ (8003504 <LCD_GPIO_Init+0x180>)
 8003490:	f001 feb6 	bl	8005200 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003494:	2348      	movs	r3, #72	@ 0x48
 8003496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003498:	f107 031c 	add.w	r3, r7, #28
 800349c:	4619      	mov	r1, r3
 800349e:	481a      	ldr	r0, [pc, #104]	@ (8003508 <LCD_GPIO_Init+0x184>)
 80034a0:	f001 feae 	bl	8005200 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80034a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80034aa:	f107 031c 	add.w	r3, r7, #28
 80034ae:	4619      	mov	r1, r3
 80034b0:	4816      	ldr	r0, [pc, #88]	@ (800350c <LCD_GPIO_Init+0x188>)
 80034b2:	f001 fea5 	bl	8005200 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80034b6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80034ba:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80034bc:	f107 031c 	add.w	r3, r7, #28
 80034c0:	4619      	mov	r1, r3
 80034c2:	4813      	ldr	r0, [pc, #76]	@ (8003510 <LCD_GPIO_Init+0x18c>)
 80034c4:	f001 fe9c 	bl	8005200 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80034c8:	2303      	movs	r3, #3
 80034ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80034cc:	2309      	movs	r3, #9
 80034ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034d0:	f107 031c 	add.w	r3, r7, #28
 80034d4:	4619      	mov	r1, r3
 80034d6:	480a      	ldr	r0, [pc, #40]	@ (8003500 <LCD_GPIO_Init+0x17c>)
 80034d8:	f001 fe92 	bl	8005200 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80034dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80034e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80034e2:	f107 031c 	add.w	r3, r7, #28
 80034e6:	4619      	mov	r1, r3
 80034e8:	4809      	ldr	r0, [pc, #36]	@ (8003510 <LCD_GPIO_Init+0x18c>)
 80034ea:	f001 fe89 	bl	8005200 <HAL_GPIO_Init>
}
 80034ee:	bf00      	nop
 80034f0:	3730      	adds	r7, #48	@ 0x30
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40020000 	.word	0x40020000
 8003500:	40020400 	.word	0x40020400
 8003504:	40020800 	.word	0x40020800
 8003508:	40020c00 	.word	0x40020c00
 800350c:	40021400 	.word	0x40021400
 8003510:	40021800 	.word	0x40021800

08003514 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b090      	sub	sp, #64	@ 0x40
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8003522:	23f0      	movs	r3, #240	@ 0xf0
 8003524:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800352a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800352e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8003530:	2302      	movs	r3, #2
 8003532:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8003534:	23ff      	movs	r3, #255	@ 0xff
 8003536:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800353c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003540:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003542:	2305      	movs	r3, #5
 8003544:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800354c:	4b0f      	ldr	r3, [pc, #60]	@ (800358c <LTCD_Layer_Init+0x78>)
 800354e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8003550:	23f0      	movs	r3, #240	@ 0xf0
 8003552:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8003554:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003558:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 800356c:	79fa      	ldrb	r2, [r7, #7]
 800356e:	f107 030c 	add.w	r3, r7, #12
 8003572:	4619      	mov	r1, r3
 8003574:	4806      	ldr	r0, [pc, #24]	@ (8003590 <LTCD_Layer_Init+0x7c>)
 8003576:	f003 fa09 	bl	800698c <HAL_LTDC_ConfigLayer>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8003580:	f000 fa0a 	bl	8003998 <LCD_Error_Handler>
	}
}
 8003584:	bf00      	nop
 8003586:	3740      	adds	r7, #64	@ 0x40
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	200001e4 	.word	0x200001e4
 8003590:	20000108 	.word	0x20000108

08003594 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8003598:	4b2a      	ldr	r3, [pc, #168]	@ (8003644 <LTCD__Init+0xb0>)
 800359a:	4a2b      	ldr	r2, [pc, #172]	@ (8003648 <LTCD__Init+0xb4>)
 800359c:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800359e:	4b29      	ldr	r3, [pc, #164]	@ (8003644 <LTCD__Init+0xb0>)
 80035a0:	2209      	movs	r2, #9
 80035a2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80035a4:	4b27      	ldr	r3, [pc, #156]	@ (8003644 <LTCD__Init+0xb0>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80035aa:	4b26      	ldr	r3, [pc, #152]	@ (8003644 <LTCD__Init+0xb0>)
 80035ac:	221d      	movs	r2, #29
 80035ae:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80035b0:	4b24      	ldr	r3, [pc, #144]	@ (8003644 <LTCD__Init+0xb0>)
 80035b2:	2203      	movs	r2, #3
 80035b4:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80035b6:	4b23      	ldr	r3, [pc, #140]	@ (8003644 <LTCD__Init+0xb0>)
 80035b8:	f240 120d 	movw	r2, #269	@ 0x10d
 80035bc:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80035be:	4b21      	ldr	r3, [pc, #132]	@ (8003644 <LTCD__Init+0xb0>)
 80035c0:	f240 1243 	movw	r2, #323	@ 0x143
 80035c4:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80035c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003644 <LTCD__Init+0xb0>)
 80035c8:	f240 1217 	movw	r2, #279	@ 0x117
 80035cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80035ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003644 <LTCD__Init+0xb0>)
 80035d0:	f240 1247 	movw	r2, #327	@ 0x147
 80035d4:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80035d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003644 <LTCD__Init+0xb0>)
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80035de:	4b19      	ldr	r3, [pc, #100]	@ (8003644 <LTCD__Init+0xb0>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80035e6:	4b17      	ldr	r3, [pc, #92]	@ (8003644 <LTCD__Init+0xb0>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80035ee:	4b17      	ldr	r3, [pc, #92]	@ (800364c <LTCD__Init+0xb8>)
 80035f0:	2208      	movs	r2, #8
 80035f2:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80035f4:	4b15      	ldr	r3, [pc, #84]	@ (800364c <LTCD__Init+0xb8>)
 80035f6:	22c0      	movs	r2, #192	@ 0xc0
 80035f8:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80035fa:	4b14      	ldr	r3, [pc, #80]	@ (800364c <LTCD__Init+0xb8>)
 80035fc:	2204      	movs	r2, #4
 80035fe:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003600:	4b12      	ldr	r3, [pc, #72]	@ (800364c <LTCD__Init+0xb8>)
 8003602:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003606:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003608:	4810      	ldr	r0, [pc, #64]	@ (800364c <LTCD__Init+0xb8>)
 800360a:	f004 f819 	bl	8007640 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800360e:	4b0d      	ldr	r3, [pc, #52]	@ (8003644 <LTCD__Init+0xb0>)
 8003610:	2200      	movs	r2, #0
 8003612:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003614:	4b0b      	ldr	r3, [pc, #44]	@ (8003644 <LTCD__Init+0xb0>)
 8003616:	2200      	movs	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800361a:	4b0a      	ldr	r3, [pc, #40]	@ (8003644 <LTCD__Init+0xb0>)
 800361c:	2200      	movs	r2, #0
 800361e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003620:	4b08      	ldr	r3, [pc, #32]	@ (8003644 <LTCD__Init+0xb0>)
 8003622:	2200      	movs	r2, #0
 8003624:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8003626:	f7ff fead 	bl	8003384 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800362a:	4806      	ldr	r0, [pc, #24]	@ (8003644 <LTCD__Init+0xb0>)
 800362c:	f003 f8de 	bl	80067ec <HAL_LTDC_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8003636:	f000 f9af 	bl	8003998 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800363a:	f000 fa8b 	bl	8003b54 <ili9341_Init>
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20000108 	.word	0x20000108
 8003648:	40016800 	.word	0x40016800
 800364c:	200001b0 	.word	0x200001b0

08003650 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	80fb      	strh	r3, [r7, #6]
 800365a:	460b      	mov	r3, r1
 800365c:	80bb      	strh	r3, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8003662:	88ba      	ldrh	r2, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	461a      	mov	r2, r3
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	4413      	add	r3, r2
 8003672:	4905      	ldr	r1, [pc, #20]	@ (8003688 <LCD_Draw_Pixel+0x38>)
 8003674:	887a      	ldrh	r2, [r7, #2]
 8003676:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	200001e4 	.word	0x200001e4

0800368c <LCD_Read_Pixel>:

uint16_t LCD_Read_Pixel(uint16_t x, uint16_t y)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	460a      	mov	r2, r1
 8003696:	80fb      	strh	r3, [r7, #6]
 8003698:	4613      	mov	r3, r2
 800369a:	80bb      	strh	r3, [r7, #4]
	return frameBuffer[y*LCD_PIXEL_WIDTH+x];
 800369c:	88ba      	ldrh	r2, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	461a      	mov	r2, r3
 80036a8:	88fb      	ldrh	r3, [r7, #6]
 80036aa:	4413      	add	r3, r2
 80036ac:	4a04      	ldr	r2, [pc, #16]	@ (80036c0 <LCD_Read_Pixel+0x34>)
 80036ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	200001e4 	.word	0x200001e4

080036c4 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80036c4:	b590      	push	{r4, r7, lr}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4604      	mov	r4, r0
 80036cc:	4608      	mov	r0, r1
 80036ce:	4611      	mov	r1, r2
 80036d0:	461a      	mov	r2, r3
 80036d2:	4623      	mov	r3, r4
 80036d4:	80fb      	strh	r3, [r7, #6]
 80036d6:	4603      	mov	r3, r0
 80036d8:	80bb      	strh	r3, [r7, #4]
 80036da:	460b      	mov	r3, r1
 80036dc:	807b      	strh	r3, [r7, #2]
 80036de:	4613      	mov	r3, r2
 80036e0:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80036e2:	2300      	movs	r3, #0
 80036e4:	81fb      	strh	r3, [r7, #14]
 80036e6:	e00b      	b.n	8003700 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 80036e8:	89fa      	ldrh	r2, [r7, #14]
 80036ea:	88bb      	ldrh	r3, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	b299      	uxth	r1, r3
 80036f0:	883a      	ldrh	r2, [r7, #0]
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ffab 	bl	8003650 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80036fa:	89fb      	ldrh	r3, [r7, #14]
 80036fc:	3301      	adds	r3, #1
 80036fe:	81fb      	strh	r3, [r7, #14]
 8003700:	89fa      	ldrh	r2, [r7, #14]
 8003702:	887b      	ldrh	r3, [r7, #2]
 8003704:	429a      	cmp	r2, r3
 8003706:	d3ef      	bcc.n	80036e8 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	bd90      	pop	{r4, r7, pc}

08003712 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8003712:	b590      	push	{r4, r7, lr}
 8003714:	b085      	sub	sp, #20
 8003716:	af00      	add	r7, sp, #0
 8003718:	4604      	mov	r4, r0
 800371a:	4608      	mov	r0, r1
 800371c:	4611      	mov	r1, r2
 800371e:	461a      	mov	r2, r3
 8003720:	4623      	mov	r3, r4
 8003722:	80fb      	strh	r3, [r7, #6]
 8003724:	4603      	mov	r3, r0
 8003726:	80bb      	strh	r3, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]
 800372c:	4613      	mov	r3, r2
 800372e:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8003730:	2300      	movs	r3, #0
 8003732:	81fb      	strh	r3, [r7, #14]
 8003734:	e00b      	b.n	800374e <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 8003736:	88fa      	ldrh	r2, [r7, #6]
 8003738:	89fb      	ldrh	r3, [r7, #14]
 800373a:	4413      	add	r3, r2
 800373c:	b29b      	uxth	r3, r3
 800373e:	883a      	ldrh	r2, [r7, #0]
 8003740:	88b9      	ldrh	r1, [r7, #4]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff ff84 	bl	8003650 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8003748:	89fb      	ldrh	r3, [r7, #14]
 800374a:	3301      	adds	r3, #1
 800374c:	81fb      	strh	r3, [r7, #14]
 800374e:	89fa      	ldrh	r2, [r7, #14]
 8003750:	887b      	ldrh	r3, [r7, #2]
 8003752:	429a      	cmp	r2, r3
 8003754:	d3ef      	bcc.n	8003736 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8003756:	bf00      	nop
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	bd90      	pop	{r4, r7, pc}

08003760 <LCD_Clear>:


void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	460a      	mov	r2, r1
 800376a:	71fb      	strb	r3, [r7, #7]
 800376c:	4613      	mov	r3, r2
 800376e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10e      	bne.n	8003794 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	e007      	b.n	800378c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 800377c:	4908      	ldr	r1, [pc, #32]	@ (80037a0 <LCD_Clear+0x40>)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	88ba      	ldrh	r2, [r7, #4]
 8003782:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3301      	adds	r3, #1
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8003792:	d3f3      	bcc.n	800377c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	200001e4 	.word	0x200001e4

080037a4 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80037ae:	4a04      	ldr	r2, [pc, #16]	@ (80037c0 <LCD_SetTextColor+0x1c>)
 80037b0:	88fb      	ldrh	r3, [r7, #6]
 80037b2:	8013      	strh	r3, [r2, #0]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	20000002 	.word	0x20000002

080037c4 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80037cc:	4a04      	ldr	r2, [pc, #16]	@ (80037e0 <LCD_SetFont+0x1c>)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6013      	str	r3, [r2, #0]
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	200001e0 	.word	0x200001e0

080037e4 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	603a      	str	r2, [r7, #0]
 80037ee:	80fb      	strh	r3, [r7, #6]
 80037f0:	460b      	mov	r3, r1
 80037f2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	2300      	movs	r3, #0
 80037fa:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e04c      	b.n	800389c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8003802:	2300      	movs	r3, #0
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	e03f      	b.n	8003888 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	4413      	add	r3, r2
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	4619      	mov	r1, r3
 8003814:	4b27      	ldr	r3, [pc, #156]	@ (80038b4 <LCD_Draw_Char+0xd0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	889b      	ldrh	r3, [r3, #4]
 800381a:	4a27      	ldr	r2, [pc, #156]	@ (80038b8 <LCD_Draw_Char+0xd4>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	08db      	lsrs	r3, r3, #3
 8003822:	b29b      	uxth	r3, r3
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	2280      	movs	r2, #128	@ 0x80
 8003828:	409a      	lsls	r2, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	fa42 f303 	asr.w	r3, r2, r3
 8003830:	400b      	ands	r3, r1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d104      	bne.n	8003840 <LCD_Draw_Char+0x5c>
 8003836:	4b1f      	ldr	r3, [pc, #124]	@ (80038b4 <LCD_Draw_Char+0xd0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	889b      	ldrh	r3, [r3, #4]
 800383c:	2b0c      	cmp	r3, #12
 800383e:	d920      	bls.n	8003882 <LCD_Draw_Char+0x9e>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	4413      	add	r3, r2
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	fa42 f303 	asr.w	r3, r2, r3
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d104      	bne.n	8003864 <LCD_Draw_Char+0x80>
 800385a:	4b16      	ldr	r3, [pc, #88]	@ (80038b4 <LCD_Draw_Char+0xd0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	889b      	ldrh	r3, [r3, #4]
 8003860:	2b0c      	cmp	r3, #12
 8003862:	d80e      	bhi.n	8003882 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	b29a      	uxth	r2, r3
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	4413      	add	r3, r2
 800386c:	b298      	uxth	r0, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	b29a      	uxth	r2, r3
 8003872:	88bb      	ldrh	r3, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	b29b      	uxth	r3, r3
 8003878:	4a10      	ldr	r2, [pc, #64]	@ (80038bc <LCD_Draw_Char+0xd8>)
 800387a:	8812      	ldrh	r2, [r2, #0]
 800387c:	4619      	mov	r1, r3
 800387e:	f7ff fee7 	bl	8003650 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	3301      	adds	r3, #1
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	4b0a      	ldr	r3, [pc, #40]	@ (80038b4 <LCD_Draw_Char+0xd0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	889b      	ldrh	r3, [r3, #4]
 800388e:	461a      	mov	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4293      	cmp	r3, r2
 8003894:	d3b8      	bcc.n	8003808 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3301      	adds	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <LCD_Draw_Char+0xd0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	88db      	ldrh	r3, [r3, #6]
 80038a2:	461a      	mov	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d3ab      	bcc.n	8003802 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	200001e0 	.word	0x200001e0
 80038b8:	aaaaaaab 	.word	0xaaaaaaab
 80038bc:	20000002 	.word	0x20000002

080038c0 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	80fb      	strh	r3, [r7, #6]
 80038ca:	460b      	mov	r3, r1
 80038cc:	80bb      	strh	r3, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	70fb      	strb	r3, [r7, #3]
	  Ascii -= 32;
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	3b20      	subs	r3, #32
 80038d6:	70fb      	strb	r3, [r7, #3]
	  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 80038d8:	4b09      	ldr	r3, [pc, #36]	@ (8003900 <LCD_DisplayChar+0x40>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	78fb      	ldrb	r3, [r7, #3]
 80038e0:	4907      	ldr	r1, [pc, #28]	@ (8003900 <LCD_DisplayChar+0x40>)
 80038e2:	6809      	ldr	r1, [r1, #0]
 80038e4:	88c9      	ldrh	r1, [r1, #6]
 80038e6:	fb01 f303 	mul.w	r3, r1, r3
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	441a      	add	r2, r3
 80038ee:	88b9      	ldrh	r1, [r7, #4]
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff ff76 	bl	80037e4 <LCD_Draw_Char>
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	200001e0 	.word	0x200001e0

08003904 <drawSquare>:
 */

/* ALL SHAPES DRAWN HERE
 */
void drawSquare(uint16_t x, uint16_t y, uint16_t color) // x - distance from left? y - distance from bottom?
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	80fb      	strh	r3, [r7, #6]
 800390e:	460b      	mov	r3, r1
 8003910:	80bb      	strh	r3, [r7, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	807b      	strh	r3, [r7, #2]
	LCD_Draw_Horizontal_Line(x, y, BLOCK_SIDE_LENGTH, LCD_COLOR_BLACK);
 8003916:	88b9      	ldrh	r1, [r7, #4]
 8003918:	88f8      	ldrh	r0, [r7, #6]
 800391a:	2300      	movs	r3, #0
 800391c:	2218      	movs	r2, #24
 800391e:	f7ff fef8 	bl	8003712 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(x, y + (BLOCK_SIDE_LENGTH - 1), BLOCK_SIDE_LENGTH, LCD_COLOR_BLACK);
 8003922:	88bb      	ldrh	r3, [r7, #4]
 8003924:	3317      	adds	r3, #23
 8003926:	b299      	uxth	r1, r3
 8003928:	88f8      	ldrh	r0, [r7, #6]
 800392a:	2300      	movs	r3, #0
 800392c:	2218      	movs	r2, #24
 800392e:	f7ff fef0 	bl	8003712 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Vertical_Line(x, y, BLOCK_SIDE_LENGTH, LCD_COLOR_BLACK);
 8003932:	88b9      	ldrh	r1, [r7, #4]
 8003934:	88f8      	ldrh	r0, [r7, #6]
 8003936:	2300      	movs	r3, #0
 8003938:	2218      	movs	r2, #24
 800393a:	f7ff fec3 	bl	80036c4 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(x + (BLOCK_SIDE_LENGTH - 1), y, BLOCK_SIDE_LENGTH, LCD_COLOR_BLACK);
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	3317      	adds	r3, #23
 8003942:	b298      	uxth	r0, r3
 8003944:	88b9      	ldrh	r1, [r7, #4]
 8003946:	2300      	movs	r3, #0
 8003948:	2218      	movs	r2, #24
 800394a:	f7ff febb 	bl	80036c4 <LCD_Draw_Vertical_Line>
	 for (uint16_t i = x+1; i < ((BLOCK_SIDE_LENGTH - 1) + x); i++)
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	3301      	adds	r3, #1
 8003952:	81fb      	strh	r3, [r7, #14]
 8003954:	e015      	b.n	8003982 <drawSquare+0x7e>
	  {
		 for (uint16_t j = y+1; j < ((BLOCK_SIDE_LENGTH - 1) + y); j++)
 8003956:	88bb      	ldrh	r3, [r7, #4]
 8003958:	3301      	adds	r3, #1
 800395a:	81bb      	strh	r3, [r7, #12]
 800395c:	e008      	b.n	8003970 <drawSquare+0x6c>
		 {
			 LCD_Draw_Pixel(i, j, color);
 800395e:	887a      	ldrh	r2, [r7, #2]
 8003960:	89b9      	ldrh	r1, [r7, #12]
 8003962:	89fb      	ldrh	r3, [r7, #14]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fe73 	bl	8003650 <LCD_Draw_Pixel>
		 for (uint16_t j = y+1; j < ((BLOCK_SIDE_LENGTH - 1) + y); j++)
 800396a:	89bb      	ldrh	r3, [r7, #12]
 800396c:	3301      	adds	r3, #1
 800396e:	81bb      	strh	r3, [r7, #12]
 8003970:	88bb      	ldrh	r3, [r7, #4]
 8003972:	f103 0216 	add.w	r2, r3, #22
 8003976:	89bb      	ldrh	r3, [r7, #12]
 8003978:	429a      	cmp	r2, r3
 800397a:	daf0      	bge.n	800395e <drawSquare+0x5a>
	 for (uint16_t i = x+1; i < ((BLOCK_SIDE_LENGTH - 1) + x); i++)
 800397c:	89fb      	ldrh	r3, [r7, #14]
 800397e:	3301      	adds	r3, #1
 8003980:	81fb      	strh	r3, [r7, #14]
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	f103 0216 	add.w	r2, r3, #22
 8003988:	89fb      	ldrh	r3, [r7, #14]
 800398a:	429a      	cmp	r2, r3
 800398c:	dae3      	bge.n	8003956 <drawSquare+0x52>
		 }
	  }
}
 800398e:	bf00      	nop
 8003990:	bf00      	nop
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800399c:	b672      	cpsid	i
}
 800399e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039a0:	bf00      	nop
 80039a2:	e7fd      	b.n	80039a0 <LCD_Error_Handler+0x8>

080039a4 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 80039a8:	f000 feda 	bl	8004760 <STMPE811_Init>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d001      	beq.n	80039b6 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 80039b2:	bf00      	nop
 80039b4:	e7fd      	b.n	80039b2 <InitializeLCDTouch+0xe>
  }
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}

080039ba <ReadRegisterFromTouchModule>:
{
	STMPE811_DetermineTouchPosition(touchStruct);
}

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4603      	mov	r3, r0
 80039c2:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 ff91 	bl	80048ee <STMPE811_Read>
 80039cc:	4603      	mov	r3, r0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	4603      	mov	r3, r0
 80039de:	460a      	mov	r2, r1
 80039e0:	71fb      	strb	r3, [r7, #7]
 80039e2:	4613      	mov	r3, r2
 80039e4:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 80039e6:	79ba      	ldrb	r2, [r7, #6]
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	4611      	mov	r1, r2
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 ff8f 	bl	8004910 <STMPE811_Write>
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <RNG_Init>:
#include "RNG.h"

static RNG_HandleTypeDef hrng;

void RNG_Init()
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
	__HAL_RCC_RNG_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	4b0f      	ldr	r3, [pc, #60]	@ (8003a44 <RNG_Init+0x48>)
 8003a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8003a44 <RNG_Init+0x48>)
 8003a0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a10:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a12:	4b0c      	ldr	r3, [pc, #48]	@ (8003a44 <RNG_Init+0x48>)
 8003a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a1a:	607b      	str	r3, [r7, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
	hrng.Instance = RNG;
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a48 <RNG_Init+0x4c>)
 8003a20:	4a0a      	ldr	r2, [pc, #40]	@ (8003a4c <RNG_Init+0x50>)
 8003a22:	601a      	str	r2, [r3, #0]
	HAL_RNG_Init(&hrng);
 8003a24:	4808      	ldr	r0, [pc, #32]	@ (8003a48 <RNG_Init+0x4c>)
 8003a26:	f003 ffcb 	bl	80079c0 <HAL_RNG_Init>
	if (HAL_RNG_Init(&hrng) != HAL_OK) // error handler
 8003a2a:	4807      	ldr	r0, [pc, #28]	@ (8003a48 <RNG_Init+0x4c>)
 8003a2c:	f003 ffc8 	bl	80079c0 <HAL_RNG_Init>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <RNG_Init+0x3e>
	{
		while(1);
 8003a36:	bf00      	nop
 8003a38:	e7fd      	b.n	8003a36 <RNG_Init+0x3a>
	}
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800
 8003a48:	200259e4 	.word	0x200259e4
 8003a4c:	50060800 	.word	0x50060800

08003a50 <generateRandomNum>:
	HAL_RNG_DeInit(&hrng);
	__HAL_RCC_RNG_CLK_DISABLE();
}

uint32_t generateRandomNum()
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
	if (HAL_RNG_GetState(&hrng) != HAL_RNG_STATE_READY)
 8003a56:	480c      	ldr	r0, [pc, #48]	@ (8003a88 <generateRandomNum+0x38>)
 8003a58:	f004 f832 	bl	8007ac0 <HAL_RNG_GetState>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d001      	beq.n	8003a66 <generateRandomNum+0x16>
	{
		while(1);
 8003a62:	bf00      	nop
 8003a64:	e7fd      	b.n	8003a62 <generateRandomNum+0x12>
	}
	uint32_t randomNum = 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	607b      	str	r3, [r7, #4]
	HAL_RNG_GenerateRandomNumber(&hrng, &randomNum);
 8003a6a:	1d3b      	adds	r3, r7, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4806      	ldr	r0, [pc, #24]	@ (8003a88 <generateRandomNum+0x38>)
 8003a70:	f003 ffd0 	bl	8007a14 <HAL_RNG_GenerateRandomNumber>
	printf("%lu", randomNum);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4619      	mov	r1, r3
 8003a78:	4804      	ldr	r0, [pc, #16]	@ (8003a8c <generateRandomNum+0x3c>)
 8003a7a:	f004 ff0f 	bl	800889c <iprintf>
	return (randomNum);
 8003a7e:	687b      	ldr	r3, [r7, #4]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	200259e4 	.word	0x200259e4
 8003a8c:	080095c8 	.word	0x080095c8

08003a90 <getScheduledEvents>:
#include "Scheduler.h"

static uint32_t scheduledEvents;

int getScheduledEvents()
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8003a94:	4b03      	ldr	r3, [pc, #12]	@ (8003aa4 <getScheduledEvents+0x14>)
 8003a96:	681b      	ldr	r3, [r3, #0]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	200259f4 	.word	0x200259f4

08003aa8 <addSchedulerEvent>:

void addSchedulerEvent(uint32_t event_scheduled)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	scheduledEvents |= (event_scheduled);
 8003ab0:	4b05      	ldr	r3, [pc, #20]	@ (8003ac8 <addSchedulerEvent+0x20>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	4a03      	ldr	r2, [pc, #12]	@ (8003ac8 <addSchedulerEvent+0x20>)
 8003aba:	6013      	str	r3, [r2, #0]
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	200259f4 	.word	0x200259f4

08003acc <TIM6_Init>:
#include "Timer_Driver.h"

TIM_HandleTypeDef htim;

void TIM6_Init()
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM6_CLK_ENABLE();
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	607b      	str	r3, [r7, #4]
 8003ad6:	4b12      	ldr	r3, [pc, #72]	@ (8003b20 <TIM6_Init+0x54>)
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	4a11      	ldr	r2, [pc, #68]	@ (8003b20 <TIM6_Init+0x54>)
 8003adc:	f043 0310 	orr.w	r3, r3, #16
 8003ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b20 <TIM6_Init+0x54>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	607b      	str	r3, [r7, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
	htim.Instance = TIM6;
 8003aee:	4b0d      	ldr	r3, [pc, #52]	@ (8003b24 <TIM6_Init+0x58>)
 8003af0:	4a0d      	ldr	r2, [pc, #52]	@ (8003b28 <TIM6_Init+0x5c>)
 8003af2:	601a      	str	r2, [r3, #0]
	htim.Init.Prescaler = 265;
 8003af4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <TIM6_Init+0x58>)
 8003af6:	f240 1209 	movw	r2, #265	@ 0x109
 8003afa:	605a      	str	r2, [r3, #4]
	htim.Init.Period = 59999;
 8003afc:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <TIM6_Init+0x58>)
 8003afe:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8003b02:	60da      	str	r2, [r3, #12]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b04:	4b07      	ldr	r3, [pc, #28]	@ (8003b24 <TIM6_Init+0x58>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b0a:	4b06      	ldr	r3, [pc, #24]	@ (8003b24 <TIM6_Init+0x58>)
 8003b0c:	2280      	movs	r2, #128	@ 0x80
 8003b0e:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim);
 8003b10:	4804      	ldr	r0, [pc, #16]	@ (8003b24 <TIM6_Init+0x58>)
 8003b12:	f004 fac1 	bl	8008098 <HAL_TIM_Base_Init>
}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800
 8003b24:	200259f8 	.word	0x200259f8
 8003b28:	40001000 	.word	0x40001000

08003b2c <TIM6_Start>:

void TIM6_Start()
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim);
 8003b30:	4802      	ldr	r0, [pc, #8]	@ (8003b3c <TIM6_Start+0x10>)
 8003b32:	f004 fb01 	bl	8008138 <HAL_TIM_Base_Start_IT>
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	200259f8 	.word	0x200259f8

08003b40 <TIM6_Stop>:

void TIM6_Stop()
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim);
 8003b44:	4802      	ldr	r0, [pc, #8]	@ (8003b50 <TIM6_Stop+0x10>)
 8003b46:	f004 fb67 	bl	8008218 <HAL_TIM_Base_Stop_IT>
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	200259f8 	.word	0x200259f8

08003b54 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003b58:	f000 f9fe 	bl	8003f58 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8003b5c:	20ca      	movs	r0, #202	@ 0xca
 8003b5e:	f000 f943 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8003b62:	20c3      	movs	r0, #195	@ 0xc3
 8003b64:	f000 f94d 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8003b68:	2008      	movs	r0, #8
 8003b6a:	f000 f94a 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8003b6e:	2050      	movs	r0, #80	@ 0x50
 8003b70:	f000 f947 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8003b74:	20cf      	movs	r0, #207	@ 0xcf
 8003b76:	f000 f937 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f000 f941 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8003b80:	20c1      	movs	r0, #193	@ 0xc1
 8003b82:	f000 f93e 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8003b86:	2030      	movs	r0, #48	@ 0x30
 8003b88:	f000 f93b 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8003b8c:	20ed      	movs	r0, #237	@ 0xed
 8003b8e:	f000 f92b 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8003b92:	2064      	movs	r0, #100	@ 0x64
 8003b94:	f000 f935 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8003b98:	2003      	movs	r0, #3
 8003b9a:	f000 f932 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8003b9e:	2012      	movs	r0, #18
 8003ba0:	f000 f92f 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8003ba4:	2081      	movs	r0, #129	@ 0x81
 8003ba6:	f000 f92c 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8003baa:	20e8      	movs	r0, #232	@ 0xe8
 8003bac:	f000 f91c 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8003bb0:	2085      	movs	r0, #133	@ 0x85
 8003bb2:	f000 f926 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	f000 f923 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8003bbc:	2078      	movs	r0, #120	@ 0x78
 8003bbe:	f000 f920 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8003bc2:	20cb      	movs	r0, #203	@ 0xcb
 8003bc4:	f000 f910 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8003bc8:	2039      	movs	r0, #57	@ 0x39
 8003bca:	f000 f91a 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8003bce:	202c      	movs	r0, #44	@ 0x2c
 8003bd0:	f000 f917 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	f000 f914 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8003bda:	2034      	movs	r0, #52	@ 0x34
 8003bdc:	f000 f911 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8003be0:	2002      	movs	r0, #2
 8003be2:	f000 f90e 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8003be6:	20f7      	movs	r0, #247	@ 0xf7
 8003be8:	f000 f8fe 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8003bec:	2020      	movs	r0, #32
 8003bee:	f000 f908 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8003bf2:	20ea      	movs	r0, #234	@ 0xea
 8003bf4:	f000 f8f8 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	f000 f902 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f000 f8ff 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8003c04:	20b1      	movs	r0, #177	@ 0xb1
 8003c06:	f000 f8ef 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	f000 f8f9 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8003c10:	201b      	movs	r0, #27
 8003c12:	f000 f8f6 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8003c16:	20b6      	movs	r0, #182	@ 0xb6
 8003c18:	f000 f8e6 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003c1c:	200a      	movs	r0, #10
 8003c1e:	f000 f8f0 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8003c22:	20a2      	movs	r0, #162	@ 0xa2
 8003c24:	f000 f8ed 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8003c28:	20c0      	movs	r0, #192	@ 0xc0
 8003c2a:	f000 f8dd 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8003c2e:	2010      	movs	r0, #16
 8003c30:	f000 f8e7 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8003c34:	20c1      	movs	r0, #193	@ 0xc1
 8003c36:	f000 f8d7 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8003c3a:	2010      	movs	r0, #16
 8003c3c:	f000 f8e1 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8003c40:	20c5      	movs	r0, #197	@ 0xc5
 8003c42:	f000 f8d1 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8003c46:	2045      	movs	r0, #69	@ 0x45
 8003c48:	f000 f8db 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8003c4c:	2015      	movs	r0, #21
 8003c4e:	f000 f8d8 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8003c52:	20c7      	movs	r0, #199	@ 0xc7
 8003c54:	f000 f8c8 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8003c58:	2090      	movs	r0, #144	@ 0x90
 8003c5a:	f000 f8d2 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8003c5e:	2036      	movs	r0, #54	@ 0x36
 8003c60:	f000 f8c2 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8003c64:	20c8      	movs	r0, #200	@ 0xc8
 8003c66:	f000 f8cc 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8003c6a:	20f2      	movs	r0, #242	@ 0xf2
 8003c6c:	f000 f8bc 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003c70:	2000      	movs	r0, #0
 8003c72:	f000 f8c6 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8003c76:	20b0      	movs	r0, #176	@ 0xb0
 8003c78:	f000 f8b6 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8003c7c:	20c2      	movs	r0, #194	@ 0xc2
 8003c7e:	f000 f8c0 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8003c82:	20b6      	movs	r0, #182	@ 0xb6
 8003c84:	f000 f8b0 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003c88:	200a      	movs	r0, #10
 8003c8a:	f000 f8ba 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8003c8e:	20a7      	movs	r0, #167	@ 0xa7
 8003c90:	f000 f8b7 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8003c94:	2027      	movs	r0, #39	@ 0x27
 8003c96:	f000 f8b4 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8003c9a:	2004      	movs	r0, #4
 8003c9c:	f000 f8b1 	bl	8003e02 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8003ca0:	202a      	movs	r0, #42	@ 0x2a
 8003ca2:	f000 f8a1 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	f000 f8ab 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003cac:	2000      	movs	r0, #0
 8003cae:	f000 f8a8 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f000 f8a5 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8003cb8:	20ef      	movs	r0, #239	@ 0xef
 8003cba:	f000 f8a2 	bl	8003e02 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8003cbe:	202b      	movs	r0, #43	@ 0x2b
 8003cc0:	f000 f892 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f000 f89c 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f000 f899 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	f000 f896 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8003cd6:	203f      	movs	r0, #63	@ 0x3f
 8003cd8:	f000 f893 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8003cdc:	20f6      	movs	r0, #246	@ 0xf6
 8003cde:	f000 f883 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	f000 f88d 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003ce8:	2000      	movs	r0, #0
 8003cea:	f000 f88a 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8003cee:	2006      	movs	r0, #6
 8003cf0:	f000 f887 	bl	8003e02 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8003cf4:	202c      	movs	r0, #44	@ 0x2c
 8003cf6:	f000 f877 	bl	8003de8 <ili9341_Write_Reg>
  LCD_Delay(200);
 8003cfa:	20c8      	movs	r0, #200	@ 0xc8
 8003cfc:	f000 f9e8 	bl	80040d0 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8003d00:	2026      	movs	r0, #38	@ 0x26
 8003d02:	f000 f871 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003d06:	2001      	movs	r0, #1
 8003d08:	f000 f87b 	bl	8003e02 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8003d0c:	20e0      	movs	r0, #224	@ 0xe0
 8003d0e:	f000 f86b 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8003d12:	200f      	movs	r0, #15
 8003d14:	f000 f875 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8003d18:	2029      	movs	r0, #41	@ 0x29
 8003d1a:	f000 f872 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8003d1e:	2024      	movs	r0, #36	@ 0x24
 8003d20:	f000 f86f 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8003d24:	200c      	movs	r0, #12
 8003d26:	f000 f86c 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8003d2a:	200e      	movs	r0, #14
 8003d2c:	f000 f869 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003d30:	2009      	movs	r0, #9
 8003d32:	f000 f866 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8003d36:	204e      	movs	r0, #78	@ 0x4e
 8003d38:	f000 f863 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8003d3c:	2078      	movs	r0, #120	@ 0x78
 8003d3e:	f000 f860 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8003d42:	203c      	movs	r0, #60	@ 0x3c
 8003d44:	f000 f85d 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003d48:	2009      	movs	r0, #9
 8003d4a:	f000 f85a 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8003d4e:	2013      	movs	r0, #19
 8003d50:	f000 f857 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003d54:	2005      	movs	r0, #5
 8003d56:	f000 f854 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8003d5a:	2017      	movs	r0, #23
 8003d5c:	f000 f851 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8003d60:	2011      	movs	r0, #17
 8003d62:	f000 f84e 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003d66:	2000      	movs	r0, #0
 8003d68:	f000 f84b 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8003d6c:	20e1      	movs	r0, #225	@ 0xe1
 8003d6e:	f000 f83b 	bl	8003de8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003d72:	2000      	movs	r0, #0
 8003d74:	f000 f845 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8003d78:	2016      	movs	r0, #22
 8003d7a:	f000 f842 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8003d7e:	201b      	movs	r0, #27
 8003d80:	f000 f83f 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8003d84:	2004      	movs	r0, #4
 8003d86:	f000 f83c 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8003d8a:	2011      	movs	r0, #17
 8003d8c:	f000 f839 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8003d90:	2007      	movs	r0, #7
 8003d92:	f000 f836 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8003d96:	2031      	movs	r0, #49	@ 0x31
 8003d98:	f000 f833 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8003d9c:	2033      	movs	r0, #51	@ 0x33
 8003d9e:	f000 f830 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8003da2:	2042      	movs	r0, #66	@ 0x42
 8003da4:	f000 f82d 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003da8:	2005      	movs	r0, #5
 8003daa:	f000 f82a 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8003dae:	200c      	movs	r0, #12
 8003db0:	f000 f827 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8003db4:	200a      	movs	r0, #10
 8003db6:	f000 f824 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8003dba:	2028      	movs	r0, #40	@ 0x28
 8003dbc:	f000 f821 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8003dc0:	202f      	movs	r0, #47	@ 0x2f
 8003dc2:	f000 f81e 	bl	8003e02 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8003dc6:	200f      	movs	r0, #15
 8003dc8:	f000 f81b 	bl	8003e02 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8003dcc:	2011      	movs	r0, #17
 8003dce:	f000 f80b 	bl	8003de8 <ili9341_Write_Reg>
  LCD_Delay(200);
 8003dd2:	20c8      	movs	r0, #200	@ 0xc8
 8003dd4:	f000 f97c 	bl	80040d0 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8003dd8:	2029      	movs	r0, #41	@ 0x29
 8003dda:	f000 f805 	bl	8003de8 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8003dde:	202c      	movs	r0, #44	@ 0x2c
 8003de0:	f000 f802 	bl	8003de8 <ili9341_Write_Reg>
}
 8003de4:	bf00      	nop
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 f949 	bl	800408c <LCD_IO_WriteReg>
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	4603      	mov	r3, r0
 8003e0a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003e0c:	88fb      	ldrh	r3, [r7, #6]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f91a 	bl	8004048 <LCD_IO_WriteData>
}
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003e20:	4819      	ldr	r0, [pc, #100]	@ (8003e88 <SPI_Init+0x6c>)
 8003e22:	f004 f84f 	bl	8007ec4 <HAL_SPI_GetState>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d12b      	bne.n	8003e84 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8003e2c:	4b16      	ldr	r3, [pc, #88]	@ (8003e88 <SPI_Init+0x6c>)
 8003e2e:	4a17      	ldr	r2, [pc, #92]	@ (8003e8c <SPI_Init+0x70>)
 8003e30:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003e32:	4b15      	ldr	r3, [pc, #84]	@ (8003e88 <SPI_Init+0x6c>)
 8003e34:	2218      	movs	r2, #24
 8003e36:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003e38:	4b13      	ldr	r3, [pc, #76]	@ (8003e88 <SPI_Init+0x6c>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003e3e:	4b12      	ldr	r3, [pc, #72]	@ (8003e88 <SPI_Init+0x6c>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003e44:	4b10      	ldr	r3, [pc, #64]	@ (8003e88 <SPI_Init+0x6c>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e88 <SPI_Init+0x6c>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003e50:	4b0d      	ldr	r3, [pc, #52]	@ (8003e88 <SPI_Init+0x6c>)
 8003e52:	2207      	movs	r2, #7
 8003e54:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003e56:	4b0c      	ldr	r3, [pc, #48]	@ (8003e88 <SPI_Init+0x6c>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e88 <SPI_Init+0x6c>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003e62:	4b09      	ldr	r3, [pc, #36]	@ (8003e88 <SPI_Init+0x6c>)
 8003e64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e68:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003e6a:	4b07      	ldr	r3, [pc, #28]	@ (8003e88 <SPI_Init+0x6c>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003e70:	4b05      	ldr	r3, [pc, #20]	@ (8003e88 <SPI_Init+0x6c>)
 8003e72:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003e76:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8003e78:	4803      	ldr	r0, [pc, #12]	@ (8003e88 <SPI_Init+0x6c>)
 8003e7a:	f000 f833 	bl	8003ee4 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003e7e:	4802      	ldr	r0, [pc, #8]	@ (8003e88 <SPI_Init+0x6c>)
 8003e80:	f003 fe2b 	bl	8007ada <HAL_SPI_Init>
  }
}
 8003e84:	bf00      	nop
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20025a40 	.word	0x20025a40
 8003e8c:	40015000 	.word	0x40015000

08003e90 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8003e9e:	4b09      	ldr	r3, [pc, #36]	@ (8003ec4 <SPI_Write+0x34>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	1db9      	adds	r1, r7, #6
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	4808      	ldr	r0, [pc, #32]	@ (8003ec8 <SPI_Write+0x38>)
 8003ea8:	f003 fec8 	bl	8007c3c <HAL_SPI_Transmit>
 8003eac:	4603      	mov	r3, r0
 8003eae:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8003eb6:	f000 f809 	bl	8003ecc <SPI_Error>
  }
}
 8003eba:	bf00      	nop
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	2000000c 	.word	0x2000000c
 8003ec8:	20025a40 	.word	0x20025a40

08003ecc <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003ed0:	4803      	ldr	r0, [pc, #12]	@ (8003ee0 <SPI_Error+0x14>)
 8003ed2:	f003 fe8b 	bl	8007bec <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8003ed6:	f7ff ffa1 	bl	8003e1c <SPI_Init>
}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20025a40 	.word	0x20025a40

08003ee4 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08a      	sub	sp, #40	@ 0x28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	4b17      	ldr	r3, [pc, #92]	@ (8003f50 <SPI_MspInit+0x6c>)
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef4:	4a16      	ldr	r2, [pc, #88]	@ (8003f50 <SPI_MspInit+0x6c>)
 8003ef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003efa:	6453      	str	r3, [r2, #68]	@ 0x44
 8003efc:	4b14      	ldr	r3, [pc, #80]	@ (8003f50 <SPI_MspInit+0x6c>)
 8003efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	4b10      	ldr	r3, [pc, #64]	@ (8003f50 <SPI_MspInit+0x6c>)
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f10:	4a0f      	ldr	r2, [pc, #60]	@ (8003f50 <SPI_MspInit+0x6c>)
 8003f12:	f043 0320 	orr.w	r3, r3, #32
 8003f16:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f18:	4b0d      	ldr	r3, [pc, #52]	@ (8003f50 <SPI_MspInit+0x6c>)
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8003f24:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003f2e:	2302      	movs	r3, #2
 8003f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003f32:	2301      	movs	r3, #1
 8003f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8003f36:	2305      	movs	r3, #5
 8003f38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8003f3a:	f107 0314 	add.w	r3, r7, #20
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4804      	ldr	r0, [pc, #16]	@ (8003f54 <SPI_MspInit+0x70>)
 8003f42:	f001 f95d 	bl	8005200 <HAL_GPIO_Init>
}
 8003f46:	bf00      	nop
 8003f48:	3728      	adds	r7, #40	@ 0x28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40021400 	.word	0x40021400

08003f58 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8003f5e:	4b36      	ldr	r3, [pc, #216]	@ (8004038 <LCD_IO_Init+0xe0>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d164      	bne.n	8004030 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8003f66:	4b34      	ldr	r3, [pc, #208]	@ (8004038 <LCD_IO_Init+0xe0>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	4b32      	ldr	r3, [pc, #200]	@ (800403c <LCD_IO_Init+0xe4>)
 8003f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f74:	4a31      	ldr	r2, [pc, #196]	@ (800403c <LCD_IO_Init+0xe4>)
 8003f76:	f043 0308 	orr.w	r3, r3, #8
 8003f7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f7c:	4b2f      	ldr	r3, [pc, #188]	@ (800403c <LCD_IO_Init+0xe4>)
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003f88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003f96:	2302      	movs	r3, #2
 8003f98:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003f9a:	f107 030c 	add.w	r3, r7, #12
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4827      	ldr	r0, [pc, #156]	@ (8004040 <LCD_IO_Init+0xe8>)
 8003fa2:	f001 f92d 	bl	8005200 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	607b      	str	r3, [r7, #4]
 8003faa:	4b24      	ldr	r3, [pc, #144]	@ (800403c <LCD_IO_Init+0xe4>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fae:	4a23      	ldr	r2, [pc, #140]	@ (800403c <LCD_IO_Init+0xe4>)
 8003fb0:	f043 0308 	orr.w	r3, r3, #8
 8003fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fb6:	4b21      	ldr	r3, [pc, #132]	@ (800403c <LCD_IO_Init+0xe4>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	607b      	str	r3, [r7, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003fc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003fd4:	f107 030c 	add.w	r3, r7, #12
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4819      	ldr	r0, [pc, #100]	@ (8004040 <LCD_IO_Init+0xe8>)
 8003fdc:	f001 f910 	bl	8005200 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	4b15      	ldr	r3, [pc, #84]	@ (800403c <LCD_IO_Init+0xe4>)
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe8:	4a14      	ldr	r2, [pc, #80]	@ (800403c <LCD_IO_Init+0xe4>)
 8003fea:	f043 0304 	orr.w	r3, r3, #4
 8003fee:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ff0:	4b12      	ldr	r3, [pc, #72]	@ (800403c <LCD_IO_Init+0xe4>)
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	603b      	str	r3, [r7, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8004000:	2301      	movs	r3, #1
 8004002:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004008:	2302      	movs	r3, #2
 800400a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800400c:	f107 030c 	add.w	r3, r7, #12
 8004010:	4619      	mov	r1, r3
 8004012:	480c      	ldr	r0, [pc, #48]	@ (8004044 <LCD_IO_Init+0xec>)
 8004014:	f001 f8f4 	bl	8005200 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8004018:	2200      	movs	r2, #0
 800401a:	2104      	movs	r1, #4
 800401c:	4809      	ldr	r0, [pc, #36]	@ (8004044 <LCD_IO_Init+0xec>)
 800401e:	f001 fba7 	bl	8005770 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8004022:	2201      	movs	r2, #1
 8004024:	2104      	movs	r1, #4
 8004026:	4807      	ldr	r0, [pc, #28]	@ (8004044 <LCD_IO_Init+0xec>)
 8004028:	f001 fba2 	bl	8005770 <HAL_GPIO_WritePin>

    SPI_Init();
 800402c:	f7ff fef6 	bl	8003e1c <SPI_Init>
  }
}
 8004030:	bf00      	nop
 8004032:	3720      	adds	r7, #32
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20025a98 	.word	0x20025a98
 800403c:	40023800 	.word	0x40023800
 8004040:	40020c00 	.word	0x40020c00
 8004044:	40020800 	.word	0x40020800

08004048 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8004052:	2201      	movs	r2, #1
 8004054:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004058:	480a      	ldr	r0, [pc, #40]	@ (8004084 <LCD_IO_WriteData+0x3c>)
 800405a:	f001 fb89 	bl	8005770 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800405e:	2200      	movs	r2, #0
 8004060:	2104      	movs	r1, #4
 8004062:	4809      	ldr	r0, [pc, #36]	@ (8004088 <LCD_IO_WriteData+0x40>)
 8004064:	f001 fb84 	bl	8005770 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff ff10 	bl	8003e90 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004070:	2201      	movs	r2, #1
 8004072:	2104      	movs	r1, #4
 8004074:	4804      	ldr	r0, [pc, #16]	@ (8004088 <LCD_IO_WriteData+0x40>)
 8004076:	f001 fb7b 	bl	8005770 <HAL_GPIO_WritePin>
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40020c00 	.word	0x40020c00
 8004088:	40020800 	.word	0x40020800

0800408c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8004096:	2200      	movs	r2, #0
 8004098:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800409c:	480a      	ldr	r0, [pc, #40]	@ (80040c8 <LCD_IO_WriteReg+0x3c>)
 800409e:	f001 fb67 	bl	8005770 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80040a2:	2200      	movs	r2, #0
 80040a4:	2104      	movs	r1, #4
 80040a6:	4809      	ldr	r0, [pc, #36]	@ (80040cc <LCD_IO_WriteReg+0x40>)
 80040a8:	f001 fb62 	bl	8005770 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff feed 	bl	8003e90 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80040b6:	2201      	movs	r2, #1
 80040b8:	2104      	movs	r1, #4
 80040ba:	4804      	ldr	r0, [pc, #16]	@ (80040cc <LCD_IO_WriteReg+0x40>)
 80040bc:	f001 fb58 	bl	8005770 <HAL_GPIO_WritePin>
}
 80040c0:	bf00      	nop
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40020c00 	.word	0x40020c00
 80040cc:	40020800 	.word	0x40020800

080040d0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fee5 	bl	8004ea8 <HAL_Delay>
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <main>:
  */

int stay_here = 0; // var to prevent skipping over menu screen

int main(void)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
	uint32_t eventsToRun;
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80040ec:	f000 fe6a 	bl	8004dc4 <HAL_Init>

	// The default system configuration function is "suspect" so we need to make our own clock configuration
	// Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
	SystemClockOverride();
 80040f0:	f000 f814 	bl	800411c <SystemClockOverride>
	ApplicationInit(); // Initializes the LCD functionality
 80040f4:	f7fc fa44 	bl	8000580 <ApplicationInit>
	HAL_Delay(1500);
 80040f8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80040fc:	f000 fed4 	bl	8004ea8 <HAL_Delay>
	screenOne();
 8004100:	f7fc fba2 	bl	8000848 <screenOne>
	while (1)
	{
		eventsToRun = getScheduledEvents();
 8004104:	f7ff fcc4 	bl	8003a90 <getScheduledEvents>
 8004108:	4603      	mov	r3, r0
 800410a:	607b      	str	r3, [r7, #4]
		if (eventsToRun & GAME_EVENT)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f6      	beq.n	8004104 <main+0x1e>
		{
			Application_Execute_Game();
 8004116:	f7fc fa53 	bl	80005c0 <Application_Execute_Game>
		eventsToRun = getScheduledEvents();
 800411a:	e7f3      	b.n	8004104 <main+0x1e>

0800411c <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b092      	sub	sp, #72	@ 0x48
 8004120:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004122:	2300      	movs	r3, #0
 8004124:	603b      	str	r3, [r7, #0]
 8004126:	4b1c      	ldr	r3, [pc, #112]	@ (8004198 <SystemClockOverride+0x7c>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412a:	4a1b      	ldr	r2, [pc, #108]	@ (8004198 <SystemClockOverride+0x7c>)
 800412c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004130:	6413      	str	r3, [r2, #64]	@ 0x40
 8004132:	4b19      	ldr	r3, [pc, #100]	@ (8004198 <SystemClockOverride+0x7c>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800413e:	2301      	movs	r3, #1
 8004140:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004142:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004146:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004148:	2302      	movs	r3, #2
 800414a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800414c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004150:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004152:	2308      	movs	r3, #8
 8004154:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004156:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800415a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800415c:	2302      	movs	r3, #2
 800415e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004160:	2307      	movs	r3, #7
 8004162:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004164:	1d3b      	adds	r3, r7, #4
 8004166:	4618      	mov	r0, r3
 8004168:	f002 fde6 	bl	8006d38 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800416c:	230f      	movs	r3, #15
 800416e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004170:	2302      	movs	r3, #2
 8004172:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004174:	2300      	movs	r3, #0
 8004176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004178:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800417c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800417e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004182:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8004184:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004188:	2105      	movs	r1, #5
 800418a:	4618      	mov	r0, r3
 800418c:	f003 f84c 	bl	8007228 <HAL_RCC_ClockConfig>
}
 8004190:	bf00      	nop
 8004192:	3748      	adds	r7, #72	@ 0x48
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40023800 	.word	0x40023800

0800419c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80041a0:	b672      	cpsid	i
}
 80041a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041a4:	bf00      	nop
 80041a6:	e7fd      	b.n	80041a4 <Error_Handler+0x8>

080041a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	607b      	str	r3, [r7, #4]
 80041b2:	4b10      	ldr	r3, [pc, #64]	@ (80041f4 <HAL_MspInit+0x4c>)
 80041b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b6:	4a0f      	ldr	r2, [pc, #60]	@ (80041f4 <HAL_MspInit+0x4c>)
 80041b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80041be:	4b0d      	ldr	r3, [pc, #52]	@ (80041f4 <HAL_MspInit+0x4c>)
 80041c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041c6:	607b      	str	r3, [r7, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	4b09      	ldr	r3, [pc, #36]	@ (80041f4 <HAL_MspInit+0x4c>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	4a08      	ldr	r2, [pc, #32]	@ (80041f4 <HAL_MspInit+0x4c>)
 80041d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041da:	4b06      	ldr	r3, [pc, #24]	@ (80041f4 <HAL_MspInit+0x4c>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80041e6:	2007      	movs	r0, #7
 80041e8:	f000 ff94 	bl	8005114 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40023800 	.word	0x40023800

080041f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08a      	sub	sp, #40	@ 0x28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004200:	f107 0314 	add.w	r3, r7, #20
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	609a      	str	r2, [r3, #8]
 800420c:	60da      	str	r2, [r3, #12]
 800420e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a29      	ldr	r2, [pc, #164]	@ (80042bc <HAL_I2C_MspInit+0xc4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d14b      	bne.n	80042b2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	4b28      	ldr	r3, [pc, #160]	@ (80042c0 <HAL_I2C_MspInit+0xc8>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004222:	4a27      	ldr	r2, [pc, #156]	@ (80042c0 <HAL_I2C_MspInit+0xc8>)
 8004224:	f043 0304 	orr.w	r3, r3, #4
 8004228:	6313      	str	r3, [r2, #48]	@ 0x30
 800422a:	4b25      	ldr	r3, [pc, #148]	@ (80042c0 <HAL_I2C_MspInit+0xc8>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	4b21      	ldr	r3, [pc, #132]	@ (80042c0 <HAL_I2C_MspInit+0xc8>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423e:	4a20      	ldr	r2, [pc, #128]	@ (80042c0 <HAL_I2C_MspInit+0xc8>)
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	6313      	str	r3, [r2, #48]	@ 0x30
 8004246:	4b1e      	ldr	r3, [pc, #120]	@ (80042c0 <HAL_I2C_MspInit+0xc8>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8004252:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004258:	2312      	movs	r3, #18
 800425a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425c:	2300      	movs	r3, #0
 800425e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004260:	2300      	movs	r3, #0
 8004262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004264:	2304      	movs	r3, #4
 8004266:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8004268:	f107 0314 	add.w	r3, r7, #20
 800426c:	4619      	mov	r1, r3
 800426e:	4815      	ldr	r0, [pc, #84]	@ (80042c4 <HAL_I2C_MspInit+0xcc>)
 8004270:	f000 ffc6 	bl	8005200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8004274:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800427a:	2312      	movs	r3, #18
 800427c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004282:	2300      	movs	r3, #0
 8004284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004286:	2304      	movs	r3, #4
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800428a:	f107 0314 	add.w	r3, r7, #20
 800428e:	4619      	mov	r1, r3
 8004290:	480d      	ldr	r0, [pc, #52]	@ (80042c8 <HAL_I2C_MspInit+0xd0>)
 8004292:	f000 ffb5 	bl	8005200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	4b09      	ldr	r3, [pc, #36]	@ (80042c0 <HAL_I2C_MspInit+0xc8>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429e:	4a08      	ldr	r2, [pc, #32]	@ (80042c0 <HAL_I2C_MspInit+0xc8>)
 80042a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80042a6:	4b06      	ldr	r3, [pc, #24]	@ (80042c0 <HAL_I2C_MspInit+0xc8>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80042b2:	bf00      	nop
 80042b4:	3728      	adds	r7, #40	@ 0x28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40005c00 	.word	0x40005c00
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40020800 	.word	0x40020800
 80042c8:	40020000 	.word	0x40020000

080042cc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b09a      	sub	sp, #104	@ 0x68
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	609a      	str	r2, [r3, #8]
 80042e0:	60da      	str	r2, [r3, #12]
 80042e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042e8:	2230      	movs	r2, #48	@ 0x30
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f004 fbbf 	bl	8008a70 <memset>
  if(hltdc->Instance==LTDC)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a81      	ldr	r2, [pc, #516]	@ (80044fc <HAL_LTDC_MspInit+0x230>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	f040 80fa 	bne.w	80044f2 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80042fe:	2308      	movs	r3, #8
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8004302:	2332      	movs	r3, #50	@ 0x32
 8004304:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8004306:	2302      	movs	r3, #2
 8004308:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800430a:	2300      	movs	r3, #0
 800430c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800430e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004312:	4618      	mov	r0, r3
 8004314:	f003 f994 	bl	8007640 <HAL_RCCEx_PeriphCLKConfig>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800431e:	f7ff ff3d 	bl	800419c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	623b      	str	r3, [r7, #32]
 8004326:	4b76      	ldr	r3, [pc, #472]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 8004328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432a:	4a75      	ldr	r2, [pc, #468]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 800432c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004330:	6453      	str	r3, [r2, #68]	@ 0x44
 8004332:	4b73      	ldr	r3, [pc, #460]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 8004334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004336:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800433a:	623b      	str	r3, [r7, #32]
 800433c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
 8004342:	4b6f      	ldr	r3, [pc, #444]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004346:	4a6e      	ldr	r2, [pc, #440]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 8004348:	f043 0320 	orr.w	r3, r3, #32
 800434c:	6313      	str	r3, [r2, #48]	@ 0x30
 800434e:	4b6c      	ldr	r3, [pc, #432]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	61fb      	str	r3, [r7, #28]
 8004358:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800435a:	2300      	movs	r3, #0
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	4b68      	ldr	r3, [pc, #416]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004362:	4a67      	ldr	r2, [pc, #412]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	6313      	str	r3, [r2, #48]	@ 0x30
 800436a:	4b65      	ldr	r3, [pc, #404]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	4b61      	ldr	r3, [pc, #388]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437e:	4a60      	ldr	r2, [pc, #384]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 8004380:	f043 0302 	orr.w	r3, r3, #2
 8004384:	6313      	str	r3, [r2, #48]	@ 0x30
 8004386:	4b5e      	ldr	r3, [pc, #376]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004392:	2300      	movs	r3, #0
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	4b5a      	ldr	r3, [pc, #360]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	4a59      	ldr	r2, [pc, #356]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 800439c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043a2:	4b57      	ldr	r3, [pc, #348]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	4b53      	ldr	r3, [pc, #332]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b6:	4a52      	ldr	r2, [pc, #328]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 80043b8:	f043 0304 	orr.w	r3, r3, #4
 80043bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80043be:	4b50      	ldr	r3, [pc, #320]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	4b4c      	ldr	r3, [pc, #304]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d2:	4a4b      	ldr	r2, [pc, #300]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 80043d4:	f043 0308 	orr.w	r3, r3, #8
 80043d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043da:	4b49      	ldr	r3, [pc, #292]	@ (8004500 <HAL_LTDC_MspInit+0x234>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	60bb      	str	r3, [r7, #8]
 80043e4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80043e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043ea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ec:	2302      	movs	r3, #2
 80043ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f4:	2300      	movs	r3, #0
 80043f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80043f8:	230e      	movs	r3, #14
 80043fa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80043fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004400:	4619      	mov	r1, r3
 8004402:	4840      	ldr	r0, [pc, #256]	@ (8004504 <HAL_LTDC_MspInit+0x238>)
 8004404:	f000 fefc 	bl	8005200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8004408:	f641 0358 	movw	r3, #6232	@ 0x1858
 800440c:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800440e:	2302      	movs	r3, #2
 8004410:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004412:	2300      	movs	r3, #0
 8004414:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004416:	2300      	movs	r3, #0
 8004418:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800441a:	230e      	movs	r3, #14
 800441c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800441e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004422:	4619      	mov	r1, r3
 8004424:	4838      	ldr	r0, [pc, #224]	@ (8004508 <HAL_LTDC_MspInit+0x23c>)
 8004426:	f000 feeb 	bl	8005200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800442a:	2303      	movs	r3, #3
 800442c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800442e:	2302      	movs	r3, #2
 8004430:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004432:	2300      	movs	r3, #0
 8004434:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004436:	2300      	movs	r3, #0
 8004438:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800443a:	2309      	movs	r3, #9
 800443c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800443e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004442:	4619      	mov	r1, r3
 8004444:	4831      	ldr	r0, [pc, #196]	@ (800450c <HAL_LTDC_MspInit+0x240>)
 8004446:	f000 fedb 	bl	8005200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800444a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800444e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004450:	2302      	movs	r3, #2
 8004452:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004454:	2300      	movs	r3, #0
 8004456:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004458:	2300      	movs	r3, #0
 800445a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800445c:	230e      	movs	r3, #14
 800445e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004460:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004464:	4619      	mov	r1, r3
 8004466:	4829      	ldr	r0, [pc, #164]	@ (800450c <HAL_LTDC_MspInit+0x240>)
 8004468:	f000 feca 	bl	8005200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800446c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8004470:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004472:	2302      	movs	r3, #2
 8004474:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004476:	2300      	movs	r3, #0
 8004478:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800447a:	2300      	movs	r3, #0
 800447c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800447e:	230e      	movs	r3, #14
 8004480:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004482:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004486:	4619      	mov	r1, r3
 8004488:	4821      	ldr	r0, [pc, #132]	@ (8004510 <HAL_LTDC_MspInit+0x244>)
 800448a:	f000 feb9 	bl	8005200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800448e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8004492:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004494:	2302      	movs	r3, #2
 8004496:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004498:	2300      	movs	r3, #0
 800449a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800449c:	2300      	movs	r3, #0
 800449e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80044a0:	230e      	movs	r3, #14
 80044a2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80044a8:	4619      	mov	r1, r3
 80044aa:	481a      	ldr	r0, [pc, #104]	@ (8004514 <HAL_LTDC_MspInit+0x248>)
 80044ac:	f000 fea8 	bl	8005200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80044b0:	2348      	movs	r3, #72	@ 0x48
 80044b2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b4:	2302      	movs	r3, #2
 80044b6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044bc:	2300      	movs	r3, #0
 80044be:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80044c0:	230e      	movs	r3, #14
 80044c2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80044c8:	4619      	mov	r1, r3
 80044ca:	4813      	ldr	r0, [pc, #76]	@ (8004518 <HAL_LTDC_MspInit+0x24c>)
 80044cc:	f000 fe98 	bl	8005200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80044d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80044d4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d6:	2302      	movs	r3, #2
 80044d8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044da:	2300      	movs	r3, #0
 80044dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044de:	2300      	movs	r3, #0
 80044e0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80044e2:	2309      	movs	r3, #9
 80044e4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80044e6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80044ea:	4619      	mov	r1, r3
 80044ec:	4808      	ldr	r0, [pc, #32]	@ (8004510 <HAL_LTDC_MspInit+0x244>)
 80044ee:	f000 fe87 	bl	8005200 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80044f2:	bf00      	nop
 80044f4:	3768      	adds	r7, #104	@ 0x68
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40016800 	.word	0x40016800
 8004500:	40023800 	.word	0x40023800
 8004504:	40021400 	.word	0x40021400
 8004508:	40020000 	.word	0x40020000
 800450c:	40020400 	.word	0x40020400
 8004510:	40021800 	.word	0x40021800
 8004514:	40020800 	.word	0x40020800
 8004518:	40020c00 	.word	0x40020c00

0800451c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0b      	ldr	r2, [pc, #44]	@ (8004558 <HAL_RNG_MspInit+0x3c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10d      	bne.n	800454a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <HAL_RNG_MspInit+0x40>)
 8004534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004536:	4a09      	ldr	r2, [pc, #36]	@ (800455c <HAL_RNG_MspInit+0x40>)
 8004538:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800453c:	6353      	str	r3, [r2, #52]	@ 0x34
 800453e:	4b07      	ldr	r3, [pc, #28]	@ (800455c <HAL_RNG_MspInit+0x40>)
 8004540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	50060800 	.word	0x50060800
 800455c:	40023800 	.word	0x40023800

08004560 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	@ 0x28
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004568:	f107 0314 	add.w	r3, r7, #20
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	60da      	str	r2, [r3, #12]
 8004576:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a19      	ldr	r2, [pc, #100]	@ (80045e4 <HAL_SPI_MspInit+0x84>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d12c      	bne.n	80045dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	4b18      	ldr	r3, [pc, #96]	@ (80045e8 <HAL_SPI_MspInit+0x88>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458a:	4a17      	ldr	r2, [pc, #92]	@ (80045e8 <HAL_SPI_MspInit+0x88>)
 800458c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004590:	6453      	str	r3, [r2, #68]	@ 0x44
 8004592:	4b15      	ldr	r3, [pc, #84]	@ (80045e8 <HAL_SPI_MspInit+0x88>)
 8004594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004596:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	4b11      	ldr	r3, [pc, #68]	@ (80045e8 <HAL_SPI_MspInit+0x88>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a6:	4a10      	ldr	r2, [pc, #64]	@ (80045e8 <HAL_SPI_MspInit+0x88>)
 80045a8:	f043 0320 	orr.w	r3, r3, #32
 80045ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80045ae:	4b0e      	ldr	r3, [pc, #56]	@ (80045e8 <HAL_SPI_MspInit+0x88>)
 80045b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80045ba:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80045be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c0:	2302      	movs	r3, #2
 80045c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c8:	2300      	movs	r3, #0
 80045ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80045cc:	2305      	movs	r3, #5
 80045ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045d0:	f107 0314 	add.w	r3, r7, #20
 80045d4:	4619      	mov	r1, r3
 80045d6:	4805      	ldr	r0, [pc, #20]	@ (80045ec <HAL_SPI_MspInit+0x8c>)
 80045d8:	f000 fe12 	bl	8005200 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80045dc:	bf00      	nop
 80045de:	3728      	adds	r7, #40	@ 0x28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40015000 	.word	0x40015000
 80045e8:	40023800 	.word	0x40023800
 80045ec:	40021400 	.word	0x40021400

080045f0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a08      	ldr	r2, [pc, #32]	@ (8004620 <HAL_SPI_MspDeInit+0x30>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d10a      	bne.n	8004618 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8004602:	4b08      	ldr	r3, [pc, #32]	@ (8004624 <HAL_SPI_MspDeInit+0x34>)
 8004604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004606:	4a07      	ldr	r2, [pc, #28]	@ (8004624 <HAL_SPI_MspDeInit+0x34>)
 8004608:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800460c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800460e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8004612:	4805      	ldr	r0, [pc, #20]	@ (8004628 <HAL_SPI_MspDeInit+0x38>)
 8004614:	f000 ffa0 	bl	8005558 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8004618:	bf00      	nop
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40015000 	.word	0x40015000
 8004624:	40023800 	.word	0x40023800
 8004628:	40021400 	.word	0x40021400

0800462c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800463c:	d10e      	bne.n	800465c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	4b1d      	ldr	r3, [pc, #116]	@ (80046b8 <HAL_TIM_Base_MspInit+0x8c>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	4a1c      	ldr	r2, [pc, #112]	@ (80046b8 <HAL_TIM_Base_MspInit+0x8c>)
 8004648:	f043 0301 	orr.w	r3, r3, #1
 800464c:	6413      	str	r3, [r2, #64]	@ 0x40
 800464e:	4b1a      	ldr	r3, [pc, #104]	@ (80046b8 <HAL_TIM_Base_MspInit+0x8c>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800465a:	e026      	b.n	80046aa <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a16      	ldr	r2, [pc, #88]	@ (80046bc <HAL_TIM_Base_MspInit+0x90>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d10e      	bne.n	8004684 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	4b13      	ldr	r3, [pc, #76]	@ (80046b8 <HAL_TIM_Base_MspInit+0x8c>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	4a12      	ldr	r2, [pc, #72]	@ (80046b8 <HAL_TIM_Base_MspInit+0x8c>)
 8004670:	f043 0308 	orr.w	r3, r3, #8
 8004674:	6413      	str	r3, [r2, #64]	@ 0x40
 8004676:	4b10      	ldr	r3, [pc, #64]	@ (80046b8 <HAL_TIM_Base_MspInit+0x8c>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	693b      	ldr	r3, [r7, #16]
}
 8004682:	e012      	b.n	80046aa <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM6)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a0d      	ldr	r2, [pc, #52]	@ (80046c0 <HAL_TIM_Base_MspInit+0x94>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d10d      	bne.n	80046aa <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	4b09      	ldr	r3, [pc, #36]	@ (80046b8 <HAL_TIM_Base_MspInit+0x8c>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	4a08      	ldr	r2, [pc, #32]	@ (80046b8 <HAL_TIM_Base_MspInit+0x8c>)
 8004698:	f043 0310 	orr.w	r3, r3, #16
 800469c:	6413      	str	r3, [r2, #64]	@ 0x40
 800469e:	4b06      	ldr	r3, [pc, #24]	@ (80046b8 <HAL_TIM_Base_MspInit+0x8c>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]
}
 80046aa:	bf00      	nop
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800
 80046bc:	40000c00 	.word	0x40000c00
 80046c0:	40001000 	.word	0x40001000

080046c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80046c8:	bf00      	nop
 80046ca:	e7fd      	b.n	80046c8 <NMI_Handler+0x4>

080046cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046d0:	bf00      	nop
 80046d2:	e7fd      	b.n	80046d0 <HardFault_Handler+0x4>

080046d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046d8:	bf00      	nop
 80046da:	e7fd      	b.n	80046d8 <MemManage_Handler+0x4>

080046dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046e0:	bf00      	nop
 80046e2:	e7fd      	b.n	80046e0 <BusFault_Handler+0x4>

080046e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046e8:	bf00      	nop
 80046ea:	e7fd      	b.n	80046e8 <UsageFault_Handler+0x4>

080046ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046f0:	bf00      	nop
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046fa:	b480      	push	{r7}
 80046fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046fe:	bf00      	nop
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800470c:	bf00      	nop
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800471a:	f000 fba5 	bl	8004e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800471e:	bf00      	nop
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800472e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004732:	2b00      	cmp	r3, #0
 8004734:	db0b      	blt.n	800474e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004736:	79fb      	ldrb	r3, [r7, #7]
 8004738:	f003 021f 	and.w	r2, r3, #31
 800473c:	4907      	ldr	r1, [pc, #28]	@ (800475c <__NVIC_EnableIRQ+0x38>)
 800473e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	2001      	movs	r0, #1
 8004746:	fa00 f202 	lsl.w	r2, r0, r2
 800474a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	e000e100 	.word	0xe000e100

08004760 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8004766:	f000 f965 	bl	8004a34 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 800476a:	f000 f925 	bl	80049b8 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800476e:	2202      	movs	r2, #2
 8004770:	2103      	movs	r1, #3
 8004772:	2082      	movs	r0, #130	@ 0x82
 8004774:	f000 f9b2 	bl	8004adc <I2C3_Write>
    HAL_Delay(5);
 8004778:	2005      	movs	r0, #5
 800477a:	f000 fb95 	bl	8004ea8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800477e:	2200      	movs	r2, #0
 8004780:	2103      	movs	r1, #3
 8004782:	2082      	movs	r0, #130	@ 0x82
 8004784:	f000 f9aa 	bl	8004adc <I2C3_Write>
    HAL_Delay(2);
 8004788:	2002      	movs	r0, #2
 800478a:	f000 fb8d 	bl	8004ea8 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 800478e:	1cba      	adds	r2, r7, #2
 8004790:	2302      	movs	r3, #2
 8004792:	2100      	movs	r1, #0
 8004794:	2082      	movs	r0, #130	@ 0x82
 8004796:	f000 f9f1 	bl	8004b7c <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800479a:	887b      	ldrh	r3, [r7, #2]
 800479c:	021b      	lsls	r3, r3, #8
 800479e:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80047a0:	887b      	ldrh	r3, [r7, #2]
 80047a2:	0a1b      	lsrs	r3, r3, #8
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 80047ac:	88fb      	ldrh	r3, [r7, #6]
 80047ae:	f640 0211 	movw	r2, #2065	@ 0x811
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d001      	beq.n	80047ba <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e095      	b.n	80048e6 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80047ba:	2202      	movs	r2, #2
 80047bc:	2103      	movs	r1, #3
 80047be:	2082      	movs	r0, #130	@ 0x82
 80047c0:	f000 f98c 	bl	8004adc <I2C3_Write>
    HAL_Delay(5);
 80047c4:	2005      	movs	r0, #5
 80047c6:	f000 fb6f 	bl	8004ea8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80047ca:	2200      	movs	r2, #0
 80047cc:	2103      	movs	r1, #3
 80047ce:	2082      	movs	r0, #130	@ 0x82
 80047d0:	f000 f984 	bl	8004adc <I2C3_Write>
    HAL_Delay(2);
 80047d4:	2002      	movs	r0, #2
 80047d6:	f000 fb67 	bl	8004ea8 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80047da:	2004      	movs	r0, #4
 80047dc:	f000 f887 	bl	80048ee <STMPE811_Read>
 80047e0:	4603      	mov	r3, r0
 80047e2:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80047e4:	797b      	ldrb	r3, [r7, #5]
 80047e6:	f023 0301 	bic.w	r3, r3, #1
 80047ea:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80047ec:	797b      	ldrb	r3, [r7, #5]
 80047ee:	461a      	mov	r2, r3
 80047f0:	2104      	movs	r1, #4
 80047f2:	2082      	movs	r0, #130	@ 0x82
 80047f4:	f000 f972 	bl	8004adc <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80047f8:	2004      	movs	r0, #4
 80047fa:	f000 f878 	bl	80048ee <STMPE811_Read>
 80047fe:	4603      	mov	r3, r0
 8004800:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8004802:	797b      	ldrb	r3, [r7, #5]
 8004804:	f023 0302 	bic.w	r3, r3, #2
 8004808:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800480a:	797b      	ldrb	r3, [r7, #5]
 800480c:	461a      	mov	r2, r3
 800480e:	2104      	movs	r1, #4
 8004810:	2082      	movs	r0, #130	@ 0x82
 8004812:	f000 f963 	bl	8004adc <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8004816:	2249      	movs	r2, #73	@ 0x49
 8004818:	2120      	movs	r1, #32
 800481a:	2082      	movs	r0, #130	@ 0x82
 800481c:	f000 f95e 	bl	8004adc <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8004820:	2002      	movs	r0, #2
 8004822:	f000 fb41 	bl	8004ea8 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8004826:	2201      	movs	r2, #1
 8004828:	2121      	movs	r1, #33	@ 0x21
 800482a:	2082      	movs	r0, #130	@ 0x82
 800482c:	f000 f956 	bl	8004adc <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8004830:	2017      	movs	r0, #23
 8004832:	f000 f85c 	bl	80048ee <STMPE811_Read>
 8004836:	4603      	mov	r3, r0
 8004838:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 800483a:	797b      	ldrb	r3, [r7, #5]
 800483c:	f043 031e 	orr.w	r3, r3, #30
 8004840:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8004842:	797b      	ldrb	r3, [r7, #5]
 8004844:	461a      	mov	r2, r3
 8004846:	2117      	movs	r1, #23
 8004848:	2082      	movs	r0, #130	@ 0x82
 800484a:	f000 f947 	bl	8004adc <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 800484e:	229a      	movs	r2, #154	@ 0x9a
 8004850:	2141      	movs	r1, #65	@ 0x41
 8004852:	2082      	movs	r0, #130	@ 0x82
 8004854:	f000 f942 	bl	8004adc <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8004858:	2201      	movs	r2, #1
 800485a:	214a      	movs	r1, #74	@ 0x4a
 800485c:	2082      	movs	r0, #130	@ 0x82
 800485e:	f000 f93d 	bl	8004adc <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8004862:	2201      	movs	r2, #1
 8004864:	214b      	movs	r1, #75	@ 0x4b
 8004866:	2082      	movs	r0, #130	@ 0x82
 8004868:	f000 f938 	bl	8004adc <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800486c:	2200      	movs	r2, #0
 800486e:	214b      	movs	r1, #75	@ 0x4b
 8004870:	2082      	movs	r0, #130	@ 0x82
 8004872:	f000 f933 	bl	8004adc <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8004876:	2201      	movs	r2, #1
 8004878:	2156      	movs	r1, #86	@ 0x56
 800487a:	2082      	movs	r0, #130	@ 0x82
 800487c:	f000 f92e 	bl	8004adc <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8004880:	2201      	movs	r2, #1
 8004882:	2158      	movs	r1, #88	@ 0x58
 8004884:	2082      	movs	r0, #130	@ 0x82
 8004886:	f000 f929 	bl	8004adc <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 800488a:	2203      	movs	r2, #3
 800488c:	2140      	movs	r1, #64	@ 0x40
 800488e:	2082      	movs	r0, #130	@ 0x82
 8004890:	f000 f924 	bl	8004adc <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8004894:	22ff      	movs	r2, #255	@ 0xff
 8004896:	210b      	movs	r1, #11
 8004898:	2082      	movs	r0, #130	@ 0x82
 800489a:	f000 f91f 	bl	8004adc <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 800489e:	f000 f849 	bl	8004934 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 80048a2:	2009      	movs	r0, #9
 80048a4:	f000 f823 	bl	80048ee <STMPE811_Read>
 80048a8:	4603      	mov	r3, r0
 80048aa:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 80048ac:	797b      	ldrb	r3, [r7, #5]
 80048ae:	f043 0301 	orr.w	r3, r3, #1
 80048b2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 80048b4:	797b      	ldrb	r3, [r7, #5]
 80048b6:	461a      	mov	r2, r3
 80048b8:	2109      	movs	r1, #9
 80048ba:	2082      	movs	r0, #130	@ 0x82
 80048bc:	f000 f90e 	bl	8004adc <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 80048c0:	200a      	movs	r0, #10
 80048c2:	f000 f814 	bl	80048ee <STMPE811_Read>
 80048c6:	4603      	mov	r3, r0
 80048c8:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 80048ca:	797b      	ldrb	r3, [r7, #5]
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 80048d2:	797b      	ldrb	r3, [r7, #5]
 80048d4:	461a      	mov	r2, r3
 80048d6:	210a      	movs	r1, #10
 80048d8:	2082      	movs	r0, #130	@ 0x82
 80048da:	f000 f8ff 	bl	8004adc <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80048de:	20c8      	movs	r0, #200	@ 0xc8
 80048e0:	f000 fae2 	bl	8004ea8 <HAL_Delay>

    return STMPE811_State_Ok;
 80048e4:	2302      	movs	r3, #2

}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	4603      	mov	r3, r0
 80048f6:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 80048f8:	f107 020f 	add.w	r2, r7, #15
 80048fc:	79fb      	ldrb	r3, [r7, #7]
 80048fe:	4619      	mov	r1, r3
 8004900:	2082      	movs	r0, #130	@ 0x82
 8004902:	f000 f915 	bl	8004b30 <I2C3_Read>

    return readData;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	460a      	mov	r2, r1
 800491a:	71fb      	strb	r3, [r7, #7]
 800491c:	4613      	mov	r3, r2
 800491e:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8004920:	79ba      	ldrb	r2, [r7, #6]
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	4619      	mov	r1, r3
 8004926:	2082      	movs	r0, #130	@ 0x82
 8004928:	f000 f8d8 	bl	8004adc <I2C3_Write>
}
 800492c:	bf00      	nop
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	603b      	str	r3, [r7, #0]
 800493e:	4b14      	ldr	r3, [pc, #80]	@ (8004990 <enableInterruptSupportForTouch+0x5c>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004942:	4a13      	ldr	r2, [pc, #76]	@ (8004990 <enableInterruptSupportForTouch+0x5c>)
 8004944:	f043 0301 	orr.w	r3, r3, #1
 8004948:	6313      	str	r3, [r2, #48]	@ 0x30
 800494a:	4b11      	ldr	r3, [pc, #68]	@ (8004990 <enableInterruptSupportForTouch+0x5c>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004956:	1d3b      	adds	r3, r7, #4
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	605a      	str	r2, [r3, #4]
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004964:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004968:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800496a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800496e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004974:	2302      	movs	r3, #2
 8004976:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004978:	1d3b      	adds	r3, r7, #4
 800497a:	4619      	mov	r1, r3
 800497c:	4805      	ldr	r0, [pc, #20]	@ (8004994 <enableInterruptSupportForTouch+0x60>)
 800497e:	f000 fc3f 	bl	8005200 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004982:	2028      	movs	r0, #40	@ 0x28
 8004984:	f7ff fece 	bl	8004724 <__NVIC_EnableIRQ>

}
 8004988:	bf00      	nop
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40023800 	.word	0x40023800
 8004994:	40020000 	.word	0x40020000

08004998 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 800499c:	4b05      	ldr	r3, [pc, #20]	@ (80049b4 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80049a4:	bf00      	nop
 80049a6:	e7fd      	b.n	80049a4 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80049a8:	bf00      	nop
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	20025af0 	.word	0x20025af0

080049b8 <I2C3_Init>:

static void I2C3_Init()
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80049be:	2300      	movs	r3, #0
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	4b18      	ldr	r3, [pc, #96]	@ (8004a24 <I2C3_Init+0x6c>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	4a17      	ldr	r2, [pc, #92]	@ (8004a24 <I2C3_Init+0x6c>)
 80049c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80049ce:	4b15      	ldr	r3, [pc, #84]	@ (8004a24 <I2C3_Init+0x6c>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80049da:	4b13      	ldr	r3, [pc, #76]	@ (8004a28 <I2C3_Init+0x70>)
 80049dc:	4a13      	ldr	r2, [pc, #76]	@ (8004a2c <I2C3_Init+0x74>)
 80049de:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80049e0:	4b11      	ldr	r3, [pc, #68]	@ (8004a28 <I2C3_Init+0x70>)
 80049e2:	4a13      	ldr	r2, [pc, #76]	@ (8004a30 <I2C3_Init+0x78>)
 80049e4:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80049e6:	4b10      	ldr	r3, [pc, #64]	@ (8004a28 <I2C3_Init+0x70>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80049ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004a28 <I2C3_Init+0x70>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a28 <I2C3_Init+0x70>)
 80049f4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80049f8:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80049fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004a28 <I2C3_Init+0x70>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a00:	4b09      	ldr	r3, [pc, #36]	@ (8004a28 <I2C3_Init+0x70>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8004a06:	4808      	ldr	r0, [pc, #32]	@ (8004a28 <I2C3_Init+0x70>)
 8004a08:	f000 fecc 	bl	80057a4 <HAL_I2C_Init>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8004a16:	bf00      	nop
 8004a18:	e7fd      	b.n	8004a16 <I2C3_Init+0x5e>
    }
    return;
 8004a1a:	bf00      	nop
}
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40023800 	.word	0x40023800
 8004a28:	20025a9c 	.word	0x20025a9c
 8004a2c:	40005c00 	.word	0x40005c00
 8004a30:	000186a0 	.word	0x000186a0

08004a34 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a3a:	f107 030c 	add.w	r3, r7, #12
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	605a      	str	r2, [r3, #4]
 8004a44:	609a      	str	r2, [r3, #8]
 8004a46:	60da      	str	r2, [r3, #12]
 8004a48:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	4b20      	ldr	r3, [pc, #128]	@ (8004ad0 <I2C3_MspInit+0x9c>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a52:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad0 <I2C3_MspInit+0x9c>)
 8004a54:	f043 0304 	orr.w	r3, r3, #4
 8004a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad0 <I2C3_MspInit+0x9c>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	60bb      	str	r3, [r7, #8]
 8004a64:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a66:	2300      	movs	r3, #0
 8004a68:	607b      	str	r3, [r7, #4]
 8004a6a:	4b19      	ldr	r3, [pc, #100]	@ (8004ad0 <I2C3_MspInit+0x9c>)
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6e:	4a18      	ldr	r2, [pc, #96]	@ (8004ad0 <I2C3_MspInit+0x9c>)
 8004a70:	f043 0301 	orr.w	r3, r3, #1
 8004a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a76:	4b16      	ldr	r3, [pc, #88]	@ (8004ad0 <I2C3_MspInit+0x9c>)
 8004a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	607b      	str	r3, [r7, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8004a82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a88:	2312      	movs	r3, #18
 8004a8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a90:	2300      	movs	r3, #0
 8004a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004a94:	2304      	movs	r3, #4
 8004a96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8004a98:	f107 030c 	add.w	r3, r7, #12
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	480d      	ldr	r0, [pc, #52]	@ (8004ad4 <I2C3_MspInit+0xa0>)
 8004aa0:	f000 fbae 	bl	8005200 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8004aa4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004aa8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004aaa:	2312      	movs	r3, #18
 8004aac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004ab6:	2304      	movs	r3, #4
 8004ab8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8004aba:	f107 030c 	add.w	r3, r7, #12
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4805      	ldr	r0, [pc, #20]	@ (8004ad8 <I2C3_MspInit+0xa4>)
 8004ac2:	f000 fb9d 	bl	8005200 <HAL_GPIO_Init>
    
}
 8004ac6:	bf00      	nop
 8004ac8:	3720      	adds	r7, #32
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	40020800 	.word	0x40020800
 8004ad8:	40020000 	.word	0x40020000

08004adc <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af04      	add	r7, sp, #16
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	80fb      	strh	r3, [r7, #6]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	717b      	strb	r3, [r7, #5]
 8004aea:	4613      	mov	r3, r2
 8004aec:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8004aee:	793b      	ldrb	r3, [r7, #4]
 8004af0:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8004af2:	797b      	ldrb	r3, [r7, #5]
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	88f9      	ldrh	r1, [r7, #6]
 8004af8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b24 <I2C3_Write+0x48>)
 8004afa:	9302      	str	r3, [sp, #8]
 8004afc:	2301      	movs	r3, #1
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	f107 030f 	add.w	r3, r7, #15
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	2301      	movs	r3, #1
 8004b08:	4807      	ldr	r0, [pc, #28]	@ (8004b28 <I2C3_Write+0x4c>)
 8004b0a:	f000 ff8f 	bl	8005a2c <HAL_I2C_Mem_Write>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	461a      	mov	r2, r3
 8004b12:	4b06      	ldr	r3, [pc, #24]	@ (8004b2c <I2C3_Write+0x50>)
 8004b14:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8004b16:	f7ff ff3f 	bl	8004998 <verifyHAL_I2C_IS_OKAY>
}
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	0003d090 	.word	0x0003d090
 8004b28:	20025a9c 	.word	0x20025a9c
 8004b2c:	20025af0 	.word	0x20025af0

08004b30 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af04      	add	r7, sp, #16
 8004b36:	4603      	mov	r3, r0
 8004b38:	603a      	str	r2, [r7, #0]
 8004b3a:	71fb      	strb	r3, [r7, #7]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	b299      	uxth	r1, r3
 8004b44:	79bb      	ldrb	r3, [r7, #6]
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	4b09      	ldr	r3, [pc, #36]	@ (8004b70 <I2C3_Read+0x40>)
 8004b4a:	9302      	str	r3, [sp, #8]
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	9301      	str	r3, [sp, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	2301      	movs	r3, #1
 8004b56:	4807      	ldr	r0, [pc, #28]	@ (8004b74 <I2C3_Read+0x44>)
 8004b58:	f001 f862 	bl	8005c20 <HAL_I2C_Mem_Read>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	461a      	mov	r2, r3
 8004b60:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <I2C3_Read+0x48>)
 8004b62:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8004b64:	f7ff ff18 	bl	8004998 <verifyHAL_I2C_IS_OKAY>
}
 8004b68:	bf00      	nop
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	0003d090 	.word	0x0003d090
 8004b74:	20025a9c 	.word	0x20025a9c
 8004b78:	20025af0 	.word	0x20025af0

08004b7c <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af04      	add	r7, sp, #16
 8004b82:	603a      	str	r2, [r7, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	71fb      	strb	r3, [r7, #7]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	71bb      	strb	r3, [r7, #6]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	b299      	uxth	r1, r3
 8004b96:	79bb      	ldrb	r3, [r7, #6]
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	4b07      	ldr	r3, [pc, #28]	@ (8004bb8 <I2C3_MulitByteRead+0x3c>)
 8004b9c:	9302      	str	r3, [sp, #8]
 8004b9e:	88bb      	ldrh	r3, [r7, #4]
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	4804      	ldr	r0, [pc, #16]	@ (8004bbc <I2C3_MulitByteRead+0x40>)
 8004baa:	f001 f839 	bl	8005c20 <HAL_I2C_Mem_Read>
}
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	0003d090 	.word	0x0003d090
 8004bbc:	20025a9c 	.word	0x20025a9c

08004bc0 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
}
 8004bc4:	bf00      	nop
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b082      	sub	sp, #8
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004bd8:	f003 ff98 	bl	8008b0c <__errno>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2216      	movs	r2, #22
 8004be0:	601a      	str	r2, [r3, #0]
  return -1;
 8004be2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <_exit>:

void _exit (int status)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004bf6:	f04f 31ff 	mov.w	r1, #4294967295
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ffe7 	bl	8004bce <_kill>
  while (1) {}    /* Make sure we hang here */
 8004c00:	bf00      	nop
 8004c02:	e7fd      	b.n	8004c00 <_exit+0x12>

08004c04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	e00a      	b.n	8004c2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004c16:	f3af 8000 	nop.w
 8004c1a:	4601      	mov	r1, r0
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	60ba      	str	r2, [r7, #8]
 8004c22:	b2ca      	uxtb	r2, r1
 8004c24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	dbf0      	blt.n	8004c16 <_read+0x12>
  }

  return len;
 8004c34:	687b      	ldr	r3, [r7, #4]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b086      	sub	sp, #24
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	e009      	b.n	8004c64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	60ba      	str	r2, [r7, #8]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	3301      	adds	r3, #1
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	dbf1      	blt.n	8004c50 <_write+0x12>
  }
  return len;
 8004c6c:	687b      	ldr	r3, [r7, #4]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <_close>:

int _close(int file)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c9e:	605a      	str	r2, [r3, #4]
  return 0;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <_isatty>:

int _isatty(int file)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004cb6:	2301      	movs	r3, #1
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ce8:	4a14      	ldr	r2, [pc, #80]	@ (8004d3c <_sbrk+0x5c>)
 8004cea:	4b15      	ldr	r3, [pc, #84]	@ (8004d40 <_sbrk+0x60>)
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cf4:	4b13      	ldr	r3, [pc, #76]	@ (8004d44 <_sbrk+0x64>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004cfc:	4b11      	ldr	r3, [pc, #68]	@ (8004d44 <_sbrk+0x64>)
 8004cfe:	4a12      	ldr	r2, [pc, #72]	@ (8004d48 <_sbrk+0x68>)
 8004d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d02:	4b10      	ldr	r3, [pc, #64]	@ (8004d44 <_sbrk+0x64>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4413      	add	r3, r2
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d207      	bcs.n	8004d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d10:	f003 fefc 	bl	8008b0c <__errno>
 8004d14:	4603      	mov	r3, r0
 8004d16:	220c      	movs	r2, #12
 8004d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1e:	e009      	b.n	8004d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d20:	4b08      	ldr	r3, [pc, #32]	@ (8004d44 <_sbrk+0x64>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d26:	4b07      	ldr	r3, [pc, #28]	@ (8004d44 <_sbrk+0x64>)
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	4a05      	ldr	r2, [pc, #20]	@ (8004d44 <_sbrk+0x64>)
 8004d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d32:	68fb      	ldr	r3, [r7, #12]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20030000 	.word	0x20030000
 8004d40:	00000400 	.word	0x00000400
 8004d44:	20025af4 	.word	0x20025af4
 8004d48:	20025c48 	.word	0x20025c48

08004d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d50:	4b06      	ldr	r3, [pc, #24]	@ (8004d6c <SystemInit+0x20>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d56:	4a05      	ldr	r2, [pc, #20]	@ (8004d6c <SystemInit+0x20>)
 8004d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d60:	bf00      	nop
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	e000ed00 	.word	0xe000ed00

08004d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004d70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004da8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004d74:	f7ff ffea 	bl	8004d4c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004d78:	480c      	ldr	r0, [pc, #48]	@ (8004dac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004d7a:	490d      	ldr	r1, [pc, #52]	@ (8004db0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8004db4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d80:	e002      	b.n	8004d88 <LoopCopyDataInit>

08004d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d86:	3304      	adds	r3, #4

08004d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d8c:	d3f9      	bcc.n	8004d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004db8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004d90:	4c0a      	ldr	r4, [pc, #40]	@ (8004dbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8004d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d94:	e001      	b.n	8004d9a <LoopFillZerobss>

08004d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d98:	3204      	adds	r2, #4

08004d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d9c:	d3fb      	bcc.n	8004d96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004d9e:	f003 febb 	bl	8008b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004da2:	f7ff f9a0 	bl	80040e6 <main>
  bx  lr    
 8004da6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004da8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004db0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004db4:	0800a81c 	.word	0x0800a81c
  ldr r2, =_sbss
 8004db8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004dbc:	20025c48 	.word	0x20025c48

08004dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dc0:	e7fe      	b.n	8004dc0 <ADC_IRQHandler>
	...

08004dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e04 <HAL_Init+0x40>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8004e04 <HAL_Init+0x40>)
 8004dce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004e04 <HAL_Init+0x40>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8004e04 <HAL_Init+0x40>)
 8004dda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004de0:	4b08      	ldr	r3, [pc, #32]	@ (8004e04 <HAL_Init+0x40>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a07      	ldr	r2, [pc, #28]	@ (8004e04 <HAL_Init+0x40>)
 8004de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dec:	2003      	movs	r0, #3
 8004dee:	f000 f991 	bl	8005114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004df2:	2000      	movs	r0, #0
 8004df4:	f000 f808 	bl	8004e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004df8:	f7ff f9d6 	bl	80041a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40023c00 	.word	0x40023c00

08004e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e10:	4b12      	ldr	r3, [pc, #72]	@ (8004e5c <HAL_InitTick+0x54>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	4b12      	ldr	r3, [pc, #72]	@ (8004e60 <HAL_InitTick+0x58>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 f9b7 	bl	800519a <HAL_SYSTICK_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e00e      	b.n	8004e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b0f      	cmp	r3, #15
 8004e3a:	d80a      	bhi.n	8004e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	f04f 30ff 	mov.w	r0, #4294967295
 8004e44:	f000 f971 	bl	800512a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e48:	4a06      	ldr	r2, [pc, #24]	@ (8004e64 <HAL_InitTick+0x5c>)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	e000      	b.n	8004e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	20000010 	.word	0x20000010
 8004e60:	20000018 	.word	0x20000018
 8004e64:	20000014 	.word	0x20000014

08004e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e6c:	4b06      	ldr	r3, [pc, #24]	@ (8004e88 <HAL_IncTick+0x20>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <HAL_IncTick+0x24>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4413      	add	r3, r2
 8004e78:	4a04      	ldr	r2, [pc, #16]	@ (8004e8c <HAL_IncTick+0x24>)
 8004e7a:	6013      	str	r3, [r2, #0]
}
 8004e7c:	bf00      	nop
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000018 	.word	0x20000018
 8004e8c:	20025af8 	.word	0x20025af8

08004e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  return uwTick;
 8004e94:	4b03      	ldr	r3, [pc, #12]	@ (8004ea4 <HAL_GetTick+0x14>)
 8004e96:	681b      	ldr	r3, [r3, #0]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	20025af8 	.word	0x20025af8

08004ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004eb0:	f7ff ffee 	bl	8004e90 <HAL_GetTick>
 8004eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec0:	d005      	beq.n	8004ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8004eec <HAL_Delay+0x44>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ece:	bf00      	nop
 8004ed0:	f7ff ffde 	bl	8004e90 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d8f7      	bhi.n	8004ed0 <HAL_Delay+0x28>
  {
  }
}
 8004ee0:	bf00      	nop
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000018 	.word	0x20000018

08004ef0 <__NVIC_SetPriorityGrouping>:
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f00:	4b0c      	ldr	r3, [pc, #48]	@ (8004f34 <__NVIC_SetPriorityGrouping+0x44>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f22:	4a04      	ldr	r2, [pc, #16]	@ (8004f34 <__NVIC_SetPriorityGrouping+0x44>)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	60d3      	str	r3, [r2, #12]
}
 8004f28:	bf00      	nop
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	e000ed00 	.word	0xe000ed00

08004f38 <__NVIC_GetPriorityGrouping>:
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f3c:	4b04      	ldr	r3, [pc, #16]	@ (8004f50 <__NVIC_GetPriorityGrouping+0x18>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	0a1b      	lsrs	r3, r3, #8
 8004f42:	f003 0307 	and.w	r3, r3, #7
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	e000ed00 	.word	0xe000ed00

08004f54 <__NVIC_EnableIRQ>:
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	db0b      	blt.n	8004f7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	f003 021f 	and.w	r2, r3, #31
 8004f6c:	4907      	ldr	r1, [pc, #28]	@ (8004f8c <__NVIC_EnableIRQ+0x38>)
 8004f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	2001      	movs	r0, #1
 8004f76:	fa00 f202 	lsl.w	r2, r0, r2
 8004f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	e000e100 	.word	0xe000e100

08004f90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	db12      	blt.n	8004fc8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	f003 021f 	and.w	r2, r3, #31
 8004fa8:	490a      	ldr	r1, [pc, #40]	@ (8004fd4 <__NVIC_DisableIRQ+0x44>)
 8004faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	2001      	movs	r0, #1
 8004fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004fb6:	3320      	adds	r3, #32
 8004fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fbc:	f3bf 8f4f 	dsb	sy
}
 8004fc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004fc2:	f3bf 8f6f 	isb	sy
}
 8004fc6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	e000e100 	.word	0xe000e100

08004fd8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	db0c      	blt.n	8005004 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fea:	79fb      	ldrb	r3, [r7, #7]
 8004fec:	f003 021f 	and.w	r2, r3, #31
 8004ff0:	4907      	ldr	r1, [pc, #28]	@ (8005010 <__NVIC_ClearPendingIRQ+0x38>)
 8004ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8004ffe:	3360      	adds	r3, #96	@ 0x60
 8005000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	e000e100 	.word	0xe000e100

08005014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	6039      	str	r1, [r7, #0]
 800501e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005024:	2b00      	cmp	r3, #0
 8005026:	db0a      	blt.n	800503e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	b2da      	uxtb	r2, r3
 800502c:	490c      	ldr	r1, [pc, #48]	@ (8005060 <__NVIC_SetPriority+0x4c>)
 800502e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005032:	0112      	lsls	r2, r2, #4
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	440b      	add	r3, r1
 8005038:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800503c:	e00a      	b.n	8005054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	b2da      	uxtb	r2, r3
 8005042:	4908      	ldr	r1, [pc, #32]	@ (8005064 <__NVIC_SetPriority+0x50>)
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	3b04      	subs	r3, #4
 800504c:	0112      	lsls	r2, r2, #4
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	440b      	add	r3, r1
 8005052:	761a      	strb	r2, [r3, #24]
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	e000e100 	.word	0xe000e100
 8005064:	e000ed00 	.word	0xe000ed00

08005068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005068:	b480      	push	{r7}
 800506a:	b089      	sub	sp, #36	@ 0x24
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f1c3 0307 	rsb	r3, r3, #7
 8005082:	2b04      	cmp	r3, #4
 8005084:	bf28      	it	cs
 8005086:	2304      	movcs	r3, #4
 8005088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	3304      	adds	r3, #4
 800508e:	2b06      	cmp	r3, #6
 8005090:	d902      	bls.n	8005098 <NVIC_EncodePriority+0x30>
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	3b03      	subs	r3, #3
 8005096:	e000      	b.n	800509a <NVIC_EncodePriority+0x32>
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800509c:	f04f 32ff 	mov.w	r2, #4294967295
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	fa02 f303 	lsl.w	r3, r2, r3
 80050a6:	43da      	mvns	r2, r3
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	401a      	ands	r2, r3
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050b0:	f04f 31ff 	mov.w	r1, #4294967295
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ba:	43d9      	mvns	r1, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050c0:	4313      	orrs	r3, r2
         );
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3724      	adds	r7, #36	@ 0x24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
	...

080050d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3b01      	subs	r3, #1
 80050dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050e0:	d301      	bcc.n	80050e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050e2:	2301      	movs	r3, #1
 80050e4:	e00f      	b.n	8005106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005110 <SysTick_Config+0x40>)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050ee:	210f      	movs	r1, #15
 80050f0:	f04f 30ff 	mov.w	r0, #4294967295
 80050f4:	f7ff ff8e 	bl	8005014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050f8:	4b05      	ldr	r3, [pc, #20]	@ (8005110 <SysTick_Config+0x40>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050fe:	4b04      	ldr	r3, [pc, #16]	@ (8005110 <SysTick_Config+0x40>)
 8005100:	2207      	movs	r2, #7
 8005102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	e000e010 	.word	0xe000e010

08005114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff fee7 	bl	8004ef0 <__NVIC_SetPriorityGrouping>
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800512a:	b580      	push	{r7, lr}
 800512c:	b086      	sub	sp, #24
 800512e:	af00      	add	r7, sp, #0
 8005130:	4603      	mov	r3, r0
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	607a      	str	r2, [r7, #4]
 8005136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800513c:	f7ff fefc 	bl	8004f38 <__NVIC_GetPriorityGrouping>
 8005140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	6978      	ldr	r0, [r7, #20]
 8005148:	f7ff ff8e 	bl	8005068 <NVIC_EncodePriority>
 800514c:	4602      	mov	r2, r0
 800514e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005152:	4611      	mov	r1, r2
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff ff5d 	bl	8005014 <__NVIC_SetPriority>
}
 800515a:	bf00      	nop
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	4603      	mov	r3, r0
 800516a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800516c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff feef 	bl	8004f54 <__NVIC_EnableIRQ>
}
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	4603      	mov	r3, r0
 8005186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff feff 	bl	8004f90 <__NVIC_DisableIRQ>
}
 8005192:	bf00      	nop
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff ff94 	bl	80050d0 <SysTick_Config>
 80051a8:	4603      	mov	r3, r0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	4603      	mov	r3, r0
 80051ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80051bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff ff09 	bl	8004fd8 <__NVIC_ClearPendingIRQ>
}
 80051c6:	bf00      	nop
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 031f 	and.w	r3, r3, #31
 80051e2:	2201      	movs	r2, #1
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80051ea:	4a04      	ldr	r2, [pc, #16]	@ (80051fc <HAL_EXTI_ClearPending+0x2c>)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6153      	str	r3, [r2, #20]
}
 80051f0:	bf00      	nop
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	40013c00 	.word	0x40013c00

08005200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005200:	b480      	push	{r7}
 8005202:	b089      	sub	sp, #36	@ 0x24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800520e:	2300      	movs	r3, #0
 8005210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	e177      	b.n	800550c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800521c:	2201      	movs	r2, #1
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4013      	ands	r3, r2
 800522e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	429a      	cmp	r2, r3
 8005236:	f040 8166 	bne.w	8005506 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b01      	cmp	r3, #1
 8005244:	d005      	beq.n	8005252 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800524e:	2b02      	cmp	r3, #2
 8005250:	d130      	bne.n	80052b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	2203      	movs	r2, #3
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	43db      	mvns	r3, r3
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	4013      	ands	r3, r2
 8005268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	fa02 f303 	lsl.w	r3, r2, r3
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	4313      	orrs	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005288:	2201      	movs	r2, #1
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	43db      	mvns	r3, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4013      	ands	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 0201 	and.w	r2, r3, #1
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d017      	beq.n	80052f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	2203      	movs	r2, #3
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	43db      	mvns	r3, r3
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	4013      	ands	r3, r2
 80052d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 0303 	and.w	r3, r3, #3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d123      	bne.n	8005344 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	08da      	lsrs	r2, r3, #3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3208      	adds	r2, #8
 8005304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005308:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	220f      	movs	r2, #15
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	43db      	mvns	r3, r3
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	4013      	ands	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	4313      	orrs	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	08da      	lsrs	r2, r3, #3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3208      	adds	r2, #8
 800533e:	69b9      	ldr	r1, [r7, #24]
 8005340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	2203      	movs	r2, #3
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	43db      	mvns	r3, r3
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4013      	ands	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f003 0203 	and.w	r2, r3, #3
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	4313      	orrs	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80c0 	beq.w	8005506 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	4b66      	ldr	r3, [pc, #408]	@ (8005524 <HAL_GPIO_Init+0x324>)
 800538c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538e:	4a65      	ldr	r2, [pc, #404]	@ (8005524 <HAL_GPIO_Init+0x324>)
 8005390:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005394:	6453      	str	r3, [r2, #68]	@ 0x44
 8005396:	4b63      	ldr	r3, [pc, #396]	@ (8005524 <HAL_GPIO_Init+0x324>)
 8005398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053a2:	4a61      	ldr	r2, [pc, #388]	@ (8005528 <HAL_GPIO_Init+0x328>)
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	089b      	lsrs	r3, r3, #2
 80053a8:	3302      	adds	r3, #2
 80053aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	220f      	movs	r2, #15
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	43db      	mvns	r3, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	4013      	ands	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a58      	ldr	r2, [pc, #352]	@ (800552c <HAL_GPIO_Init+0x32c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d037      	beq.n	800543e <HAL_GPIO_Init+0x23e>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a57      	ldr	r2, [pc, #348]	@ (8005530 <HAL_GPIO_Init+0x330>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d031      	beq.n	800543a <HAL_GPIO_Init+0x23a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a56      	ldr	r2, [pc, #344]	@ (8005534 <HAL_GPIO_Init+0x334>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d02b      	beq.n	8005436 <HAL_GPIO_Init+0x236>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a55      	ldr	r2, [pc, #340]	@ (8005538 <HAL_GPIO_Init+0x338>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d025      	beq.n	8005432 <HAL_GPIO_Init+0x232>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a54      	ldr	r2, [pc, #336]	@ (800553c <HAL_GPIO_Init+0x33c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d01f      	beq.n	800542e <HAL_GPIO_Init+0x22e>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a53      	ldr	r2, [pc, #332]	@ (8005540 <HAL_GPIO_Init+0x340>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d019      	beq.n	800542a <HAL_GPIO_Init+0x22a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a52      	ldr	r2, [pc, #328]	@ (8005544 <HAL_GPIO_Init+0x344>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d013      	beq.n	8005426 <HAL_GPIO_Init+0x226>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a51      	ldr	r2, [pc, #324]	@ (8005548 <HAL_GPIO_Init+0x348>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00d      	beq.n	8005422 <HAL_GPIO_Init+0x222>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a50      	ldr	r2, [pc, #320]	@ (800554c <HAL_GPIO_Init+0x34c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d007      	beq.n	800541e <HAL_GPIO_Init+0x21e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a4f      	ldr	r2, [pc, #316]	@ (8005550 <HAL_GPIO_Init+0x350>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d101      	bne.n	800541a <HAL_GPIO_Init+0x21a>
 8005416:	2309      	movs	r3, #9
 8005418:	e012      	b.n	8005440 <HAL_GPIO_Init+0x240>
 800541a:	230a      	movs	r3, #10
 800541c:	e010      	b.n	8005440 <HAL_GPIO_Init+0x240>
 800541e:	2308      	movs	r3, #8
 8005420:	e00e      	b.n	8005440 <HAL_GPIO_Init+0x240>
 8005422:	2307      	movs	r3, #7
 8005424:	e00c      	b.n	8005440 <HAL_GPIO_Init+0x240>
 8005426:	2306      	movs	r3, #6
 8005428:	e00a      	b.n	8005440 <HAL_GPIO_Init+0x240>
 800542a:	2305      	movs	r3, #5
 800542c:	e008      	b.n	8005440 <HAL_GPIO_Init+0x240>
 800542e:	2304      	movs	r3, #4
 8005430:	e006      	b.n	8005440 <HAL_GPIO_Init+0x240>
 8005432:	2303      	movs	r3, #3
 8005434:	e004      	b.n	8005440 <HAL_GPIO_Init+0x240>
 8005436:	2302      	movs	r3, #2
 8005438:	e002      	b.n	8005440 <HAL_GPIO_Init+0x240>
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <HAL_GPIO_Init+0x240>
 800543e:	2300      	movs	r3, #0
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	f002 0203 	and.w	r2, r2, #3
 8005446:	0092      	lsls	r2, r2, #2
 8005448:	4093      	lsls	r3, r2
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4313      	orrs	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005450:	4935      	ldr	r1, [pc, #212]	@ (8005528 <HAL_GPIO_Init+0x328>)
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	089b      	lsrs	r3, r3, #2
 8005456:	3302      	adds	r3, #2
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800545e:	4b3d      	ldr	r3, [pc, #244]	@ (8005554 <HAL_GPIO_Init+0x354>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	43db      	mvns	r3, r3
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	4013      	ands	r3, r2
 800546c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	4313      	orrs	r3, r2
 8005480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005482:	4a34      	ldr	r2, [pc, #208]	@ (8005554 <HAL_GPIO_Init+0x354>)
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005488:	4b32      	ldr	r3, [pc, #200]	@ (8005554 <HAL_GPIO_Init+0x354>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	43db      	mvns	r3, r3
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	4013      	ands	r3, r2
 8005496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054ac:	4a29      	ldr	r2, [pc, #164]	@ (8005554 <HAL_GPIO_Init+0x354>)
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80054b2:	4b28      	ldr	r3, [pc, #160]	@ (8005554 <HAL_GPIO_Init+0x354>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	43db      	mvns	r3, r3
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	4013      	ands	r3, r2
 80054c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005554 <HAL_GPIO_Init+0x354>)
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005554 <HAL_GPIO_Init+0x354>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	43db      	mvns	r3, r3
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	4013      	ands	r3, r2
 80054ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005500:	4a14      	ldr	r2, [pc, #80]	@ (8005554 <HAL_GPIO_Init+0x354>)
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	3301      	adds	r3, #1
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	2b0f      	cmp	r3, #15
 8005510:	f67f ae84 	bls.w	800521c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	3724      	adds	r7, #36	@ 0x24
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40023800 	.word	0x40023800
 8005528:	40013800 	.word	0x40013800
 800552c:	40020000 	.word	0x40020000
 8005530:	40020400 	.word	0x40020400
 8005534:	40020800 	.word	0x40020800
 8005538:	40020c00 	.word	0x40020c00
 800553c:	40021000 	.word	0x40021000
 8005540:	40021400 	.word	0x40021400
 8005544:	40021800 	.word	0x40021800
 8005548:	40021c00 	.word	0x40021c00
 800554c:	40022000 	.word	0x40022000
 8005550:	40022400 	.word	0x40022400
 8005554:	40013c00 	.word	0x40013c00

08005558 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005562:	2300      	movs	r3, #0
 8005564:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800556a:	2300      	movs	r3, #0
 800556c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]
 8005572:	e0d9      	b.n	8005728 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005574:	2201      	movs	r2, #1
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	4013      	ands	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	429a      	cmp	r2, r3
 800558c:	f040 80c9 	bne.w	8005722 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005590:	4a6b      	ldr	r2, [pc, #428]	@ (8005740 <HAL_GPIO_DeInit+0x1e8>)
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	089b      	lsrs	r3, r3, #2
 8005596:	3302      	adds	r3, #2
 8005598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800559c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f003 0303 	and.w	r3, r3, #3
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	220f      	movs	r2, #15
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	4013      	ands	r3, r2
 80055b0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a63      	ldr	r2, [pc, #396]	@ (8005744 <HAL_GPIO_DeInit+0x1ec>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d037      	beq.n	800562a <HAL_GPIO_DeInit+0xd2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a62      	ldr	r2, [pc, #392]	@ (8005748 <HAL_GPIO_DeInit+0x1f0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d031      	beq.n	8005626 <HAL_GPIO_DeInit+0xce>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a61      	ldr	r2, [pc, #388]	@ (800574c <HAL_GPIO_DeInit+0x1f4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d02b      	beq.n	8005622 <HAL_GPIO_DeInit+0xca>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a60      	ldr	r2, [pc, #384]	@ (8005750 <HAL_GPIO_DeInit+0x1f8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d025      	beq.n	800561e <HAL_GPIO_DeInit+0xc6>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a5f      	ldr	r2, [pc, #380]	@ (8005754 <HAL_GPIO_DeInit+0x1fc>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d01f      	beq.n	800561a <HAL_GPIO_DeInit+0xc2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a5e      	ldr	r2, [pc, #376]	@ (8005758 <HAL_GPIO_DeInit+0x200>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d019      	beq.n	8005616 <HAL_GPIO_DeInit+0xbe>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a5d      	ldr	r2, [pc, #372]	@ (800575c <HAL_GPIO_DeInit+0x204>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d013      	beq.n	8005612 <HAL_GPIO_DeInit+0xba>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a5c      	ldr	r2, [pc, #368]	@ (8005760 <HAL_GPIO_DeInit+0x208>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d00d      	beq.n	800560e <HAL_GPIO_DeInit+0xb6>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a5b      	ldr	r2, [pc, #364]	@ (8005764 <HAL_GPIO_DeInit+0x20c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d007      	beq.n	800560a <HAL_GPIO_DeInit+0xb2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a5a      	ldr	r2, [pc, #360]	@ (8005768 <HAL_GPIO_DeInit+0x210>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d101      	bne.n	8005606 <HAL_GPIO_DeInit+0xae>
 8005602:	2309      	movs	r3, #9
 8005604:	e012      	b.n	800562c <HAL_GPIO_DeInit+0xd4>
 8005606:	230a      	movs	r3, #10
 8005608:	e010      	b.n	800562c <HAL_GPIO_DeInit+0xd4>
 800560a:	2308      	movs	r3, #8
 800560c:	e00e      	b.n	800562c <HAL_GPIO_DeInit+0xd4>
 800560e:	2307      	movs	r3, #7
 8005610:	e00c      	b.n	800562c <HAL_GPIO_DeInit+0xd4>
 8005612:	2306      	movs	r3, #6
 8005614:	e00a      	b.n	800562c <HAL_GPIO_DeInit+0xd4>
 8005616:	2305      	movs	r3, #5
 8005618:	e008      	b.n	800562c <HAL_GPIO_DeInit+0xd4>
 800561a:	2304      	movs	r3, #4
 800561c:	e006      	b.n	800562c <HAL_GPIO_DeInit+0xd4>
 800561e:	2303      	movs	r3, #3
 8005620:	e004      	b.n	800562c <HAL_GPIO_DeInit+0xd4>
 8005622:	2302      	movs	r3, #2
 8005624:	e002      	b.n	800562c <HAL_GPIO_DeInit+0xd4>
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <HAL_GPIO_DeInit+0xd4>
 800562a:	2300      	movs	r3, #0
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	f002 0203 	and.w	r2, r2, #3
 8005632:	0092      	lsls	r2, r2, #2
 8005634:	4093      	lsls	r3, r2
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	429a      	cmp	r2, r3
 800563a:	d132      	bne.n	80056a2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800563c:	4b4b      	ldr	r3, [pc, #300]	@ (800576c <HAL_GPIO_DeInit+0x214>)
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	43db      	mvns	r3, r3
 8005644:	4949      	ldr	r1, [pc, #292]	@ (800576c <HAL_GPIO_DeInit+0x214>)
 8005646:	4013      	ands	r3, r2
 8005648:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800564a:	4b48      	ldr	r3, [pc, #288]	@ (800576c <HAL_GPIO_DeInit+0x214>)
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	43db      	mvns	r3, r3
 8005652:	4946      	ldr	r1, [pc, #280]	@ (800576c <HAL_GPIO_DeInit+0x214>)
 8005654:	4013      	ands	r3, r2
 8005656:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005658:	4b44      	ldr	r3, [pc, #272]	@ (800576c <HAL_GPIO_DeInit+0x214>)
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	43db      	mvns	r3, r3
 8005660:	4942      	ldr	r1, [pc, #264]	@ (800576c <HAL_GPIO_DeInit+0x214>)
 8005662:	4013      	ands	r3, r2
 8005664:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005666:	4b41      	ldr	r3, [pc, #260]	@ (800576c <HAL_GPIO_DeInit+0x214>)
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	43db      	mvns	r3, r3
 800566e:	493f      	ldr	r1, [pc, #252]	@ (800576c <HAL_GPIO_DeInit+0x214>)
 8005670:	4013      	ands	r3, r2
 8005672:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	220f      	movs	r2, #15
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005684:	4a2e      	ldr	r2, [pc, #184]	@ (8005740 <HAL_GPIO_DeInit+0x1e8>)
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	089b      	lsrs	r3, r3, #2
 800568a:	3302      	adds	r3, #2
 800568c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	43da      	mvns	r2, r3
 8005694:	482a      	ldr	r0, [pc, #168]	@ (8005740 <HAL_GPIO_DeInit+0x1e8>)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	089b      	lsrs	r3, r3, #2
 800569a:	400a      	ands	r2, r1
 800569c:	3302      	adds	r3, #2
 800569e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	2103      	movs	r1, #3
 80056ac:	fa01 f303 	lsl.w	r3, r1, r3
 80056b0:	43db      	mvns	r3, r3
 80056b2:	401a      	ands	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	08da      	lsrs	r2, r3, #3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3208      	adds	r2, #8
 80056c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	220f      	movs	r2, #15
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43db      	mvns	r3, r3
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	08d2      	lsrs	r2, r2, #3
 80056d8:	4019      	ands	r1, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3208      	adds	r2, #8
 80056de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	2103      	movs	r1, #3
 80056ec:	fa01 f303 	lsl.w	r3, r1, r3
 80056f0:	43db      	mvns	r3, r3
 80056f2:	401a      	ands	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	2101      	movs	r1, #1
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	fa01 f303 	lsl.w	r3, r1, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	401a      	ands	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	2103      	movs	r1, #3
 8005716:	fa01 f303 	lsl.w	r3, r1, r3
 800571a:	43db      	mvns	r3, r3
 800571c:	401a      	ands	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	3301      	adds	r3, #1
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	2b0f      	cmp	r3, #15
 800572c:	f67f af22 	bls.w	8005574 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40013800 	.word	0x40013800
 8005744:	40020000 	.word	0x40020000
 8005748:	40020400 	.word	0x40020400
 800574c:	40020800 	.word	0x40020800
 8005750:	40020c00 	.word	0x40020c00
 8005754:	40021000 	.word	0x40021000
 8005758:	40021400 	.word	0x40021400
 800575c:	40021800 	.word	0x40021800
 8005760:	40021c00 	.word	0x40021c00
 8005764:	40022000 	.word	0x40022000
 8005768:	40022400 	.word	0x40022400
 800576c:	40013c00 	.word	0x40013c00

08005770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	807b      	strh	r3, [r7, #2]
 800577c:	4613      	mov	r3, r2
 800577e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005780:	787b      	ldrb	r3, [r7, #1]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005786:	887a      	ldrh	r2, [r7, #2]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800578c:	e003      	b.n	8005796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800578e:	887b      	ldrh	r3, [r7, #2]
 8005790:	041a      	lsls	r2, r3, #16
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	619a      	str	r2, [r3, #24]
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
	...

080057a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e12b      	b.n	8005a0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fe fd14 	bl	80041f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2224      	movs	r2, #36	@ 0x24
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0201 	bic.w	r2, r2, #1
 80057e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005806:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005808:	f001 ff06 	bl	8007618 <HAL_RCC_GetPCLK1Freq>
 800580c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	4a81      	ldr	r2, [pc, #516]	@ (8005a18 <HAL_I2C_Init+0x274>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d807      	bhi.n	8005828 <HAL_I2C_Init+0x84>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4a80      	ldr	r2, [pc, #512]	@ (8005a1c <HAL_I2C_Init+0x278>)
 800581c:	4293      	cmp	r3, r2
 800581e:	bf94      	ite	ls
 8005820:	2301      	movls	r3, #1
 8005822:	2300      	movhi	r3, #0
 8005824:	b2db      	uxtb	r3, r3
 8005826:	e006      	b.n	8005836 <HAL_I2C_Init+0x92>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4a7d      	ldr	r2, [pc, #500]	@ (8005a20 <HAL_I2C_Init+0x27c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	bf94      	ite	ls
 8005830:	2301      	movls	r3, #1
 8005832:	2300      	movhi	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e0e7      	b.n	8005a0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4a78      	ldr	r2, [pc, #480]	@ (8005a24 <HAL_I2C_Init+0x280>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	0c9b      	lsrs	r3, r3, #18
 8005848:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	4a6a      	ldr	r2, [pc, #424]	@ (8005a18 <HAL_I2C_Init+0x274>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d802      	bhi.n	8005878 <HAL_I2C_Init+0xd4>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	3301      	adds	r3, #1
 8005876:	e009      	b.n	800588c <HAL_I2C_Init+0xe8>
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800587e:	fb02 f303 	mul.w	r3, r2, r3
 8005882:	4a69      	ldr	r2, [pc, #420]	@ (8005a28 <HAL_I2C_Init+0x284>)
 8005884:	fba2 2303 	umull	r2, r3, r2, r3
 8005888:	099b      	lsrs	r3, r3, #6
 800588a:	3301      	adds	r3, #1
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6812      	ldr	r2, [r2, #0]
 8005890:	430b      	orrs	r3, r1
 8005892:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800589e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	495c      	ldr	r1, [pc, #368]	@ (8005a18 <HAL_I2C_Init+0x274>)
 80058a8:	428b      	cmp	r3, r1
 80058aa:	d819      	bhi.n	80058e0 <HAL_I2C_Init+0x13c>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	1e59      	subs	r1, r3, #1
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80058ba:	1c59      	adds	r1, r3, #1
 80058bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80058c0:	400b      	ands	r3, r1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <HAL_I2C_Init+0x138>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	1e59      	subs	r1, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80058d4:	3301      	adds	r3, #1
 80058d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058da:	e051      	b.n	8005980 <HAL_I2C_Init+0x1dc>
 80058dc:	2304      	movs	r3, #4
 80058de:	e04f      	b.n	8005980 <HAL_I2C_Init+0x1dc>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d111      	bne.n	800590c <HAL_I2C_Init+0x168>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	1e58      	subs	r0, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6859      	ldr	r1, [r3, #4]
 80058f0:	460b      	mov	r3, r1
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	440b      	add	r3, r1
 80058f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80058fa:	3301      	adds	r3, #1
 80058fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf0c      	ite	eq
 8005904:	2301      	moveq	r3, #1
 8005906:	2300      	movne	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	e012      	b.n	8005932 <HAL_I2C_Init+0x18e>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	1e58      	subs	r0, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6859      	ldr	r1, [r3, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	0099      	lsls	r1, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005922:	3301      	adds	r3, #1
 8005924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005928:	2b00      	cmp	r3, #0
 800592a:	bf0c      	ite	eq
 800592c:	2301      	moveq	r3, #1
 800592e:	2300      	movne	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <HAL_I2C_Init+0x196>
 8005936:	2301      	movs	r3, #1
 8005938:	e022      	b.n	8005980 <HAL_I2C_Init+0x1dc>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10e      	bne.n	8005960 <HAL_I2C_Init+0x1bc>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	1e58      	subs	r0, r3, #1
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6859      	ldr	r1, [r3, #4]
 800594a:	460b      	mov	r3, r1
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	440b      	add	r3, r1
 8005950:	fbb0 f3f3 	udiv	r3, r0, r3
 8005954:	3301      	adds	r3, #1
 8005956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800595a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800595e:	e00f      	b.n	8005980 <HAL_I2C_Init+0x1dc>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	1e58      	subs	r0, r3, #1
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6859      	ldr	r1, [r3, #4]
 8005968:	460b      	mov	r3, r1
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	0099      	lsls	r1, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	fbb0 f3f3 	udiv	r3, r0, r3
 8005976:	3301      	adds	r3, #1
 8005978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800597c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	6809      	ldr	r1, [r1, #0]
 8005984:	4313      	orrs	r3, r2
 8005986:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69da      	ldr	r2, [r3, #28]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80059ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6911      	ldr	r1, [r2, #16]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	68d2      	ldr	r2, [r2, #12]
 80059ba:	4311      	orrs	r1, r2
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6812      	ldr	r2, [r2, #0]
 80059c0:	430b      	orrs	r3, r1
 80059c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695a      	ldr	r2, [r3, #20]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0201 	orr.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	000186a0 	.word	0x000186a0
 8005a1c:	001e847f 	.word	0x001e847f
 8005a20:	003d08ff 	.word	0x003d08ff
 8005a24:	431bde83 	.word	0x431bde83
 8005a28:	10624dd3 	.word	0x10624dd3

08005a2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	4608      	mov	r0, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	817b      	strh	r3, [r7, #10]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	813b      	strh	r3, [r7, #8]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a46:	f7ff fa23 	bl	8004e90 <HAL_GetTick>
 8005a4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b20      	cmp	r3, #32
 8005a56:	f040 80d9 	bne.w	8005c0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	2319      	movs	r3, #25
 8005a60:	2201      	movs	r2, #1
 8005a62:	496d      	ldr	r1, [pc, #436]	@ (8005c18 <HAL_I2C_Mem_Write+0x1ec>)
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 fc8b 	bl	8006380 <I2C_WaitOnFlagUntilTimeout>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005a70:	2302      	movs	r3, #2
 8005a72:	e0cc      	b.n	8005c0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d101      	bne.n	8005a82 <HAL_I2C_Mem_Write+0x56>
 8005a7e:	2302      	movs	r3, #2
 8005a80:	e0c5      	b.n	8005c0e <HAL_I2C_Mem_Write+0x1e2>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d007      	beq.n	8005aa8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0201 	orr.w	r2, r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ab6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2221      	movs	r2, #33	@ 0x21
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2240      	movs	r2, #64	@ 0x40
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a3a      	ldr	r2, [r7, #32]
 8005ad2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4a4d      	ldr	r2, [pc, #308]	@ (8005c1c <HAL_I2C_Mem_Write+0x1f0>)
 8005ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005aea:	88f8      	ldrh	r0, [r7, #6]
 8005aec:	893a      	ldrh	r2, [r7, #8]
 8005aee:	8979      	ldrh	r1, [r7, #10]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	9301      	str	r3, [sp, #4]
 8005af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	4603      	mov	r3, r0
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 fac2 	bl	8006084 <I2C_RequestMemoryWrite>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d052      	beq.n	8005bac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e081      	b.n	8005c0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 fd50 	bl	80065b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00d      	beq.n	8005b36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d107      	bne.n	8005b32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e06b      	b.n	8005c0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3a:	781a      	ldrb	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b50:	3b01      	subs	r3, #1
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d11b      	bne.n	8005bac <HAL_I2C_Mem_Write+0x180>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d017      	beq.n	8005bac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b80:	781a      	ldrb	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b96:	3b01      	subs	r3, #1
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1aa      	bne.n	8005b0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 fd43 	bl	8006644 <I2C_WaitOnBTFFlagUntilTimeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00d      	beq.n	8005be0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d107      	bne.n	8005bdc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e016      	b.n	8005c0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e000      	b.n	8005c0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005c0c:	2302      	movs	r3, #2
  }
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	00100002 	.word	0x00100002
 8005c1c:	ffff0000 	.word	0xffff0000

08005c20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08c      	sub	sp, #48	@ 0x30
 8005c24:	af02      	add	r7, sp, #8
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	4608      	mov	r0, r1
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	4603      	mov	r3, r0
 8005c30:	817b      	strh	r3, [r7, #10]
 8005c32:	460b      	mov	r3, r1
 8005c34:	813b      	strh	r3, [r7, #8]
 8005c36:	4613      	mov	r3, r2
 8005c38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c3a:	f7ff f929 	bl	8004e90 <HAL_GetTick>
 8005c3e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b20      	cmp	r3, #32
 8005c4a:	f040 8214 	bne.w	8006076 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	2319      	movs	r3, #25
 8005c54:	2201      	movs	r2, #1
 8005c56:	497b      	ldr	r1, [pc, #492]	@ (8005e44 <HAL_I2C_Mem_Read+0x224>)
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 fb91 	bl	8006380 <I2C_WaitOnFlagUntilTimeout>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005c64:	2302      	movs	r3, #2
 8005c66:	e207      	b.n	8006078 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d101      	bne.n	8005c76 <HAL_I2C_Mem_Read+0x56>
 8005c72:	2302      	movs	r3, #2
 8005c74:	e200      	b.n	8006078 <HAL_I2C_Mem_Read+0x458>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d007      	beq.n	8005c9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005caa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2222      	movs	r2, #34	@ 0x22
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2240      	movs	r2, #64	@ 0x40
 8005cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4a5b      	ldr	r2, [pc, #364]	@ (8005e48 <HAL_I2C_Mem_Read+0x228>)
 8005cdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cde:	88f8      	ldrh	r0, [r7, #6]
 8005ce0:	893a      	ldrh	r2, [r7, #8]
 8005ce2:	8979      	ldrh	r1, [r7, #10]
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce6:	9301      	str	r3, [sp, #4]
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	4603      	mov	r3, r0
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fa5e 	bl	80061b0 <I2C_RequestMemoryRead>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e1bc      	b.n	8006078 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d113      	bne.n	8005d2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d06:	2300      	movs	r3, #0
 8005d08:	623b      	str	r3, [r7, #32]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	623b      	str	r3, [r7, #32]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	623b      	str	r3, [r7, #32]
 8005d1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	e190      	b.n	8006050 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d11b      	bne.n	8005d6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d46:	2300      	movs	r3, #0
 8005d48:	61fb      	str	r3, [r7, #28]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	61fb      	str	r3, [r7, #28]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	61fb      	str	r3, [r7, #28]
 8005d5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	e170      	b.n	8006050 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d11b      	bne.n	8005dae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d96:	2300      	movs	r3, #0
 8005d98:	61bb      	str	r3, [r7, #24]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	e150      	b.n	8006050 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	617b      	str	r3, [r7, #20]
 8005dc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005dc4:	e144      	b.n	8006050 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	f200 80f1 	bhi.w	8005fb2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d123      	bne.n	8005e20 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 fc79 	bl	80066d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e145      	b.n	8006078 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e1e:	e117      	b.n	8006050 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d14e      	bne.n	8005ec6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2e:	2200      	movs	r2, #0
 8005e30:	4906      	ldr	r1, [pc, #24]	@ (8005e4c <HAL_I2C_Mem_Read+0x22c>)
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 faa4 	bl	8006380 <I2C_WaitOnFlagUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d008      	beq.n	8005e50 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e11a      	b.n	8006078 <HAL_I2C_Mem_Read+0x458>
 8005e42:	bf00      	nop
 8005e44:	00100002 	.word	0x00100002
 8005e48:	ffff0000 	.word	0xffff0000
 8005e4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	691a      	ldr	r2, [r3, #16]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9c:	b2d2      	uxtb	r2, r2
 8005e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ec4:	e0c4      	b.n	8006050 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ecc:	2200      	movs	r2, #0
 8005ece:	496c      	ldr	r1, [pc, #432]	@ (8006080 <HAL_I2C_Mem_Read+0x460>)
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 fa55 	bl	8006380 <I2C_WaitOnFlagUntilTimeout>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e0cb      	b.n	8006078 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f28:	2200      	movs	r2, #0
 8005f2a:	4955      	ldr	r1, [pc, #340]	@ (8006080 <HAL_I2C_Mem_Read+0x460>)
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 fa27 	bl	8006380 <I2C_WaitOnFlagUntilTimeout>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e09d      	b.n	8006078 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691a      	ldr	r2, [r3, #16]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3b01      	subs	r3, #1
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	691a      	ldr	r2, [r3, #16]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005fb0:	e04e      	b.n	8006050 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fb4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 fb8c 	bl	80066d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e058      	b.n	8006078 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	f003 0304 	and.w	r3, r3, #4
 8006002:	2b04      	cmp	r3, #4
 8006004:	d124      	bne.n	8006050 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800600a:	2b03      	cmp	r3, #3
 800600c:	d107      	bne.n	800601e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800601c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006046:	b29b      	uxth	r3, r3
 8006048:	3b01      	subs	r3, #1
 800604a:	b29a      	uxth	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006054:	2b00      	cmp	r3, #0
 8006056:	f47f aeb6 	bne.w	8005dc6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2220      	movs	r2, #32
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	e000      	b.n	8006078 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006076:	2302      	movs	r3, #2
  }
}
 8006078:	4618      	mov	r0, r3
 800607a:	3728      	adds	r7, #40	@ 0x28
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	00010004 	.word	0x00010004

08006084 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af02      	add	r7, sp, #8
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	4608      	mov	r0, r1
 800608e:	4611      	mov	r1, r2
 8006090:	461a      	mov	r2, r3
 8006092:	4603      	mov	r3, r0
 8006094:	817b      	strh	r3, [r7, #10]
 8006096:	460b      	mov	r3, r1
 8006098:	813b      	strh	r3, [r7, #8]
 800609a:	4613      	mov	r3, r2
 800609c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 f960 	bl	8006380 <I2C_WaitOnFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00d      	beq.n	80060e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060d4:	d103      	bne.n	80060de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e05f      	b.n	80061a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060e2:	897b      	ldrh	r3, [r7, #10]
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80060f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f4:	6a3a      	ldr	r2, [r7, #32]
 80060f6:	492d      	ldr	r1, [pc, #180]	@ (80061ac <I2C_RequestMemoryWrite+0x128>)
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 f9bb 	bl	8006474 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e04c      	b.n	80061a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006108:	2300      	movs	r3, #0
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800611e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006120:	6a39      	ldr	r1, [r7, #32]
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 fa46 	bl	80065b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00d      	beq.n	800614a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006132:	2b04      	cmp	r3, #4
 8006134:	d107      	bne.n	8006146 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006144:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e02b      	b.n	80061a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800614a:	88fb      	ldrh	r3, [r7, #6]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d105      	bne.n	800615c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006150:	893b      	ldrh	r3, [r7, #8]
 8006152:	b2da      	uxtb	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	611a      	str	r2, [r3, #16]
 800615a:	e021      	b.n	80061a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800615c:	893b      	ldrh	r3, [r7, #8]
 800615e:	0a1b      	lsrs	r3, r3, #8
 8006160:	b29b      	uxth	r3, r3
 8006162:	b2da      	uxtb	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800616a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800616c:	6a39      	ldr	r1, [r7, #32]
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 fa20 	bl	80065b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00d      	beq.n	8006196 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617e:	2b04      	cmp	r3, #4
 8006180:	d107      	bne.n	8006192 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006190:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e005      	b.n	80061a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006196:	893b      	ldrh	r3, [r7, #8]
 8006198:	b2da      	uxtb	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	00010002 	.word	0x00010002

080061b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af02      	add	r7, sp, #8
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	4608      	mov	r0, r1
 80061ba:	4611      	mov	r1, r2
 80061bc:	461a      	mov	r2, r3
 80061be:	4603      	mov	r3, r0
 80061c0:	817b      	strh	r3, [r7, #10]
 80061c2:	460b      	mov	r3, r1
 80061c4:	813b      	strh	r3, [r7, #8]
 80061c6:	4613      	mov	r3, r2
 80061c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80061d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 f8c2 	bl	8006380 <I2C_WaitOnFlagUntilTimeout>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00d      	beq.n	800621e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800620c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006210:	d103      	bne.n	800621a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006218:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e0aa      	b.n	8006374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800621e:	897b      	ldrh	r3, [r7, #10]
 8006220:	b2db      	uxtb	r3, r3
 8006222:	461a      	mov	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800622c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	6a3a      	ldr	r2, [r7, #32]
 8006232:	4952      	ldr	r1, [pc, #328]	@ (800637c <I2C_RequestMemoryRead+0x1cc>)
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 f91d 	bl	8006474 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e097      	b.n	8006374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006244:	2300      	movs	r3, #0
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800625a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800625c:	6a39      	ldr	r1, [r7, #32]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 f9a8 	bl	80065b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00d      	beq.n	8006286 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626e:	2b04      	cmp	r3, #4
 8006270:	d107      	bne.n	8006282 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006280:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e076      	b.n	8006374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006286:	88fb      	ldrh	r3, [r7, #6]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d105      	bne.n	8006298 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800628c:	893b      	ldrh	r3, [r7, #8]
 800628e:	b2da      	uxtb	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	611a      	str	r2, [r3, #16]
 8006296:	e021      	b.n	80062dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006298:	893b      	ldrh	r3, [r7, #8]
 800629a:	0a1b      	lsrs	r3, r3, #8
 800629c:	b29b      	uxth	r3, r3
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a8:	6a39      	ldr	r1, [r7, #32]
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 f982 	bl	80065b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00d      	beq.n	80062d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d107      	bne.n	80062ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e050      	b.n	8006374 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062d2:	893b      	ldrh	r3, [r7, #8]
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062de:	6a39      	ldr	r1, [r7, #32]
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f967 	bl	80065b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00d      	beq.n	8006308 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d107      	bne.n	8006304 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006302:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e035      	b.n	8006374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006316:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	2200      	movs	r2, #0
 8006320:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 f82b 	bl	8006380 <I2C_WaitOnFlagUntilTimeout>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00d      	beq.n	800634c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800633a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800633e:	d103      	bne.n	8006348 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006346:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e013      	b.n	8006374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800634c:	897b      	ldrh	r3, [r7, #10]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	f043 0301 	orr.w	r3, r3, #1
 8006354:	b2da      	uxtb	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800635c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635e:	6a3a      	ldr	r2, [r7, #32]
 8006360:	4906      	ldr	r1, [pc, #24]	@ (800637c <I2C_RequestMemoryRead+0x1cc>)
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 f886 	bl	8006474 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e000      	b.n	8006374 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	00010002 	.word	0x00010002

08006380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	4613      	mov	r3, r2
 800638e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006390:	e048      	b.n	8006424 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006398:	d044      	beq.n	8006424 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800639a:	f7fe fd79 	bl	8004e90 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d302      	bcc.n	80063b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d139      	bne.n	8006424 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	0c1b      	lsrs	r3, r3, #16
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d10d      	bne.n	80063d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	43da      	mvns	r2, r3
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	4013      	ands	r3, r2
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	bf0c      	ite	eq
 80063cc:	2301      	moveq	r3, #1
 80063ce:	2300      	movne	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	461a      	mov	r2, r3
 80063d4:	e00c      	b.n	80063f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	43da      	mvns	r2, r3
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	4013      	ands	r3, r2
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	bf0c      	ite	eq
 80063e8:	2301      	moveq	r3, #1
 80063ea:	2300      	movne	r3, #0
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	79fb      	ldrb	r3, [r7, #7]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d116      	bne.n	8006424 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006410:	f043 0220 	orr.w	r2, r3, #32
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e023      	b.n	800646c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	0c1b      	lsrs	r3, r3, #16
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b01      	cmp	r3, #1
 800642c:	d10d      	bne.n	800644a <I2C_WaitOnFlagUntilTimeout+0xca>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	43da      	mvns	r2, r3
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	4013      	ands	r3, r2
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	bf0c      	ite	eq
 8006440:	2301      	moveq	r3, #1
 8006442:	2300      	movne	r3, #0
 8006444:	b2db      	uxtb	r3, r3
 8006446:	461a      	mov	r2, r3
 8006448:	e00c      	b.n	8006464 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	43da      	mvns	r2, r3
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	4013      	ands	r3, r2
 8006456:	b29b      	uxth	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	bf0c      	ite	eq
 800645c:	2301      	moveq	r3, #1
 800645e:	2300      	movne	r3, #0
 8006460:	b2db      	uxtb	r3, r3
 8006462:	461a      	mov	r2, r3
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	429a      	cmp	r2, r3
 8006468:	d093      	beq.n	8006392 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
 8006480:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006482:	e071      	b.n	8006568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800648e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006492:	d123      	bne.n	80064dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c8:	f043 0204 	orr.w	r2, r3, #4
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e067      	b.n	80065ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e2:	d041      	beq.n	8006568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064e4:	f7fe fcd4 	bl	8004e90 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d302      	bcc.n	80064fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d136      	bne.n	8006568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	0c1b      	lsrs	r3, r3, #16
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	d10c      	bne.n	800651e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	43da      	mvns	r2, r3
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4013      	ands	r3, r2
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	bf14      	ite	ne
 8006516:	2301      	movne	r3, #1
 8006518:	2300      	moveq	r3, #0
 800651a:	b2db      	uxtb	r3, r3
 800651c:	e00b      	b.n	8006536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	43da      	mvns	r2, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	4013      	ands	r3, r2
 800652a:	b29b      	uxth	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	bf14      	ite	ne
 8006530:	2301      	movne	r3, #1
 8006532:	2300      	moveq	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d016      	beq.n	8006568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2220      	movs	r2, #32
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006554:	f043 0220 	orr.w	r2, r3, #32
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e021      	b.n	80065ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	0c1b      	lsrs	r3, r3, #16
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b01      	cmp	r3, #1
 8006570:	d10c      	bne.n	800658c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	43da      	mvns	r2, r3
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	4013      	ands	r3, r2
 800657e:	b29b      	uxth	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	bf14      	ite	ne
 8006584:	2301      	movne	r3, #1
 8006586:	2300      	moveq	r3, #0
 8006588:	b2db      	uxtb	r3, r3
 800658a:	e00b      	b.n	80065a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	43da      	mvns	r2, r3
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	4013      	ands	r3, r2
 8006598:	b29b      	uxth	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	bf14      	ite	ne
 800659e:	2301      	movne	r3, #1
 80065a0:	2300      	moveq	r3, #0
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f47f af6d 	bne.w	8006484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065c0:	e034      	b.n	800662c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 f8e3 	bl	800678e <I2C_IsAcknowledgeFailed>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e034      	b.n	800663c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d8:	d028      	beq.n	800662c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065da:	f7fe fc59 	bl	8004e90 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d302      	bcc.n	80065f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d11d      	bne.n	800662c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065fa:	2b80      	cmp	r3, #128	@ 0x80
 80065fc:	d016      	beq.n	800662c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2220      	movs	r2, #32
 8006608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006618:	f043 0220 	orr.w	r2, r3, #32
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e007      	b.n	800663c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006636:	2b80      	cmp	r3, #128	@ 0x80
 8006638:	d1c3      	bne.n	80065c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006650:	e034      	b.n	80066bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f89b 	bl	800678e <I2C_IsAcknowledgeFailed>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e034      	b.n	80066cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006668:	d028      	beq.n	80066bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800666a:	f7fe fc11 	bl	8004e90 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	429a      	cmp	r2, r3
 8006678:	d302      	bcc.n	8006680 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d11d      	bne.n	80066bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	f003 0304 	and.w	r3, r3, #4
 800668a:	2b04      	cmp	r3, #4
 800668c:	d016      	beq.n	80066bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2220      	movs	r2, #32
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a8:	f043 0220 	orr.w	r2, r3, #32
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e007      	b.n	80066cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	f003 0304 	and.w	r3, r3, #4
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	d1c3      	bne.n	8006652 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066e0:	e049      	b.n	8006776 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	f003 0310 	and.w	r3, r3, #16
 80066ec:	2b10      	cmp	r3, #16
 80066ee:	d119      	bne.n	8006724 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f06f 0210 	mvn.w	r2, #16
 80066f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2220      	movs	r2, #32
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e030      	b.n	8006786 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006724:	f7fe fbb4 	bl	8004e90 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	429a      	cmp	r2, r3
 8006732:	d302      	bcc.n	800673a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d11d      	bne.n	8006776 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006744:	2b40      	cmp	r3, #64	@ 0x40
 8006746:	d016      	beq.n	8006776 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2220      	movs	r2, #32
 8006752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006762:	f043 0220 	orr.w	r2, r3, #32
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e007      	b.n	8006786 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006780:	2b40      	cmp	r3, #64	@ 0x40
 8006782:	d1ae      	bne.n	80066e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800678e:	b480      	push	{r7}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067a4:	d11b      	bne.n	80067de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80067ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ca:	f043 0204 	orr.w	r2, r3, #4
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e000      	b.n	80067e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e0bf      	b.n	800697e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d106      	bne.n	8006818 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7fd fd5a 	bl	80042cc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699a      	ldr	r2, [r3, #24]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800682e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6999      	ldr	r1, [r3, #24]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006844:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6899      	ldr	r1, [r3, #8]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4b4a      	ldr	r3, [pc, #296]	@ (8006988 <HAL_LTDC_Init+0x19c>)
 8006860:	400b      	ands	r3, r1
 8006862:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	041b      	lsls	r3, r3, #16
 800686a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6899      	ldr	r1, [r3, #8]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	431a      	orrs	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68d9      	ldr	r1, [r3, #12]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	4b3e      	ldr	r3, [pc, #248]	@ (8006988 <HAL_LTDC_Init+0x19c>)
 800688e:	400b      	ands	r3, r1
 8006890:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	041b      	lsls	r3, r3, #16
 8006898:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68d9      	ldr	r1, [r3, #12]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a1a      	ldr	r2, [r3, #32]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	431a      	orrs	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6919      	ldr	r1, [r3, #16]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4b33      	ldr	r3, [pc, #204]	@ (8006988 <HAL_LTDC_Init+0x19c>)
 80068bc:	400b      	ands	r3, r1
 80068be:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c4:	041b      	lsls	r3, r3, #16
 80068c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6919      	ldr	r1, [r3, #16]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	431a      	orrs	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6959      	ldr	r1, [r3, #20]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	4b27      	ldr	r3, [pc, #156]	@ (8006988 <HAL_LTDC_Init+0x19c>)
 80068ea:	400b      	ands	r3, r1
 80068ec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f2:	041b      	lsls	r3, r3, #16
 80068f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6959      	ldr	r1, [r3, #20]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	431a      	orrs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006912:	021b      	lsls	r3, r3, #8
 8006914:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800691c:	041b      	lsls	r3, r3, #16
 800691e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800692e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006942:	431a      	orrs	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0206 	orr.w	r2, r2, #6
 800695a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f042 0201 	orr.w	r2, r2, #1
 800696a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	f000f800 	.word	0xf000f800

0800698c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800698c:	b5b0      	push	{r4, r5, r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d101      	bne.n	80069a6 <HAL_LTDC_ConfigLayer+0x1a>
 80069a2:	2302      	movs	r3, #2
 80069a4:	e02c      	b.n	8006a00 <HAL_LTDC_ConfigLayer+0x74>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2202      	movs	r2, #2
 80069b2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2134      	movs	r1, #52	@ 0x34
 80069bc:	fb01 f303 	mul.w	r3, r1, r3
 80069c0:	4413      	add	r3, r2
 80069c2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	4614      	mov	r4, r2
 80069ca:	461d      	mov	r5, r3
 80069cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	68b9      	ldr	r1, [r7, #8]
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f811 	bl	8006a08 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2201      	movs	r2, #1
 80069ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bdb0      	pop	{r4, r5, r7, pc}

08006a08 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b089      	sub	sp, #36	@ 0x24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	0c1b      	lsrs	r3, r3, #16
 8006a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a24:	4413      	add	r3, r2
 8006a26:	041b      	lsls	r3, r3, #16
 8006a28:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	01db      	lsls	r3, r3, #7
 8006a34:	4413      	add	r3, r2
 8006a36:	3384      	adds	r3, #132	@ 0x84
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	6812      	ldr	r2, [r2, #0]
 8006a3e:	4611      	mov	r1, r2
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	01d2      	lsls	r2, r2, #7
 8006a44:	440a      	add	r2, r1
 8006a46:	3284      	adds	r2, #132	@ 0x84
 8006a48:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006a4c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	0c1b      	lsrs	r3, r3, #16
 8006a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a5e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a60:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4619      	mov	r1, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	01db      	lsls	r3, r3, #7
 8006a6c:	440b      	add	r3, r1
 8006a6e:	3384      	adds	r3, #132	@ 0x84
 8006a70:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a76:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a86:	4413      	add	r3, r2
 8006a88:	041b      	lsls	r3, r3, #16
 8006a8a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	01db      	lsls	r3, r3, #7
 8006a96:	4413      	add	r3, r2
 8006a98:	3384      	adds	r3, #132	@ 0x84
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	6812      	ldr	r2, [r2, #0]
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	01d2      	lsls	r2, r2, #7
 8006aa6:	440a      	add	r2, r1
 8006aa8:	3284      	adds	r2, #132	@ 0x84
 8006aaa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006aae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006abe:	4413      	add	r3, r2
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	01db      	lsls	r3, r3, #7
 8006acc:	440b      	add	r3, r1
 8006ace:	3384      	adds	r3, #132	@ 0x84
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	461a      	mov	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	01db      	lsls	r3, r3, #7
 8006ae2:	4413      	add	r3, r2
 8006ae4:	3384      	adds	r3, #132	@ 0x84
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	6812      	ldr	r2, [r2, #0]
 8006aec:	4611      	mov	r1, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	01d2      	lsls	r2, r2, #7
 8006af2:	440a      	add	r2, r1
 8006af4:	3284      	adds	r2, #132	@ 0x84
 8006af6:	f023 0307 	bic.w	r3, r3, #7
 8006afa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	461a      	mov	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	01db      	lsls	r3, r3, #7
 8006b06:	4413      	add	r3, r2
 8006b08:	3384      	adds	r3, #132	@ 0x84
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006b18:	021b      	lsls	r3, r3, #8
 8006b1a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006b22:	041b      	lsls	r3, r3, #16
 8006b24:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	061b      	lsls	r3, r3, #24
 8006b2c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	01db      	lsls	r3, r3, #7
 8006b38:	4413      	add	r3, r2
 8006b3a:	3384      	adds	r3, #132	@ 0x84
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	01db      	lsls	r3, r3, #7
 8006b48:	4413      	add	r3, r2
 8006b4a:	3384      	adds	r3, #132	@ 0x84
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	2300      	movs	r3, #0
 8006b50:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006b58:	461a      	mov	r2, r3
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	431a      	orrs	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4619      	mov	r1, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	01db      	lsls	r3, r3, #7
 8006b6c:	440b      	add	r3, r1
 8006b6e:	3384      	adds	r3, #132	@ 0x84
 8006b70:	4619      	mov	r1, r3
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	01db      	lsls	r3, r3, #7
 8006b82:	4413      	add	r3, r2
 8006b84:	3384      	adds	r3, #132	@ 0x84
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	6812      	ldr	r2, [r2, #0]
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	01d2      	lsls	r2, r2, #7
 8006b92:	440a      	add	r2, r1
 8006b94:	3284      	adds	r2, #132	@ 0x84
 8006b96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006b9a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	01db      	lsls	r3, r3, #7
 8006ba6:	4413      	add	r3, r2
 8006ba8:	3384      	adds	r3, #132	@ 0x84
 8006baa:	461a      	mov	r2, r3
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	01db      	lsls	r3, r3, #7
 8006bbc:	4413      	add	r3, r2
 8006bbe:	3384      	adds	r3, #132	@ 0x84
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	6812      	ldr	r2, [r2, #0]
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	01d2      	lsls	r2, r2, #7
 8006bcc:	440a      	add	r2, r1
 8006bce:	3284      	adds	r2, #132	@ 0x84
 8006bd0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006bd4:	f023 0307 	bic.w	r3, r3, #7
 8006bd8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	69da      	ldr	r2, [r3, #28]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	68f9      	ldr	r1, [r7, #12]
 8006be4:	6809      	ldr	r1, [r1, #0]
 8006be6:	4608      	mov	r0, r1
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	01c9      	lsls	r1, r1, #7
 8006bec:	4401      	add	r1, r0
 8006bee:	3184      	adds	r1, #132	@ 0x84
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	01db      	lsls	r3, r3, #7
 8006bfe:	4413      	add	r3, r2
 8006c00:	3384      	adds	r3, #132	@ 0x84
 8006c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	01db      	lsls	r3, r3, #7
 8006c0e:	4413      	add	r3, r2
 8006c10:	3384      	adds	r3, #132	@ 0x84
 8006c12:	461a      	mov	r2, r3
 8006c14:	2300      	movs	r3, #0
 8006c16:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	01db      	lsls	r3, r3, #7
 8006c22:	4413      	add	r3, r2
 8006c24:	3384      	adds	r3, #132	@ 0x84
 8006c26:	461a      	mov	r2, r3
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d102      	bne.n	8006c3c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006c36:	2304      	movs	r3, #4
 8006c38:	61fb      	str	r3, [r7, #28]
 8006c3a:	e01b      	b.n	8006c74 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d102      	bne.n	8006c4a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006c44:	2303      	movs	r3, #3
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	e014      	b.n	8006c74 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d00b      	beq.n	8006c6a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d007      	beq.n	8006c6a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d003      	beq.n	8006c6a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c66:	2b07      	cmp	r3, #7
 8006c68:	d102      	bne.n	8006c70 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	61fb      	str	r3, [r7, #28]
 8006c6e:	e001      	b.n	8006c74 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006c70:	2301      	movs	r3, #1
 8006c72:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	461a      	mov	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	01db      	lsls	r3, r3, #7
 8006c7e:	4413      	add	r3, r2
 8006c80:	3384      	adds	r3, #132	@ 0x84
 8006c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	6812      	ldr	r2, [r2, #0]
 8006c88:	4611      	mov	r1, r2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	01d2      	lsls	r2, r2, #7
 8006c8e:	440a      	add	r2, r1
 8006c90:	3284      	adds	r2, #132	@ 0x84
 8006c92:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006c96:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9c:	69fa      	ldr	r2, [r7, #28]
 8006c9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ca2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	6859      	ldr	r1, [r3, #4]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	1acb      	subs	r3, r1, r3
 8006cae:	69f9      	ldr	r1, [r7, #28]
 8006cb0:	fb01 f303 	mul.w	r3, r1, r3
 8006cb4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006cb6:	68f9      	ldr	r1, [r7, #12]
 8006cb8:	6809      	ldr	r1, [r1, #0]
 8006cba:	4608      	mov	r0, r1
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	01c9      	lsls	r1, r1, #7
 8006cc0:	4401      	add	r1, r0
 8006cc2:	3184      	adds	r1, #132	@ 0x84
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	01db      	lsls	r3, r3, #7
 8006cd2:	4413      	add	r3, r2
 8006cd4:	3384      	adds	r3, #132	@ 0x84
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	6812      	ldr	r2, [r2, #0]
 8006cdc:	4611      	mov	r1, r2
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	01d2      	lsls	r2, r2, #7
 8006ce2:	440a      	add	r2, r1
 8006ce4:	3284      	adds	r2, #132	@ 0x84
 8006ce6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006cea:	f023 0307 	bic.w	r3, r3, #7
 8006cee:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	01db      	lsls	r3, r3, #7
 8006cfa:	4413      	add	r3, r2
 8006cfc:	3384      	adds	r3, #132	@ 0x84
 8006cfe:	461a      	mov	r2, r3
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d04:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	01db      	lsls	r3, r3, #7
 8006d10:	4413      	add	r3, r2
 8006d12:	3384      	adds	r3, #132	@ 0x84
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	6812      	ldr	r2, [r2, #0]
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	01d2      	lsls	r2, r2, #7
 8006d20:	440a      	add	r2, r1
 8006d22:	3284      	adds	r2, #132	@ 0x84
 8006d24:	f043 0301 	orr.w	r3, r3, #1
 8006d28:	6013      	str	r3, [r2, #0]
}
 8006d2a:	bf00      	nop
 8006d2c:	3724      	adds	r7, #36	@ 0x24
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
	...

08006d38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e267      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d075      	beq.n	8006e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006d56:	4b88      	ldr	r3, [pc, #544]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f003 030c 	and.w	r3, r3, #12
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d00c      	beq.n	8006d7c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d62:	4b85      	ldr	r3, [pc, #532]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006d6a:	2b08      	cmp	r3, #8
 8006d6c:	d112      	bne.n	8006d94 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d6e:	4b82      	ldr	r3, [pc, #520]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d7a:	d10b      	bne.n	8006d94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d7c:	4b7e      	ldr	r3, [pc, #504]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d05b      	beq.n	8006e40 <HAL_RCC_OscConfig+0x108>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d157      	bne.n	8006e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e242      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d9c:	d106      	bne.n	8006dac <HAL_RCC_OscConfig+0x74>
 8006d9e:	4b76      	ldr	r3, [pc, #472]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a75      	ldr	r2, [pc, #468]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	e01d      	b.n	8006de8 <HAL_RCC_OscConfig+0xb0>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006db4:	d10c      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x98>
 8006db6:	4b70      	ldr	r3, [pc, #448]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a6f      	ldr	r2, [pc, #444]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a6c      	ldr	r2, [pc, #432]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	e00b      	b.n	8006de8 <HAL_RCC_OscConfig+0xb0>
 8006dd0:	4b69      	ldr	r3, [pc, #420]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a68      	ldr	r2, [pc, #416]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dda:	6013      	str	r3, [r2, #0]
 8006ddc:	4b66      	ldr	r3, [pc, #408]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a65      	ldr	r2, [pc, #404]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d013      	beq.n	8006e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006df0:	f7fe f84e 	bl	8004e90 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006df8:	f7fe f84a 	bl	8004e90 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b64      	cmp	r3, #100	@ 0x64
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e207      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0f0      	beq.n	8006df8 <HAL_RCC_OscConfig+0xc0>
 8006e16:	e014      	b.n	8006e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e18:	f7fe f83a 	bl	8004e90 <HAL_GetTick>
 8006e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e1e:	e008      	b.n	8006e32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e20:	f7fe f836 	bl	8004e90 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b64      	cmp	r3, #100	@ 0x64
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e1f3      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e32:	4b51      	ldr	r3, [pc, #324]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1f0      	bne.n	8006e20 <HAL_RCC_OscConfig+0xe8>
 8006e3e:	e000      	b.n	8006e42 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d063      	beq.n	8006f16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f003 030c 	and.w	r3, r3, #12
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00b      	beq.n	8006e72 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e5a:	4b47      	ldr	r3, [pc, #284]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006e62:	2b08      	cmp	r3, #8
 8006e64:	d11c      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e66:	4b44      	ldr	r3, [pc, #272]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d116      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e72:	4b41      	ldr	r3, [pc, #260]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d005      	beq.n	8006e8a <HAL_RCC_OscConfig+0x152>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d001      	beq.n	8006e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e1c7      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	4937      	ldr	r1, [pc, #220]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e9e:	e03a      	b.n	8006f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d020      	beq.n	8006eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ea8:	4b34      	ldr	r3, [pc, #208]	@ (8006f7c <HAL_RCC_OscConfig+0x244>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eae:	f7fd ffef 	bl	8004e90 <HAL_GetTick>
 8006eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eb4:	e008      	b.n	8006ec8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eb6:	f7fd ffeb 	bl	8004e90 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d901      	bls.n	8006ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e1a8      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0f0      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ed4:	4b28      	ldr	r3, [pc, #160]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	00db      	lsls	r3, r3, #3
 8006ee2:	4925      	ldr	r1, [pc, #148]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	600b      	str	r3, [r1, #0]
 8006ee8:	e015      	b.n	8006f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eea:	4b24      	ldr	r3, [pc, #144]	@ (8006f7c <HAL_RCC_OscConfig+0x244>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef0:	f7fd ffce 	bl	8004e90 <HAL_GetTick>
 8006ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ef6:	e008      	b.n	8006f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ef8:	f7fd ffca 	bl	8004e90 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e187      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1f0      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0308 	and.w	r3, r3, #8
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d036      	beq.n	8006f90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d016      	beq.n	8006f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f2a:	4b15      	ldr	r3, [pc, #84]	@ (8006f80 <HAL_RCC_OscConfig+0x248>)
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f30:	f7fd ffae 	bl	8004e90 <HAL_GetTick>
 8006f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f36:	e008      	b.n	8006f4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f38:	f7fd ffaa 	bl	8004e90 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e167      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f78 <HAL_RCC_OscConfig+0x240>)
 8006f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0f0      	beq.n	8006f38 <HAL_RCC_OscConfig+0x200>
 8006f56:	e01b      	b.n	8006f90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f58:	4b09      	ldr	r3, [pc, #36]	@ (8006f80 <HAL_RCC_OscConfig+0x248>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f5e:	f7fd ff97 	bl	8004e90 <HAL_GetTick>
 8006f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f64:	e00e      	b.n	8006f84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f66:	f7fd ff93 	bl	8004e90 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d907      	bls.n	8006f84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e150      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
 8006f78:	40023800 	.word	0x40023800
 8006f7c:	42470000 	.word	0x42470000
 8006f80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f84:	4b88      	ldr	r3, [pc, #544]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 8006f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1ea      	bne.n	8006f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 8097 	beq.w	80070cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fa2:	4b81      	ldr	r3, [pc, #516]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10f      	bne.n	8006fce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60bb      	str	r3, [r7, #8]
 8006fb2:	4b7d      	ldr	r3, [pc, #500]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb6:	4a7c      	ldr	r2, [pc, #496]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 8006fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006fbe:	4b7a      	ldr	r3, [pc, #488]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fc6:	60bb      	str	r3, [r7, #8]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fce:	4b77      	ldr	r3, [pc, #476]	@ (80071ac <HAL_RCC_OscConfig+0x474>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d118      	bne.n	800700c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fda:	4b74      	ldr	r3, [pc, #464]	@ (80071ac <HAL_RCC_OscConfig+0x474>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a73      	ldr	r2, [pc, #460]	@ (80071ac <HAL_RCC_OscConfig+0x474>)
 8006fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fe6:	f7fd ff53 	bl	8004e90 <HAL_GetTick>
 8006fea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fec:	e008      	b.n	8007000 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fee:	f7fd ff4f 	bl	8004e90 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d901      	bls.n	8007000 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e10c      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007000:	4b6a      	ldr	r3, [pc, #424]	@ (80071ac <HAL_RCC_OscConfig+0x474>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007008:	2b00      	cmp	r3, #0
 800700a:	d0f0      	beq.n	8006fee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d106      	bne.n	8007022 <HAL_RCC_OscConfig+0x2ea>
 8007014:	4b64      	ldr	r3, [pc, #400]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 8007016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007018:	4a63      	ldr	r2, [pc, #396]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 800701a:	f043 0301 	orr.w	r3, r3, #1
 800701e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007020:	e01c      	b.n	800705c <HAL_RCC_OscConfig+0x324>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	2b05      	cmp	r3, #5
 8007028:	d10c      	bne.n	8007044 <HAL_RCC_OscConfig+0x30c>
 800702a:	4b5f      	ldr	r3, [pc, #380]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 800702c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702e:	4a5e      	ldr	r2, [pc, #376]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 8007030:	f043 0304 	orr.w	r3, r3, #4
 8007034:	6713      	str	r3, [r2, #112]	@ 0x70
 8007036:	4b5c      	ldr	r3, [pc, #368]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 8007038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800703a:	4a5b      	ldr	r2, [pc, #364]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 800703c:	f043 0301 	orr.w	r3, r3, #1
 8007040:	6713      	str	r3, [r2, #112]	@ 0x70
 8007042:	e00b      	b.n	800705c <HAL_RCC_OscConfig+0x324>
 8007044:	4b58      	ldr	r3, [pc, #352]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 8007046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007048:	4a57      	ldr	r2, [pc, #348]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 800704a:	f023 0301 	bic.w	r3, r3, #1
 800704e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007050:	4b55      	ldr	r3, [pc, #340]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 8007052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007054:	4a54      	ldr	r2, [pc, #336]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 8007056:	f023 0304 	bic.w	r3, r3, #4
 800705a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d015      	beq.n	8007090 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007064:	f7fd ff14 	bl	8004e90 <HAL_GetTick>
 8007068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800706a:	e00a      	b.n	8007082 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800706c:	f7fd ff10 	bl	8004e90 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800707a:	4293      	cmp	r3, r2
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e0cb      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007082:	4b49      	ldr	r3, [pc, #292]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 8007084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0ee      	beq.n	800706c <HAL_RCC_OscConfig+0x334>
 800708e:	e014      	b.n	80070ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007090:	f7fd fefe 	bl	8004e90 <HAL_GetTick>
 8007094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007096:	e00a      	b.n	80070ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007098:	f7fd fefa 	bl	8004e90 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e0b5      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070ae:	4b3e      	ldr	r3, [pc, #248]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 80070b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1ee      	bne.n	8007098 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d105      	bne.n	80070cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070c0:	4b39      	ldr	r3, [pc, #228]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 80070c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c4:	4a38      	ldr	r2, [pc, #224]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 80070c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 80a1 	beq.w	8007218 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070d6:	4b34      	ldr	r3, [pc, #208]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f003 030c 	and.w	r3, r3, #12
 80070de:	2b08      	cmp	r3, #8
 80070e0:	d05c      	beq.n	800719c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d141      	bne.n	800716e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070ea:	4b31      	ldr	r3, [pc, #196]	@ (80071b0 <HAL_RCC_OscConfig+0x478>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070f0:	f7fd fece 	bl	8004e90 <HAL_GetTick>
 80070f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070f6:	e008      	b.n	800710a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070f8:	f7fd feca 	bl	8004e90 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e087      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800710a:	4b27      	ldr	r3, [pc, #156]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1f0      	bne.n	80070f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	69da      	ldr	r2, [r3, #28]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	431a      	orrs	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007124:	019b      	lsls	r3, r3, #6
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712c:	085b      	lsrs	r3, r3, #1
 800712e:	3b01      	subs	r3, #1
 8007130:	041b      	lsls	r3, r3, #16
 8007132:	431a      	orrs	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007138:	061b      	lsls	r3, r3, #24
 800713a:	491b      	ldr	r1, [pc, #108]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 800713c:	4313      	orrs	r3, r2
 800713e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007140:	4b1b      	ldr	r3, [pc, #108]	@ (80071b0 <HAL_RCC_OscConfig+0x478>)
 8007142:	2201      	movs	r2, #1
 8007144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007146:	f7fd fea3 	bl	8004e90 <HAL_GetTick>
 800714a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800714c:	e008      	b.n	8007160 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800714e:	f7fd fe9f 	bl	8004e90 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d901      	bls.n	8007160 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e05c      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007160:	4b11      	ldr	r3, [pc, #68]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d0f0      	beq.n	800714e <HAL_RCC_OscConfig+0x416>
 800716c:	e054      	b.n	8007218 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800716e:	4b10      	ldr	r3, [pc, #64]	@ (80071b0 <HAL_RCC_OscConfig+0x478>)
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007174:	f7fd fe8c 	bl	8004e90 <HAL_GetTick>
 8007178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800717a:	e008      	b.n	800718e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800717c:	f7fd fe88 	bl	8004e90 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e045      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800718e:	4b06      	ldr	r3, [pc, #24]	@ (80071a8 <HAL_RCC_OscConfig+0x470>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1f0      	bne.n	800717c <HAL_RCC_OscConfig+0x444>
 800719a:	e03d      	b.n	8007218 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d107      	bne.n	80071b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e038      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
 80071a8:	40023800 	.word	0x40023800
 80071ac:	40007000 	.word	0x40007000
 80071b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071b4:	4b1b      	ldr	r3, [pc, #108]	@ (8007224 <HAL_RCC_OscConfig+0x4ec>)
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d028      	beq.n	8007214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d121      	bne.n	8007214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071da:	429a      	cmp	r2, r3
 80071dc:	d11a      	bne.n	8007214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80071e4:	4013      	ands	r3, r2
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80071ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d111      	bne.n	8007214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fa:	085b      	lsrs	r3, r3, #1
 80071fc:	3b01      	subs	r3, #1
 80071fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007200:	429a      	cmp	r2, r3
 8007202:	d107      	bne.n	8007214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007210:	429a      	cmp	r2, r3
 8007212:	d001      	beq.n	8007218 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e000      	b.n	800721a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	40023800 	.word	0x40023800

08007228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e0cc      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800723c:	4b68      	ldr	r3, [pc, #416]	@ (80073e0 <HAL_RCC_ClockConfig+0x1b8>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 030f 	and.w	r3, r3, #15
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	429a      	cmp	r2, r3
 8007248:	d90c      	bls.n	8007264 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800724a:	4b65      	ldr	r3, [pc, #404]	@ (80073e0 <HAL_RCC_ClockConfig+0x1b8>)
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	b2d2      	uxtb	r2, r2
 8007250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007252:	4b63      	ldr	r3, [pc, #396]	@ (80073e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 030f 	and.w	r3, r3, #15
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	d001      	beq.n	8007264 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e0b8      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d020      	beq.n	80072b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800727c:	4b59      	ldr	r3, [pc, #356]	@ (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	4a58      	ldr	r2, [pc, #352]	@ (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007282:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007286:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0308 	and.w	r3, r3, #8
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007294:	4b53      	ldr	r3, [pc, #332]	@ (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	4a52      	ldr	r2, [pc, #328]	@ (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 800729a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800729e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072a0:	4b50      	ldr	r3, [pc, #320]	@ (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	494d      	ldr	r1, [pc, #308]	@ (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d044      	beq.n	8007348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d107      	bne.n	80072d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072c6:	4b47      	ldr	r3, [pc, #284]	@ (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d119      	bne.n	8007306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e07f      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d003      	beq.n	80072e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d107      	bne.n	80072f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072e6:	4b3f      	ldr	r3, [pc, #252]	@ (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d109      	bne.n	8007306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e06f      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072f6:	4b3b      	ldr	r3, [pc, #236]	@ (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e067      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007306:	4b37      	ldr	r3, [pc, #220]	@ (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f023 0203 	bic.w	r2, r3, #3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	4934      	ldr	r1, [pc, #208]	@ (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007314:	4313      	orrs	r3, r2
 8007316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007318:	f7fd fdba 	bl	8004e90 <HAL_GetTick>
 800731c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800731e:	e00a      	b.n	8007336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007320:	f7fd fdb6 	bl	8004e90 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800732e:	4293      	cmp	r3, r2
 8007330:	d901      	bls.n	8007336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e04f      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007336:	4b2b      	ldr	r3, [pc, #172]	@ (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f003 020c 	and.w	r2, r3, #12
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	429a      	cmp	r2, r3
 8007346:	d1eb      	bne.n	8007320 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007348:	4b25      	ldr	r3, [pc, #148]	@ (80073e0 <HAL_RCC_ClockConfig+0x1b8>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 030f 	and.w	r3, r3, #15
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	429a      	cmp	r2, r3
 8007354:	d20c      	bcs.n	8007370 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007356:	4b22      	ldr	r3, [pc, #136]	@ (80073e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800735e:	4b20      	ldr	r3, [pc, #128]	@ (80073e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 030f 	and.w	r3, r3, #15
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	429a      	cmp	r2, r3
 800736a:	d001      	beq.n	8007370 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e032      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b00      	cmp	r3, #0
 800737a:	d008      	beq.n	800738e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800737c:	4b19      	ldr	r3, [pc, #100]	@ (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	4916      	ldr	r1, [pc, #88]	@ (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 800738a:	4313      	orrs	r3, r2
 800738c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0308 	and.w	r3, r3, #8
 8007396:	2b00      	cmp	r3, #0
 8007398:	d009      	beq.n	80073ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800739a:	4b12      	ldr	r3, [pc, #72]	@ (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	490e      	ldr	r1, [pc, #56]	@ (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073ae:	f000 f821 	bl	80073f4 <HAL_RCC_GetSysClockFreq>
 80073b2:	4602      	mov	r2, r0
 80073b4:	4b0b      	ldr	r3, [pc, #44]	@ (80073e4 <HAL_RCC_ClockConfig+0x1bc>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	091b      	lsrs	r3, r3, #4
 80073ba:	f003 030f 	and.w	r3, r3, #15
 80073be:	490a      	ldr	r1, [pc, #40]	@ (80073e8 <HAL_RCC_ClockConfig+0x1c0>)
 80073c0:	5ccb      	ldrb	r3, [r1, r3]
 80073c2:	fa22 f303 	lsr.w	r3, r2, r3
 80073c6:	4a09      	ldr	r2, [pc, #36]	@ (80073ec <HAL_RCC_ClockConfig+0x1c4>)
 80073c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80073ca:	4b09      	ldr	r3, [pc, #36]	@ (80073f0 <HAL_RCC_ClockConfig+0x1c8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fd fd1a 	bl	8004e08 <HAL_InitTick>

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	40023c00 	.word	0x40023c00
 80073e4:	40023800 	.word	0x40023800
 80073e8:	0800a79c 	.word	0x0800a79c
 80073ec:	20000010 	.word	0x20000010
 80073f0:	20000014 	.word	0x20000014

080073f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073f8:	b094      	sub	sp, #80	@ 0x50
 80073fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800740c:	4b79      	ldr	r3, [pc, #484]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 030c 	and.w	r3, r3, #12
 8007414:	2b08      	cmp	r3, #8
 8007416:	d00d      	beq.n	8007434 <HAL_RCC_GetSysClockFreq+0x40>
 8007418:	2b08      	cmp	r3, #8
 800741a:	f200 80e1 	bhi.w	80075e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <HAL_RCC_GetSysClockFreq+0x34>
 8007422:	2b04      	cmp	r3, #4
 8007424:	d003      	beq.n	800742e <HAL_RCC_GetSysClockFreq+0x3a>
 8007426:	e0db      	b.n	80075e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007428:	4b73      	ldr	r3, [pc, #460]	@ (80075f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800742a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800742c:	e0db      	b.n	80075e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800742e:	4b73      	ldr	r3, [pc, #460]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x208>)
 8007430:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007432:	e0d8      	b.n	80075e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007434:	4b6f      	ldr	r3, [pc, #444]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800743c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800743e:	4b6d      	ldr	r3, [pc, #436]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d063      	beq.n	8007512 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800744a:	4b6a      	ldr	r3, [pc, #424]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	099b      	lsrs	r3, r3, #6
 8007450:	2200      	movs	r2, #0
 8007452:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007454:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800745c:	633b      	str	r3, [r7, #48]	@ 0x30
 800745e:	2300      	movs	r3, #0
 8007460:	637b      	str	r3, [r7, #52]	@ 0x34
 8007462:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007466:	4622      	mov	r2, r4
 8007468:	462b      	mov	r3, r5
 800746a:	f04f 0000 	mov.w	r0, #0
 800746e:	f04f 0100 	mov.w	r1, #0
 8007472:	0159      	lsls	r1, r3, #5
 8007474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007478:	0150      	lsls	r0, r2, #5
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4621      	mov	r1, r4
 8007480:	1a51      	subs	r1, r2, r1
 8007482:	6139      	str	r1, [r7, #16]
 8007484:	4629      	mov	r1, r5
 8007486:	eb63 0301 	sbc.w	r3, r3, r1
 800748a:	617b      	str	r3, [r7, #20]
 800748c:	f04f 0200 	mov.w	r2, #0
 8007490:	f04f 0300 	mov.w	r3, #0
 8007494:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007498:	4659      	mov	r1, fp
 800749a:	018b      	lsls	r3, r1, #6
 800749c:	4651      	mov	r1, sl
 800749e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80074a2:	4651      	mov	r1, sl
 80074a4:	018a      	lsls	r2, r1, #6
 80074a6:	4651      	mov	r1, sl
 80074a8:	ebb2 0801 	subs.w	r8, r2, r1
 80074ac:	4659      	mov	r1, fp
 80074ae:	eb63 0901 	sbc.w	r9, r3, r1
 80074b2:	f04f 0200 	mov.w	r2, #0
 80074b6:	f04f 0300 	mov.w	r3, #0
 80074ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074c6:	4690      	mov	r8, r2
 80074c8:	4699      	mov	r9, r3
 80074ca:	4623      	mov	r3, r4
 80074cc:	eb18 0303 	adds.w	r3, r8, r3
 80074d0:	60bb      	str	r3, [r7, #8]
 80074d2:	462b      	mov	r3, r5
 80074d4:	eb49 0303 	adc.w	r3, r9, r3
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	f04f 0200 	mov.w	r2, #0
 80074de:	f04f 0300 	mov.w	r3, #0
 80074e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80074e6:	4629      	mov	r1, r5
 80074e8:	024b      	lsls	r3, r1, #9
 80074ea:	4621      	mov	r1, r4
 80074ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80074f0:	4621      	mov	r1, r4
 80074f2:	024a      	lsls	r2, r1, #9
 80074f4:	4610      	mov	r0, r2
 80074f6:	4619      	mov	r1, r3
 80074f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074fa:	2200      	movs	r2, #0
 80074fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007500:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007504:	f7f8 fec4 	bl	8000290 <__aeabi_uldivmod>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4613      	mov	r3, r2
 800750e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007510:	e058      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007512:	4b38      	ldr	r3, [pc, #224]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	099b      	lsrs	r3, r3, #6
 8007518:	2200      	movs	r2, #0
 800751a:	4618      	mov	r0, r3
 800751c:	4611      	mov	r1, r2
 800751e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007522:	623b      	str	r3, [r7, #32]
 8007524:	2300      	movs	r3, #0
 8007526:	627b      	str	r3, [r7, #36]	@ 0x24
 8007528:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800752c:	4642      	mov	r2, r8
 800752e:	464b      	mov	r3, r9
 8007530:	f04f 0000 	mov.w	r0, #0
 8007534:	f04f 0100 	mov.w	r1, #0
 8007538:	0159      	lsls	r1, r3, #5
 800753a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800753e:	0150      	lsls	r0, r2, #5
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	4641      	mov	r1, r8
 8007546:	ebb2 0a01 	subs.w	sl, r2, r1
 800754a:	4649      	mov	r1, r9
 800754c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	f04f 0300 	mov.w	r3, #0
 8007558:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800755c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007560:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007564:	ebb2 040a 	subs.w	r4, r2, sl
 8007568:	eb63 050b 	sbc.w	r5, r3, fp
 800756c:	f04f 0200 	mov.w	r2, #0
 8007570:	f04f 0300 	mov.w	r3, #0
 8007574:	00eb      	lsls	r3, r5, #3
 8007576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800757a:	00e2      	lsls	r2, r4, #3
 800757c:	4614      	mov	r4, r2
 800757e:	461d      	mov	r5, r3
 8007580:	4643      	mov	r3, r8
 8007582:	18e3      	adds	r3, r4, r3
 8007584:	603b      	str	r3, [r7, #0]
 8007586:	464b      	mov	r3, r9
 8007588:	eb45 0303 	adc.w	r3, r5, r3
 800758c:	607b      	str	r3, [r7, #4]
 800758e:	f04f 0200 	mov.w	r2, #0
 8007592:	f04f 0300 	mov.w	r3, #0
 8007596:	e9d7 4500 	ldrd	r4, r5, [r7]
 800759a:	4629      	mov	r1, r5
 800759c:	028b      	lsls	r3, r1, #10
 800759e:	4621      	mov	r1, r4
 80075a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075a4:	4621      	mov	r1, r4
 80075a6:	028a      	lsls	r2, r1, #10
 80075a8:	4610      	mov	r0, r2
 80075aa:	4619      	mov	r1, r3
 80075ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075ae:	2200      	movs	r2, #0
 80075b0:	61bb      	str	r3, [r7, #24]
 80075b2:	61fa      	str	r2, [r7, #28]
 80075b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075b8:	f7f8 fe6a 	bl	8000290 <__aeabi_uldivmod>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4613      	mov	r3, r2
 80075c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80075c4:	4b0b      	ldr	r3, [pc, #44]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	0c1b      	lsrs	r3, r3, #16
 80075ca:	f003 0303 	and.w	r3, r3, #3
 80075ce:	3301      	adds	r3, #1
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80075d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80075d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80075de:	e002      	b.n	80075e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075e0:	4b05      	ldr	r3, [pc, #20]	@ (80075f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80075e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80075e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3750      	adds	r7, #80	@ 0x50
 80075ec:	46bd      	mov	sp, r7
 80075ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075f2:	bf00      	nop
 80075f4:	40023800 	.word	0x40023800
 80075f8:	00f42400 	.word	0x00f42400
 80075fc:	007a1200 	.word	0x007a1200

08007600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007600:	b480      	push	{r7}
 8007602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007604:	4b03      	ldr	r3, [pc, #12]	@ (8007614 <HAL_RCC_GetHCLKFreq+0x14>)
 8007606:	681b      	ldr	r3, [r3, #0]
}
 8007608:	4618      	mov	r0, r3
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	20000010 	.word	0x20000010

08007618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800761c:	f7ff fff0 	bl	8007600 <HAL_RCC_GetHCLKFreq>
 8007620:	4602      	mov	r2, r0
 8007622:	4b05      	ldr	r3, [pc, #20]	@ (8007638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	0a9b      	lsrs	r3, r3, #10
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	4903      	ldr	r1, [pc, #12]	@ (800763c <HAL_RCC_GetPCLK1Freq+0x24>)
 800762e:	5ccb      	ldrb	r3, [r1, r3]
 8007630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007634:	4618      	mov	r0, r3
 8007636:	bd80      	pop	{r7, pc}
 8007638:	40023800 	.word	0x40023800
 800763c:	0800a7ac 	.word	0x0800a7ac

08007640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10b      	bne.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007664:	2b00      	cmp	r3, #0
 8007666:	d105      	bne.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007670:	2b00      	cmp	r3, #0
 8007672:	d075      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007674:	4b91      	ldr	r3, [pc, #580]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007676:	2200      	movs	r2, #0
 8007678:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800767a:	f7fd fc09 	bl	8004e90 <HAL_GetTick>
 800767e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007680:	e008      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007682:	f7fd fc05 	bl	8004e90 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	2b02      	cmp	r3, #2
 800768e:	d901      	bls.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e189      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007694:	4b8a      	ldr	r3, [pc, #552]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1f0      	bne.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d009      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	019a      	lsls	r2, r3, #6
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	071b      	lsls	r3, r3, #28
 80076b8:	4981      	ldr	r1, [pc, #516]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d01f      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80076cc:	4b7c      	ldr	r3, [pc, #496]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076d2:	0f1b      	lsrs	r3, r3, #28
 80076d4:	f003 0307 	and.w	r3, r3, #7
 80076d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	019a      	lsls	r2, r3, #6
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	061b      	lsls	r3, r3, #24
 80076e6:	431a      	orrs	r2, r3
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	071b      	lsls	r3, r3, #28
 80076ec:	4974      	ldr	r1, [pc, #464]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80076f4:	4b72      	ldr	r3, [pc, #456]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076fa:	f023 021f 	bic.w	r2, r3, #31
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	69db      	ldr	r3, [r3, #28]
 8007702:	3b01      	subs	r3, #1
 8007704:	496e      	ldr	r1, [pc, #440]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007706:	4313      	orrs	r3, r2
 8007708:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00d      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	019a      	lsls	r2, r3, #6
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	061b      	lsls	r3, r3, #24
 8007724:	431a      	orrs	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	071b      	lsls	r3, r3, #28
 800772c:	4964      	ldr	r1, [pc, #400]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800772e:	4313      	orrs	r3, r2
 8007730:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007734:	4b61      	ldr	r3, [pc, #388]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007736:	2201      	movs	r2, #1
 8007738:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800773a:	f7fd fba9 	bl	8004e90 <HAL_GetTick>
 800773e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007740:	e008      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007742:	f7fd fba5 	bl	8004e90 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d901      	bls.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e129      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007754:	4b5a      	ldr	r3, [pc, #360]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0f0      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0304 	and.w	r3, r3, #4
 8007768:	2b00      	cmp	r3, #0
 800776a:	d105      	bne.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007774:	2b00      	cmp	r3, #0
 8007776:	d079      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007778:	4b52      	ldr	r3, [pc, #328]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800777a:	2200      	movs	r2, #0
 800777c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800777e:	f7fd fb87 	bl	8004e90 <HAL_GetTick>
 8007782:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007784:	e008      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007786:	f7fd fb83 	bl	8004e90 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d901      	bls.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e107      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007798:	4b49      	ldr	r3, [pc, #292]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077a4:	d0ef      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0304 	and.w	r3, r3, #4
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d020      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80077b2:	4b43      	ldr	r3, [pc, #268]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077b8:	0f1b      	lsrs	r3, r3, #28
 80077ba:	f003 0307 	and.w	r3, r3, #7
 80077be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	019a      	lsls	r2, r3, #6
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	061b      	lsls	r3, r3, #24
 80077cc:	431a      	orrs	r2, r3
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	071b      	lsls	r3, r3, #28
 80077d2:	493b      	ldr	r1, [pc, #236]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80077da:	4b39      	ldr	r3, [pc, #228]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077e0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a1b      	ldr	r3, [r3, #32]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	021b      	lsls	r3, r3, #8
 80077ec:	4934      	ldr	r1, [pc, #208]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0308 	and.w	r3, r3, #8
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d01e      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007800:	4b2f      	ldr	r3, [pc, #188]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007806:	0e1b      	lsrs	r3, r3, #24
 8007808:	f003 030f 	and.w	r3, r3, #15
 800780c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	019a      	lsls	r2, r3, #6
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	061b      	lsls	r3, r3, #24
 8007818:	431a      	orrs	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	071b      	lsls	r3, r3, #28
 8007820:	4927      	ldr	r1, [pc, #156]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007822:	4313      	orrs	r3, r2
 8007824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007828:	4b25      	ldr	r3, [pc, #148]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800782a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800782e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007836:	4922      	ldr	r1, [pc, #136]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007838:	4313      	orrs	r3, r2
 800783a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800783e:	4b21      	ldr	r3, [pc, #132]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007840:	2201      	movs	r2, #1
 8007842:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007844:	f7fd fb24 	bl	8004e90 <HAL_GetTick>
 8007848:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800784a:	e008      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800784c:	f7fd fb20 	bl	8004e90 <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b02      	cmp	r3, #2
 8007858:	d901      	bls.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e0a4      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800785e:	4b18      	ldr	r3, [pc, #96]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800786a:	d1ef      	bne.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 0320 	and.w	r3, r3, #32
 8007874:	2b00      	cmp	r3, #0
 8007876:	f000 808b 	beq.w	8007990 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800787a:	2300      	movs	r3, #0
 800787c:	60fb      	str	r3, [r7, #12]
 800787e:	4b10      	ldr	r3, [pc, #64]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007882:	4a0f      	ldr	r2, [pc, #60]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007888:	6413      	str	r3, [r2, #64]	@ 0x40
 800788a:	4b0d      	ldr	r3, [pc, #52]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800788c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007896:	4b0c      	ldr	r3, [pc, #48]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a0b      	ldr	r2, [pc, #44]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800789c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078a2:	f7fd faf5 	bl	8004e90 <HAL_GetTick>
 80078a6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80078a8:	e010      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078aa:	f7fd faf1 	bl	8004e90 <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d909      	bls.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e075      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80078bc:	42470068 	.word	0x42470068
 80078c0:	40023800 	.word	0x40023800
 80078c4:	42470070 	.word	0x42470070
 80078c8:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80078cc:	4b38      	ldr	r3, [pc, #224]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d0e8      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80078d8:	4b36      	ldr	r3, [pc, #216]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80078da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078e0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d02f      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d028      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078f6:	4b2f      	ldr	r3, [pc, #188]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80078f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007900:	4b2d      	ldr	r3, [pc, #180]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007902:	2201      	movs	r2, #1
 8007904:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007906:	4b2c      	ldr	r3, [pc, #176]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800790c:	4a29      	ldr	r2, [pc, #164]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007912:	4b28      	ldr	r3, [pc, #160]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b01      	cmp	r3, #1
 800791c:	d114      	bne.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800791e:	f7fd fab7 	bl	8004e90 <HAL_GetTick>
 8007922:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007924:	e00a      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007926:	f7fd fab3 	bl	8004e90 <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007934:	4293      	cmp	r3, r2
 8007936:	d901      	bls.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e035      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800793c:	4b1d      	ldr	r3, [pc, #116]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800793e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007940:	f003 0302 	and.w	r3, r3, #2
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0ee      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800794c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007950:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007954:	d10d      	bne.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007956:	4b17      	ldr	r3, [pc, #92]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007962:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800796a:	4912      	ldr	r1, [pc, #72]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800796c:	4313      	orrs	r3, r2
 800796e:	608b      	str	r3, [r1, #8]
 8007970:	e005      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007972:	4b10      	ldr	r3, [pc, #64]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	4a0f      	ldr	r2, [pc, #60]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007978:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800797c:	6093      	str	r3, [r2, #8]
 800797e:	4b0d      	ldr	r3, [pc, #52]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007980:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800798a:	490a      	ldr	r1, [pc, #40]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800798c:	4313      	orrs	r3, r2
 800798e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0310 	and.w	r3, r3, #16
 8007998:	2b00      	cmp	r3, #0
 800799a:	d004      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80079a2:	4b06      	ldr	r3, [pc, #24]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80079a4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	40007000 	.word	0x40007000
 80079b4:	40023800 	.word	0x40023800
 80079b8:	42470e40 	.word	0x42470e40
 80079bc:	424711e0 	.word	0x424711e0

080079c0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e01c      	b.n	8007a0c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	795b      	ldrb	r3, [r3, #5]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d105      	bne.n	80079e8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7fc fd9a 	bl	800451c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2202      	movs	r2, #2
 80079ec:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f042 0204 	orr.w	r2, r2, #4
 80079fc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	791b      	ldrb	r3, [r3, #4]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d101      	bne.n	8007a2e <HAL_RNG_GenerateRandomNumber+0x1a>
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	e044      	b.n	8007ab8 <HAL_RNG_GenerateRandomNumber+0xa4>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	795b      	ldrb	r3, [r3, #5]
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d133      	bne.n	8007aa6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2202      	movs	r2, #2
 8007a42:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a44:	f7fd fa24 	bl	8004e90 <HAL_GetTick>
 8007a48:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007a4a:	e018      	b.n	8007a7e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007a4c:	f7fd fa20 	bl	8004e90 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d911      	bls.n	8007a7e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d00a      	beq.n	8007a7e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2202      	movs	r2, #2
 8007a72:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e01c      	b.n	8007ab8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d1df      	bne.n	8007a4c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689a      	ldr	r2, [r3, #8]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	715a      	strb	r2, [r3, #5]
 8007aa4:	e004      	b.n	8007ab0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2204      	movs	r2, #4
 8007aaa:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	711a      	strb	r2, [r3, #4]

  return status;
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <HAL_RNG_GetState>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL state
  */
HAL_RNG_StateTypeDef HAL_RNG_GetState(const RNG_HandleTypeDef *hrng)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  return hrng->State;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	795b      	ldrb	r3, [r3, #5]
 8007acc:	b2db      	uxtb	r3, r3
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b082      	sub	sp, #8
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d101      	bne.n	8007aec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e07b      	b.n	8007be4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d108      	bne.n	8007b06 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007afc:	d009      	beq.n	8007b12 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	61da      	str	r2, [r3, #28]
 8007b04:	e005      	b.n	8007b12 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d106      	bne.n	8007b32 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7fc fd17 	bl	8004560 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2202      	movs	r2, #2
 8007b36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b48:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b64:	431a      	orrs	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	f003 0302 	and.w	r3, r3, #2
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b96:	ea42 0103 	orr.w	r1, r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b9e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	0c1b      	lsrs	r3, r3, #16
 8007bb0:	f003 0104 	and.w	r1, r3, #4
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb8:	f003 0210 	and.w	r2, r3, #16
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	69da      	ldr	r2, [r3, #28]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007bd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e01a      	b.n	8007c34 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2202      	movs	r2, #2
 8007c02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c14:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7fc fcea 	bl	80045f0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b088      	sub	sp, #32
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	603b      	str	r3, [r7, #0]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c4c:	f7fd f920 	bl	8004e90 <HAL_GetTick>
 8007c50:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007c52:	88fb      	ldrh	r3, [r7, #6]
 8007c54:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d001      	beq.n	8007c66 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007c62:	2302      	movs	r3, #2
 8007c64:	e12a      	b.n	8007ebc <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <HAL_SPI_Transmit+0x36>
 8007c6c:	88fb      	ldrh	r3, [r7, #6]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e122      	b.n	8007ebc <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d101      	bne.n	8007c84 <HAL_SPI_Transmit+0x48>
 8007c80:	2302      	movs	r3, #2
 8007c82:	e11b      	b.n	8007ebc <HAL_SPI_Transmit+0x280>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2203      	movs	r2, #3
 8007c90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	88fa      	ldrh	r2, [r7, #6]
 8007ca4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	88fa      	ldrh	r2, [r7, #6]
 8007caa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cd2:	d10f      	bne.n	8007cf4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ce2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007cf2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cfe:	2b40      	cmp	r3, #64	@ 0x40
 8007d00:	d007      	beq.n	8007d12 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d1a:	d152      	bne.n	8007dc2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d002      	beq.n	8007d2a <HAL_SPI_Transmit+0xee>
 8007d24:	8b7b      	ldrh	r3, [r7, #26]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d145      	bne.n	8007db6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d2e:	881a      	ldrh	r2, [r3, #0]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d3a:	1c9a      	adds	r2, r3, #2
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	3b01      	subs	r3, #1
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d4e:	e032      	b.n	8007db6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d112      	bne.n	8007d84 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d62:	881a      	ldrh	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d6e:	1c9a      	adds	r2, r3, #2
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007d82:	e018      	b.n	8007db6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d84:	f7fd f884 	bl	8004e90 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d803      	bhi.n	8007d9c <HAL_SPI_Transmit+0x160>
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9a:	d102      	bne.n	8007da2 <HAL_SPI_Transmit+0x166>
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d109      	bne.n	8007db6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e082      	b.n	8007ebc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1c7      	bne.n	8007d50 <HAL_SPI_Transmit+0x114>
 8007dc0:	e053      	b.n	8007e6a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <HAL_SPI_Transmit+0x194>
 8007dca:	8b7b      	ldrh	r3, [r7, #26]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d147      	bne.n	8007e60 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	330c      	adds	r3, #12
 8007dda:	7812      	ldrb	r2, [r2, #0]
 8007ddc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	3b01      	subs	r3, #1
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007df6:	e033      	b.n	8007e60 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d113      	bne.n	8007e2e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	330c      	adds	r3, #12
 8007e10:	7812      	ldrb	r2, [r2, #0]
 8007e12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e18:	1c5a      	adds	r2, r3, #1
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	3b01      	subs	r3, #1
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007e2c:	e018      	b.n	8007e60 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e2e:	f7fd f82f 	bl	8004e90 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d803      	bhi.n	8007e46 <HAL_SPI_Transmit+0x20a>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d102      	bne.n	8007e4c <HAL_SPI_Transmit+0x210>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d109      	bne.n	8007e60 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e02d      	b.n	8007ebc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1c6      	bne.n	8007df8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e6a:	69fa      	ldr	r2, [r7, #28]
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 f8be 	bl	8007ff0 <SPI_EndRxTxTransaction>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d002      	beq.n	8007e80 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10a      	bne.n	8007e9e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e88:	2300      	movs	r3, #0
 8007e8a:	617b      	str	r3, [r7, #20]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	617b      	str	r3, [r7, #20]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	617b      	str	r3, [r7, #20]
 8007e9c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e000      	b.n	8007ebc <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007eba:	2300      	movs	r3, #0
  }
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3720      	adds	r7, #32
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ed2:	b2db      	uxtb	r3, r3
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	603b      	str	r3, [r7, #0]
 8007eec:	4613      	mov	r3, r2
 8007eee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ef0:	f7fc ffce 	bl	8004e90 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef8:	1a9b      	subs	r3, r3, r2
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	4413      	add	r3, r2
 8007efe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f00:	f7fc ffc6 	bl	8004e90 <HAL_GetTick>
 8007f04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f06:	4b39      	ldr	r3, [pc, #228]	@ (8007fec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	015b      	lsls	r3, r3, #5
 8007f0c:	0d1b      	lsrs	r3, r3, #20
 8007f0e:	69fa      	ldr	r2, [r7, #28]
 8007f10:	fb02 f303 	mul.w	r3, r2, r3
 8007f14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f16:	e054      	b.n	8007fc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1e:	d050      	beq.n	8007fc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f20:	f7fc ffb6 	bl	8004e90 <HAL_GetTick>
 8007f24:	4602      	mov	r2, r0
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	69fa      	ldr	r2, [r7, #28]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d902      	bls.n	8007f36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d13d      	bne.n	8007fb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007f44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f4e:	d111      	bne.n	8007f74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f58:	d004      	beq.n	8007f64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f62:	d107      	bne.n	8007f74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f7c:	d10f      	bne.n	8007f9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e017      	b.n	8007fe2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d101      	bne.n	8007fbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	4013      	ands	r3, r2
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	bf0c      	ite	eq
 8007fd2:	2301      	moveq	r3, #1
 8007fd4:	2300      	movne	r3, #0
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	461a      	mov	r2, r3
 8007fda:	79fb      	ldrb	r3, [r7, #7]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d19b      	bne.n	8007f18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3720      	adds	r7, #32
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	20000010 	.word	0x20000010

08007ff0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b088      	sub	sp, #32
 8007ff4:	af02      	add	r7, sp, #8
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	2201      	movs	r2, #1
 8008004:	2102      	movs	r1, #2
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f7ff ff6a 	bl	8007ee0 <SPI_WaitFlagStateUntilTimeout>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d007      	beq.n	8008022 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008016:	f043 0220 	orr.w	r2, r3, #32
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e032      	b.n	8008088 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008022:	4b1b      	ldr	r3, [pc, #108]	@ (8008090 <SPI_EndRxTxTransaction+0xa0>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a1b      	ldr	r2, [pc, #108]	@ (8008094 <SPI_EndRxTxTransaction+0xa4>)
 8008028:	fba2 2303 	umull	r2, r3, r2, r3
 800802c:	0d5b      	lsrs	r3, r3, #21
 800802e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008032:	fb02 f303 	mul.w	r3, r2, r3
 8008036:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008040:	d112      	bne.n	8008068 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	2200      	movs	r2, #0
 800804a:	2180      	movs	r1, #128	@ 0x80
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f7ff ff47 	bl	8007ee0 <SPI_WaitFlagStateUntilTimeout>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d016      	beq.n	8008086 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800805c:	f043 0220 	orr.w	r2, r3, #32
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e00f      	b.n	8008088 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00a      	beq.n	8008084 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	3b01      	subs	r3, #1
 8008072:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800807e:	2b80      	cmp	r3, #128	@ 0x80
 8008080:	d0f2      	beq.n	8008068 <SPI_EndRxTxTransaction+0x78>
 8008082:	e000      	b.n	8008086 <SPI_EndRxTxTransaction+0x96>
        break;
 8008084:	bf00      	nop
  }

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3718      	adds	r7, #24
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	20000010 	.word	0x20000010
 8008094:	165e9f81 	.word	0x165e9f81

08008098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e041      	b.n	800812e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d106      	bne.n	80080c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7fc fab4 	bl	800462c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2202      	movs	r2, #2
 80080c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3304      	adds	r3, #4
 80080d4:	4619      	mov	r1, r3
 80080d6:	4610      	mov	r0, r2
 80080d8:	f000 f9f0 	bl	80084bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
	...

08008138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b01      	cmp	r3, #1
 800814a:	d001      	beq.n	8008150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e04e      	b.n	80081ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2202      	movs	r2, #2
 8008154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0201 	orr.w	r2, r2, #1
 8008166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a23      	ldr	r2, [pc, #140]	@ (80081fc <HAL_TIM_Base_Start_IT+0xc4>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d022      	beq.n	80081b8 <HAL_TIM_Base_Start_IT+0x80>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800817a:	d01d      	beq.n	80081b8 <HAL_TIM_Base_Start_IT+0x80>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a1f      	ldr	r2, [pc, #124]	@ (8008200 <HAL_TIM_Base_Start_IT+0xc8>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d018      	beq.n	80081b8 <HAL_TIM_Base_Start_IT+0x80>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a1e      	ldr	r2, [pc, #120]	@ (8008204 <HAL_TIM_Base_Start_IT+0xcc>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d013      	beq.n	80081b8 <HAL_TIM_Base_Start_IT+0x80>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a1c      	ldr	r2, [pc, #112]	@ (8008208 <HAL_TIM_Base_Start_IT+0xd0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d00e      	beq.n	80081b8 <HAL_TIM_Base_Start_IT+0x80>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a1b      	ldr	r2, [pc, #108]	@ (800820c <HAL_TIM_Base_Start_IT+0xd4>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d009      	beq.n	80081b8 <HAL_TIM_Base_Start_IT+0x80>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a19      	ldr	r2, [pc, #100]	@ (8008210 <HAL_TIM_Base_Start_IT+0xd8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d004      	beq.n	80081b8 <HAL_TIM_Base_Start_IT+0x80>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a18      	ldr	r2, [pc, #96]	@ (8008214 <HAL_TIM_Base_Start_IT+0xdc>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d111      	bne.n	80081dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f003 0307 	and.w	r3, r3, #7
 80081c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b06      	cmp	r3, #6
 80081c8:	d010      	beq.n	80081ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f042 0201 	orr.w	r2, r2, #1
 80081d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081da:	e007      	b.n	80081ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 0201 	orr.w	r2, r2, #1
 80081ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	40010000 	.word	0x40010000
 8008200:	40000400 	.word	0x40000400
 8008204:	40000800 	.word	0x40000800
 8008208:	40000c00 	.word	0x40000c00
 800820c:	40010400 	.word	0x40010400
 8008210:	40014000 	.word	0x40014000
 8008214:	40001800 	.word	0x40001800

08008218 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0201 	bic.w	r2, r2, #1
 800822e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6a1a      	ldr	r2, [r3, #32]
 8008236:	f241 1311 	movw	r3, #4369	@ 0x1111
 800823a:	4013      	ands	r3, r2
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10f      	bne.n	8008260 <HAL_TIM_Base_Stop_IT+0x48>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6a1a      	ldr	r2, [r3, #32]
 8008246:	f240 4344 	movw	r3, #1092	@ 0x444
 800824a:	4013      	ands	r3, r2
 800824c:	2b00      	cmp	r3, #0
 800824e:	d107      	bne.n	8008260 <HAL_TIM_Base_Stop_IT+0x48>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f022 0201 	bic.w	r2, r2, #1
 800825e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	f003 0302 	and.w	r3, r3, #2
 8008294:	2b00      	cmp	r3, #0
 8008296:	d020      	beq.n	80082da <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f003 0302 	and.w	r3, r3, #2
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d01b      	beq.n	80082da <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f06f 0202 	mvn.w	r2, #2
 80082aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	f003 0303 	and.w	r3, r3, #3
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f8dc 	bl	800847e <HAL_TIM_IC_CaptureCallback>
 80082c6:	e005      	b.n	80082d4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f8ce 	bl	800846a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f8df 	bl	8008492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	f003 0304 	and.w	r3, r3, #4
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d020      	beq.n	8008326 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f003 0304 	and.w	r3, r3, #4
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d01b      	beq.n	8008326 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f06f 0204 	mvn.w	r2, #4
 80082f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2202      	movs	r2, #2
 80082fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f8b6 	bl	800847e <HAL_TIM_IC_CaptureCallback>
 8008312:	e005      	b.n	8008320 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f8a8 	bl	800846a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f8b9 	bl	8008492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	f003 0308 	and.w	r3, r3, #8
 800832c:	2b00      	cmp	r3, #0
 800832e:	d020      	beq.n	8008372 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f003 0308 	and.w	r3, r3, #8
 8008336:	2b00      	cmp	r3, #0
 8008338:	d01b      	beq.n	8008372 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f06f 0208 	mvn.w	r2, #8
 8008342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2204      	movs	r2, #4
 8008348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	69db      	ldr	r3, [r3, #28]
 8008350:	f003 0303 	and.w	r3, r3, #3
 8008354:	2b00      	cmp	r3, #0
 8008356:	d003      	beq.n	8008360 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f890 	bl	800847e <HAL_TIM_IC_CaptureCallback>
 800835e:	e005      	b.n	800836c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f882 	bl	800846a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f893 	bl	8008492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	f003 0310 	and.w	r3, r3, #16
 8008378:	2b00      	cmp	r3, #0
 800837a:	d020      	beq.n	80083be <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f003 0310 	and.w	r3, r3, #16
 8008382:	2b00      	cmp	r3, #0
 8008384:	d01b      	beq.n	80083be <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f06f 0210 	mvn.w	r2, #16
 800838e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2208      	movs	r2, #8
 8008394:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	69db      	ldr	r3, [r3, #28]
 800839c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d003      	beq.n	80083ac <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f86a 	bl	800847e <HAL_TIM_IC_CaptureCallback>
 80083aa:	e005      	b.n	80083b8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f85c 	bl	800846a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f86d 	bl	8008492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00c      	beq.n	80083e2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d007      	beq.n	80083e2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f06f 0201 	mvn.w	r2, #1
 80083da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f83a 	bl	8008456 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00c      	beq.n	8008406 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d007      	beq.n	8008406 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80083fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f911 	bl	8008628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00c      	beq.n	800842a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008416:	2b00      	cmp	r3, #0
 8008418:	d007      	beq.n	800842a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f83e 	bl	80084a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	f003 0320 	and.w	r3, r3, #32
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00c      	beq.n	800844e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f003 0320 	and.w	r3, r3, #32
 800843a:	2b00      	cmp	r3, #0
 800843c:	d007      	beq.n	800844e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f06f 0220 	mvn.w	r2, #32
 8008446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f8e3 	bl	8008614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800844e:	bf00      	nop
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008456:	b480      	push	{r7}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800845e:	bf00      	nop
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800846a:	b480      	push	{r7}
 800846c:	b083      	sub	sp, #12
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008472:	bf00      	nop
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084ae:	bf00      	nop
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
	...

080084bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a46      	ldr	r2, [pc, #280]	@ (80085e8 <TIM_Base_SetConfig+0x12c>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d013      	beq.n	80084fc <TIM_Base_SetConfig+0x40>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084da:	d00f      	beq.n	80084fc <TIM_Base_SetConfig+0x40>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a43      	ldr	r2, [pc, #268]	@ (80085ec <TIM_Base_SetConfig+0x130>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d00b      	beq.n	80084fc <TIM_Base_SetConfig+0x40>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a42      	ldr	r2, [pc, #264]	@ (80085f0 <TIM_Base_SetConfig+0x134>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d007      	beq.n	80084fc <TIM_Base_SetConfig+0x40>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a41      	ldr	r2, [pc, #260]	@ (80085f4 <TIM_Base_SetConfig+0x138>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d003      	beq.n	80084fc <TIM_Base_SetConfig+0x40>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a40      	ldr	r2, [pc, #256]	@ (80085f8 <TIM_Base_SetConfig+0x13c>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d108      	bne.n	800850e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	4313      	orrs	r3, r2
 800850c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a35      	ldr	r2, [pc, #212]	@ (80085e8 <TIM_Base_SetConfig+0x12c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d02b      	beq.n	800856e <TIM_Base_SetConfig+0xb2>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800851c:	d027      	beq.n	800856e <TIM_Base_SetConfig+0xb2>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a32      	ldr	r2, [pc, #200]	@ (80085ec <TIM_Base_SetConfig+0x130>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d023      	beq.n	800856e <TIM_Base_SetConfig+0xb2>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a31      	ldr	r2, [pc, #196]	@ (80085f0 <TIM_Base_SetConfig+0x134>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d01f      	beq.n	800856e <TIM_Base_SetConfig+0xb2>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a30      	ldr	r2, [pc, #192]	@ (80085f4 <TIM_Base_SetConfig+0x138>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d01b      	beq.n	800856e <TIM_Base_SetConfig+0xb2>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a2f      	ldr	r2, [pc, #188]	@ (80085f8 <TIM_Base_SetConfig+0x13c>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d017      	beq.n	800856e <TIM_Base_SetConfig+0xb2>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a2e      	ldr	r2, [pc, #184]	@ (80085fc <TIM_Base_SetConfig+0x140>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d013      	beq.n	800856e <TIM_Base_SetConfig+0xb2>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a2d      	ldr	r2, [pc, #180]	@ (8008600 <TIM_Base_SetConfig+0x144>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d00f      	beq.n	800856e <TIM_Base_SetConfig+0xb2>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a2c      	ldr	r2, [pc, #176]	@ (8008604 <TIM_Base_SetConfig+0x148>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d00b      	beq.n	800856e <TIM_Base_SetConfig+0xb2>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a2b      	ldr	r2, [pc, #172]	@ (8008608 <TIM_Base_SetConfig+0x14c>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d007      	beq.n	800856e <TIM_Base_SetConfig+0xb2>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a2a      	ldr	r2, [pc, #168]	@ (800860c <TIM_Base_SetConfig+0x150>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d003      	beq.n	800856e <TIM_Base_SetConfig+0xb2>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a29      	ldr	r2, [pc, #164]	@ (8008610 <TIM_Base_SetConfig+0x154>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d108      	bne.n	8008580 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	4313      	orrs	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	4313      	orrs	r3, r2
 800858c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	689a      	ldr	r2, [r3, #8]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a10      	ldr	r2, [pc, #64]	@ (80085e8 <TIM_Base_SetConfig+0x12c>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d003      	beq.n	80085b4 <TIM_Base_SetConfig+0xf8>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a12      	ldr	r2, [pc, #72]	@ (80085f8 <TIM_Base_SetConfig+0x13c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d103      	bne.n	80085bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	691a      	ldr	r2, [r3, #16]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d105      	bne.n	80085da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	f023 0201 	bic.w	r2, r3, #1
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	611a      	str	r2, [r3, #16]
  }
}
 80085da:	bf00      	nop
 80085dc:	3714      	adds	r7, #20
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	40010000 	.word	0x40010000
 80085ec:	40000400 	.word	0x40000400
 80085f0:	40000800 	.word	0x40000800
 80085f4:	40000c00 	.word	0x40000c00
 80085f8:	40010400 	.word	0x40010400
 80085fc:	40014000 	.word	0x40014000
 8008600:	40014400 	.word	0x40014400
 8008604:	40014800 	.word	0x40014800
 8008608:	40001800 	.word	0x40001800
 800860c:	40001c00 	.word	0x40001c00
 8008610:	40002000 	.word	0x40002000

08008614 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <exit>:
 800863c:	b508      	push	{r3, lr}
 800863e:	4b06      	ldr	r3, [pc, #24]	@ (8008658 <exit+0x1c>)
 8008640:	4604      	mov	r4, r0
 8008642:	b113      	cbz	r3, 800864a <exit+0xe>
 8008644:	2100      	movs	r1, #0
 8008646:	f3af 8000 	nop.w
 800864a:	4b04      	ldr	r3, [pc, #16]	@ (800865c <exit+0x20>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	b103      	cbz	r3, 8008652 <exit+0x16>
 8008650:	4798      	blx	r3
 8008652:	4620      	mov	r0, r4
 8008654:	f7fc facb 	bl	8004bee <_exit>
 8008658:	00000000 	.word	0x00000000
 800865c:	20025c34 	.word	0x20025c34

08008660 <__itoa>:
 8008660:	1e93      	subs	r3, r2, #2
 8008662:	2b22      	cmp	r3, #34	@ 0x22
 8008664:	b510      	push	{r4, lr}
 8008666:	460c      	mov	r4, r1
 8008668:	d904      	bls.n	8008674 <__itoa+0x14>
 800866a:	2300      	movs	r3, #0
 800866c:	700b      	strb	r3, [r1, #0]
 800866e:	461c      	mov	r4, r3
 8008670:	4620      	mov	r0, r4
 8008672:	bd10      	pop	{r4, pc}
 8008674:	2a0a      	cmp	r2, #10
 8008676:	d109      	bne.n	800868c <__itoa+0x2c>
 8008678:	2800      	cmp	r0, #0
 800867a:	da07      	bge.n	800868c <__itoa+0x2c>
 800867c:	232d      	movs	r3, #45	@ 0x2d
 800867e:	700b      	strb	r3, [r1, #0]
 8008680:	4240      	negs	r0, r0
 8008682:	2101      	movs	r1, #1
 8008684:	4421      	add	r1, r4
 8008686:	f000 f805 	bl	8008694 <__utoa>
 800868a:	e7f1      	b.n	8008670 <__itoa+0x10>
 800868c:	2100      	movs	r1, #0
 800868e:	e7f9      	b.n	8008684 <__itoa+0x24>

08008690 <itoa>:
 8008690:	f7ff bfe6 	b.w	8008660 <__itoa>

08008694 <__utoa>:
 8008694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008696:	4c1f      	ldr	r4, [pc, #124]	@ (8008714 <__utoa+0x80>)
 8008698:	b08b      	sub	sp, #44	@ 0x2c
 800869a:	4605      	mov	r5, r0
 800869c:	460b      	mov	r3, r1
 800869e:	466e      	mov	r6, sp
 80086a0:	f104 0c20 	add.w	ip, r4, #32
 80086a4:	6820      	ldr	r0, [r4, #0]
 80086a6:	6861      	ldr	r1, [r4, #4]
 80086a8:	4637      	mov	r7, r6
 80086aa:	c703      	stmia	r7!, {r0, r1}
 80086ac:	3408      	adds	r4, #8
 80086ae:	4564      	cmp	r4, ip
 80086b0:	463e      	mov	r6, r7
 80086b2:	d1f7      	bne.n	80086a4 <__utoa+0x10>
 80086b4:	7921      	ldrb	r1, [r4, #4]
 80086b6:	7139      	strb	r1, [r7, #4]
 80086b8:	1e91      	subs	r1, r2, #2
 80086ba:	6820      	ldr	r0, [r4, #0]
 80086bc:	6038      	str	r0, [r7, #0]
 80086be:	2922      	cmp	r1, #34	@ 0x22
 80086c0:	f04f 0100 	mov.w	r1, #0
 80086c4:	d904      	bls.n	80086d0 <__utoa+0x3c>
 80086c6:	7019      	strb	r1, [r3, #0]
 80086c8:	460b      	mov	r3, r1
 80086ca:	4618      	mov	r0, r3
 80086cc:	b00b      	add	sp, #44	@ 0x2c
 80086ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086d0:	1e58      	subs	r0, r3, #1
 80086d2:	4684      	mov	ip, r0
 80086d4:	fbb5 f7f2 	udiv	r7, r5, r2
 80086d8:	fb02 5617 	mls	r6, r2, r7, r5
 80086dc:	3628      	adds	r6, #40	@ 0x28
 80086de:	446e      	add	r6, sp
 80086e0:	460c      	mov	r4, r1
 80086e2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80086e6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80086ea:	462e      	mov	r6, r5
 80086ec:	42b2      	cmp	r2, r6
 80086ee:	f101 0101 	add.w	r1, r1, #1
 80086f2:	463d      	mov	r5, r7
 80086f4:	d9ee      	bls.n	80086d4 <__utoa+0x40>
 80086f6:	2200      	movs	r2, #0
 80086f8:	545a      	strb	r2, [r3, r1]
 80086fa:	1919      	adds	r1, r3, r4
 80086fc:	1aa5      	subs	r5, r4, r2
 80086fe:	42aa      	cmp	r2, r5
 8008700:	dae3      	bge.n	80086ca <__utoa+0x36>
 8008702:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008706:	780e      	ldrb	r6, [r1, #0]
 8008708:	7006      	strb	r6, [r0, #0]
 800870a:	3201      	adds	r2, #1
 800870c:	f801 5901 	strb.w	r5, [r1], #-1
 8008710:	e7f4      	b.n	80086fc <__utoa+0x68>
 8008712:	bf00      	nop
 8008714:	0800a7b4 	.word	0x0800a7b4

08008718 <std>:
 8008718:	2300      	movs	r3, #0
 800871a:	b510      	push	{r4, lr}
 800871c:	4604      	mov	r4, r0
 800871e:	e9c0 3300 	strd	r3, r3, [r0]
 8008722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008726:	6083      	str	r3, [r0, #8]
 8008728:	8181      	strh	r1, [r0, #12]
 800872a:	6643      	str	r3, [r0, #100]	@ 0x64
 800872c:	81c2      	strh	r2, [r0, #14]
 800872e:	6183      	str	r3, [r0, #24]
 8008730:	4619      	mov	r1, r3
 8008732:	2208      	movs	r2, #8
 8008734:	305c      	adds	r0, #92	@ 0x5c
 8008736:	f000 f99b 	bl	8008a70 <memset>
 800873a:	4b0d      	ldr	r3, [pc, #52]	@ (8008770 <std+0x58>)
 800873c:	6263      	str	r3, [r4, #36]	@ 0x24
 800873e:	4b0d      	ldr	r3, [pc, #52]	@ (8008774 <std+0x5c>)
 8008740:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008742:	4b0d      	ldr	r3, [pc, #52]	@ (8008778 <std+0x60>)
 8008744:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008746:	4b0d      	ldr	r3, [pc, #52]	@ (800877c <std+0x64>)
 8008748:	6323      	str	r3, [r4, #48]	@ 0x30
 800874a:	4b0d      	ldr	r3, [pc, #52]	@ (8008780 <std+0x68>)
 800874c:	6224      	str	r4, [r4, #32]
 800874e:	429c      	cmp	r4, r3
 8008750:	d006      	beq.n	8008760 <std+0x48>
 8008752:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008756:	4294      	cmp	r4, r2
 8008758:	d002      	beq.n	8008760 <std+0x48>
 800875a:	33d0      	adds	r3, #208	@ 0xd0
 800875c:	429c      	cmp	r4, r3
 800875e:	d105      	bne.n	800876c <std+0x54>
 8008760:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008768:	f000 b9fa 	b.w	8008b60 <__retarget_lock_init_recursive>
 800876c:	bd10      	pop	{r4, pc}
 800876e:	bf00      	nop
 8008770:	080088c1 	.word	0x080088c1
 8008774:	080088e3 	.word	0x080088e3
 8008778:	0800891b 	.word	0x0800891b
 800877c:	0800893f 	.word	0x0800893f
 8008780:	20025afc 	.word	0x20025afc

08008784 <stdio_exit_handler>:
 8008784:	4a02      	ldr	r2, [pc, #8]	@ (8008790 <stdio_exit_handler+0xc>)
 8008786:	4903      	ldr	r1, [pc, #12]	@ (8008794 <stdio_exit_handler+0x10>)
 8008788:	4803      	ldr	r0, [pc, #12]	@ (8008798 <stdio_exit_handler+0x14>)
 800878a:	f000 b869 	b.w	8008860 <_fwalk_sglue>
 800878e:	bf00      	nop
 8008790:	2000001c 	.word	0x2000001c
 8008794:	08009401 	.word	0x08009401
 8008798:	2000002c 	.word	0x2000002c

0800879c <cleanup_stdio>:
 800879c:	6841      	ldr	r1, [r0, #4]
 800879e:	4b0c      	ldr	r3, [pc, #48]	@ (80087d0 <cleanup_stdio+0x34>)
 80087a0:	4299      	cmp	r1, r3
 80087a2:	b510      	push	{r4, lr}
 80087a4:	4604      	mov	r4, r0
 80087a6:	d001      	beq.n	80087ac <cleanup_stdio+0x10>
 80087a8:	f000 fe2a 	bl	8009400 <_fflush_r>
 80087ac:	68a1      	ldr	r1, [r4, #8]
 80087ae:	4b09      	ldr	r3, [pc, #36]	@ (80087d4 <cleanup_stdio+0x38>)
 80087b0:	4299      	cmp	r1, r3
 80087b2:	d002      	beq.n	80087ba <cleanup_stdio+0x1e>
 80087b4:	4620      	mov	r0, r4
 80087b6:	f000 fe23 	bl	8009400 <_fflush_r>
 80087ba:	68e1      	ldr	r1, [r4, #12]
 80087bc:	4b06      	ldr	r3, [pc, #24]	@ (80087d8 <cleanup_stdio+0x3c>)
 80087be:	4299      	cmp	r1, r3
 80087c0:	d004      	beq.n	80087cc <cleanup_stdio+0x30>
 80087c2:	4620      	mov	r0, r4
 80087c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087c8:	f000 be1a 	b.w	8009400 <_fflush_r>
 80087cc:	bd10      	pop	{r4, pc}
 80087ce:	bf00      	nop
 80087d0:	20025afc 	.word	0x20025afc
 80087d4:	20025b64 	.word	0x20025b64
 80087d8:	20025bcc 	.word	0x20025bcc

080087dc <global_stdio_init.part.0>:
 80087dc:	b510      	push	{r4, lr}
 80087de:	4b0b      	ldr	r3, [pc, #44]	@ (800880c <global_stdio_init.part.0+0x30>)
 80087e0:	4c0b      	ldr	r4, [pc, #44]	@ (8008810 <global_stdio_init.part.0+0x34>)
 80087e2:	4a0c      	ldr	r2, [pc, #48]	@ (8008814 <global_stdio_init.part.0+0x38>)
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	4620      	mov	r0, r4
 80087e8:	2200      	movs	r2, #0
 80087ea:	2104      	movs	r1, #4
 80087ec:	f7ff ff94 	bl	8008718 <std>
 80087f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80087f4:	2201      	movs	r2, #1
 80087f6:	2109      	movs	r1, #9
 80087f8:	f7ff ff8e 	bl	8008718 <std>
 80087fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008800:	2202      	movs	r2, #2
 8008802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008806:	2112      	movs	r1, #18
 8008808:	f7ff bf86 	b.w	8008718 <std>
 800880c:	20025c34 	.word	0x20025c34
 8008810:	20025afc 	.word	0x20025afc
 8008814:	08008785 	.word	0x08008785

08008818 <__sfp_lock_acquire>:
 8008818:	4801      	ldr	r0, [pc, #4]	@ (8008820 <__sfp_lock_acquire+0x8>)
 800881a:	f000 b9a2 	b.w	8008b62 <__retarget_lock_acquire_recursive>
 800881e:	bf00      	nop
 8008820:	20025c3d 	.word	0x20025c3d

08008824 <__sfp_lock_release>:
 8008824:	4801      	ldr	r0, [pc, #4]	@ (800882c <__sfp_lock_release+0x8>)
 8008826:	f000 b99d 	b.w	8008b64 <__retarget_lock_release_recursive>
 800882a:	bf00      	nop
 800882c:	20025c3d 	.word	0x20025c3d

08008830 <__sinit>:
 8008830:	b510      	push	{r4, lr}
 8008832:	4604      	mov	r4, r0
 8008834:	f7ff fff0 	bl	8008818 <__sfp_lock_acquire>
 8008838:	6a23      	ldr	r3, [r4, #32]
 800883a:	b11b      	cbz	r3, 8008844 <__sinit+0x14>
 800883c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008840:	f7ff bff0 	b.w	8008824 <__sfp_lock_release>
 8008844:	4b04      	ldr	r3, [pc, #16]	@ (8008858 <__sinit+0x28>)
 8008846:	6223      	str	r3, [r4, #32]
 8008848:	4b04      	ldr	r3, [pc, #16]	@ (800885c <__sinit+0x2c>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1f5      	bne.n	800883c <__sinit+0xc>
 8008850:	f7ff ffc4 	bl	80087dc <global_stdio_init.part.0>
 8008854:	e7f2      	b.n	800883c <__sinit+0xc>
 8008856:	bf00      	nop
 8008858:	0800879d 	.word	0x0800879d
 800885c:	20025c34 	.word	0x20025c34

08008860 <_fwalk_sglue>:
 8008860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008864:	4607      	mov	r7, r0
 8008866:	4688      	mov	r8, r1
 8008868:	4614      	mov	r4, r2
 800886a:	2600      	movs	r6, #0
 800886c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008870:	f1b9 0901 	subs.w	r9, r9, #1
 8008874:	d505      	bpl.n	8008882 <_fwalk_sglue+0x22>
 8008876:	6824      	ldr	r4, [r4, #0]
 8008878:	2c00      	cmp	r4, #0
 800887a:	d1f7      	bne.n	800886c <_fwalk_sglue+0xc>
 800887c:	4630      	mov	r0, r6
 800887e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008882:	89ab      	ldrh	r3, [r5, #12]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d907      	bls.n	8008898 <_fwalk_sglue+0x38>
 8008888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800888c:	3301      	adds	r3, #1
 800888e:	d003      	beq.n	8008898 <_fwalk_sglue+0x38>
 8008890:	4629      	mov	r1, r5
 8008892:	4638      	mov	r0, r7
 8008894:	47c0      	blx	r8
 8008896:	4306      	orrs	r6, r0
 8008898:	3568      	adds	r5, #104	@ 0x68
 800889a:	e7e9      	b.n	8008870 <_fwalk_sglue+0x10>

0800889c <iprintf>:
 800889c:	b40f      	push	{r0, r1, r2, r3}
 800889e:	b507      	push	{r0, r1, r2, lr}
 80088a0:	4906      	ldr	r1, [pc, #24]	@ (80088bc <iprintf+0x20>)
 80088a2:	ab04      	add	r3, sp, #16
 80088a4:	6808      	ldr	r0, [r1, #0]
 80088a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80088aa:	6881      	ldr	r1, [r0, #8]
 80088ac:	9301      	str	r3, [sp, #4]
 80088ae:	f000 fa7d 	bl	8008dac <_vfiprintf_r>
 80088b2:	b003      	add	sp, #12
 80088b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80088b8:	b004      	add	sp, #16
 80088ba:	4770      	bx	lr
 80088bc:	20000028 	.word	0x20000028

080088c0 <__sread>:
 80088c0:	b510      	push	{r4, lr}
 80088c2:	460c      	mov	r4, r1
 80088c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c8:	f000 f8fc 	bl	8008ac4 <_read_r>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	bfab      	itete	ge
 80088d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80088d2:	89a3      	ldrhlt	r3, [r4, #12]
 80088d4:	181b      	addge	r3, r3, r0
 80088d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80088da:	bfac      	ite	ge
 80088dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80088de:	81a3      	strhlt	r3, [r4, #12]
 80088e0:	bd10      	pop	{r4, pc}

080088e2 <__swrite>:
 80088e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e6:	461f      	mov	r7, r3
 80088e8:	898b      	ldrh	r3, [r1, #12]
 80088ea:	05db      	lsls	r3, r3, #23
 80088ec:	4605      	mov	r5, r0
 80088ee:	460c      	mov	r4, r1
 80088f0:	4616      	mov	r6, r2
 80088f2:	d505      	bpl.n	8008900 <__swrite+0x1e>
 80088f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f8:	2302      	movs	r3, #2
 80088fa:	2200      	movs	r2, #0
 80088fc:	f000 f8d0 	bl	8008aa0 <_lseek_r>
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008906:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800890a:	81a3      	strh	r3, [r4, #12]
 800890c:	4632      	mov	r2, r6
 800890e:	463b      	mov	r3, r7
 8008910:	4628      	mov	r0, r5
 8008912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008916:	f000 b8e7 	b.w	8008ae8 <_write_r>

0800891a <__sseek>:
 800891a:	b510      	push	{r4, lr}
 800891c:	460c      	mov	r4, r1
 800891e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008922:	f000 f8bd 	bl	8008aa0 <_lseek_r>
 8008926:	1c43      	adds	r3, r0, #1
 8008928:	89a3      	ldrh	r3, [r4, #12]
 800892a:	bf15      	itete	ne
 800892c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800892e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008932:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008936:	81a3      	strheq	r3, [r4, #12]
 8008938:	bf18      	it	ne
 800893a:	81a3      	strhne	r3, [r4, #12]
 800893c:	bd10      	pop	{r4, pc}

0800893e <__sclose>:
 800893e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008942:	f000 b89d 	b.w	8008a80 <_close_r>

08008946 <__swbuf_r>:
 8008946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008948:	460e      	mov	r6, r1
 800894a:	4614      	mov	r4, r2
 800894c:	4605      	mov	r5, r0
 800894e:	b118      	cbz	r0, 8008958 <__swbuf_r+0x12>
 8008950:	6a03      	ldr	r3, [r0, #32]
 8008952:	b90b      	cbnz	r3, 8008958 <__swbuf_r+0x12>
 8008954:	f7ff ff6c 	bl	8008830 <__sinit>
 8008958:	69a3      	ldr	r3, [r4, #24]
 800895a:	60a3      	str	r3, [r4, #8]
 800895c:	89a3      	ldrh	r3, [r4, #12]
 800895e:	071a      	lsls	r2, r3, #28
 8008960:	d501      	bpl.n	8008966 <__swbuf_r+0x20>
 8008962:	6923      	ldr	r3, [r4, #16]
 8008964:	b943      	cbnz	r3, 8008978 <__swbuf_r+0x32>
 8008966:	4621      	mov	r1, r4
 8008968:	4628      	mov	r0, r5
 800896a:	f000 f82b 	bl	80089c4 <__swsetup_r>
 800896e:	b118      	cbz	r0, 8008978 <__swbuf_r+0x32>
 8008970:	f04f 37ff 	mov.w	r7, #4294967295
 8008974:	4638      	mov	r0, r7
 8008976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	6922      	ldr	r2, [r4, #16]
 800897c:	1a98      	subs	r0, r3, r2
 800897e:	6963      	ldr	r3, [r4, #20]
 8008980:	b2f6      	uxtb	r6, r6
 8008982:	4283      	cmp	r3, r0
 8008984:	4637      	mov	r7, r6
 8008986:	dc05      	bgt.n	8008994 <__swbuf_r+0x4e>
 8008988:	4621      	mov	r1, r4
 800898a:	4628      	mov	r0, r5
 800898c:	f000 fd38 	bl	8009400 <_fflush_r>
 8008990:	2800      	cmp	r0, #0
 8008992:	d1ed      	bne.n	8008970 <__swbuf_r+0x2a>
 8008994:	68a3      	ldr	r3, [r4, #8]
 8008996:	3b01      	subs	r3, #1
 8008998:	60a3      	str	r3, [r4, #8]
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	6022      	str	r2, [r4, #0]
 80089a0:	701e      	strb	r6, [r3, #0]
 80089a2:	6962      	ldr	r2, [r4, #20]
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d004      	beq.n	80089b4 <__swbuf_r+0x6e>
 80089aa:	89a3      	ldrh	r3, [r4, #12]
 80089ac:	07db      	lsls	r3, r3, #31
 80089ae:	d5e1      	bpl.n	8008974 <__swbuf_r+0x2e>
 80089b0:	2e0a      	cmp	r6, #10
 80089b2:	d1df      	bne.n	8008974 <__swbuf_r+0x2e>
 80089b4:	4621      	mov	r1, r4
 80089b6:	4628      	mov	r0, r5
 80089b8:	f000 fd22 	bl	8009400 <_fflush_r>
 80089bc:	2800      	cmp	r0, #0
 80089be:	d0d9      	beq.n	8008974 <__swbuf_r+0x2e>
 80089c0:	e7d6      	b.n	8008970 <__swbuf_r+0x2a>
	...

080089c4 <__swsetup_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	4b29      	ldr	r3, [pc, #164]	@ (8008a6c <__swsetup_r+0xa8>)
 80089c8:	4605      	mov	r5, r0
 80089ca:	6818      	ldr	r0, [r3, #0]
 80089cc:	460c      	mov	r4, r1
 80089ce:	b118      	cbz	r0, 80089d8 <__swsetup_r+0x14>
 80089d0:	6a03      	ldr	r3, [r0, #32]
 80089d2:	b90b      	cbnz	r3, 80089d8 <__swsetup_r+0x14>
 80089d4:	f7ff ff2c 	bl	8008830 <__sinit>
 80089d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089dc:	0719      	lsls	r1, r3, #28
 80089de:	d422      	bmi.n	8008a26 <__swsetup_r+0x62>
 80089e0:	06da      	lsls	r2, r3, #27
 80089e2:	d407      	bmi.n	80089f4 <__swsetup_r+0x30>
 80089e4:	2209      	movs	r2, #9
 80089e6:	602a      	str	r2, [r5, #0]
 80089e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089ec:	81a3      	strh	r3, [r4, #12]
 80089ee:	f04f 30ff 	mov.w	r0, #4294967295
 80089f2:	e033      	b.n	8008a5c <__swsetup_r+0x98>
 80089f4:	0758      	lsls	r0, r3, #29
 80089f6:	d512      	bpl.n	8008a1e <__swsetup_r+0x5a>
 80089f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089fa:	b141      	cbz	r1, 8008a0e <__swsetup_r+0x4a>
 80089fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a00:	4299      	cmp	r1, r3
 8008a02:	d002      	beq.n	8008a0a <__swsetup_r+0x46>
 8008a04:	4628      	mov	r0, r5
 8008a06:	f000 f8af 	bl	8008b68 <_free_r>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a0e:	89a3      	ldrh	r3, [r4, #12]
 8008a10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a14:	81a3      	strh	r3, [r4, #12]
 8008a16:	2300      	movs	r3, #0
 8008a18:	6063      	str	r3, [r4, #4]
 8008a1a:	6923      	ldr	r3, [r4, #16]
 8008a1c:	6023      	str	r3, [r4, #0]
 8008a1e:	89a3      	ldrh	r3, [r4, #12]
 8008a20:	f043 0308 	orr.w	r3, r3, #8
 8008a24:	81a3      	strh	r3, [r4, #12]
 8008a26:	6923      	ldr	r3, [r4, #16]
 8008a28:	b94b      	cbnz	r3, 8008a3e <__swsetup_r+0x7a>
 8008a2a:	89a3      	ldrh	r3, [r4, #12]
 8008a2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a34:	d003      	beq.n	8008a3e <__swsetup_r+0x7a>
 8008a36:	4621      	mov	r1, r4
 8008a38:	4628      	mov	r0, r5
 8008a3a:	f000 fd2f 	bl	800949c <__smakebuf_r>
 8008a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a42:	f013 0201 	ands.w	r2, r3, #1
 8008a46:	d00a      	beq.n	8008a5e <__swsetup_r+0x9a>
 8008a48:	2200      	movs	r2, #0
 8008a4a:	60a2      	str	r2, [r4, #8]
 8008a4c:	6962      	ldr	r2, [r4, #20]
 8008a4e:	4252      	negs	r2, r2
 8008a50:	61a2      	str	r2, [r4, #24]
 8008a52:	6922      	ldr	r2, [r4, #16]
 8008a54:	b942      	cbnz	r2, 8008a68 <__swsetup_r+0xa4>
 8008a56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a5a:	d1c5      	bne.n	80089e8 <__swsetup_r+0x24>
 8008a5c:	bd38      	pop	{r3, r4, r5, pc}
 8008a5e:	0799      	lsls	r1, r3, #30
 8008a60:	bf58      	it	pl
 8008a62:	6962      	ldrpl	r2, [r4, #20]
 8008a64:	60a2      	str	r2, [r4, #8]
 8008a66:	e7f4      	b.n	8008a52 <__swsetup_r+0x8e>
 8008a68:	2000      	movs	r0, #0
 8008a6a:	e7f7      	b.n	8008a5c <__swsetup_r+0x98>
 8008a6c:	20000028 	.word	0x20000028

08008a70 <memset>:
 8008a70:	4402      	add	r2, r0
 8008a72:	4603      	mov	r3, r0
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d100      	bne.n	8008a7a <memset+0xa>
 8008a78:	4770      	bx	lr
 8008a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a7e:	e7f9      	b.n	8008a74 <memset+0x4>

08008a80 <_close_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4d06      	ldr	r5, [pc, #24]	@ (8008a9c <_close_r+0x1c>)
 8008a84:	2300      	movs	r3, #0
 8008a86:	4604      	mov	r4, r0
 8008a88:	4608      	mov	r0, r1
 8008a8a:	602b      	str	r3, [r5, #0]
 8008a8c:	f7fc f8f3 	bl	8004c76 <_close>
 8008a90:	1c43      	adds	r3, r0, #1
 8008a92:	d102      	bne.n	8008a9a <_close_r+0x1a>
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	b103      	cbz	r3, 8008a9a <_close_r+0x1a>
 8008a98:	6023      	str	r3, [r4, #0]
 8008a9a:	bd38      	pop	{r3, r4, r5, pc}
 8008a9c:	20025c38 	.word	0x20025c38

08008aa0 <_lseek_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4d07      	ldr	r5, [pc, #28]	@ (8008ac0 <_lseek_r+0x20>)
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	4608      	mov	r0, r1
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	2200      	movs	r2, #0
 8008aac:	602a      	str	r2, [r5, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f7fc f908 	bl	8004cc4 <_lseek>
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	d102      	bne.n	8008abe <_lseek_r+0x1e>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	b103      	cbz	r3, 8008abe <_lseek_r+0x1e>
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	20025c38 	.word	0x20025c38

08008ac4 <_read_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4d07      	ldr	r5, [pc, #28]	@ (8008ae4 <_read_r+0x20>)
 8008ac8:	4604      	mov	r4, r0
 8008aca:	4608      	mov	r0, r1
 8008acc:	4611      	mov	r1, r2
 8008ace:	2200      	movs	r2, #0
 8008ad0:	602a      	str	r2, [r5, #0]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	f7fc f896 	bl	8004c04 <_read>
 8008ad8:	1c43      	adds	r3, r0, #1
 8008ada:	d102      	bne.n	8008ae2 <_read_r+0x1e>
 8008adc:	682b      	ldr	r3, [r5, #0]
 8008ade:	b103      	cbz	r3, 8008ae2 <_read_r+0x1e>
 8008ae0:	6023      	str	r3, [r4, #0]
 8008ae2:	bd38      	pop	{r3, r4, r5, pc}
 8008ae4:	20025c38 	.word	0x20025c38

08008ae8 <_write_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	4d07      	ldr	r5, [pc, #28]	@ (8008b08 <_write_r+0x20>)
 8008aec:	4604      	mov	r4, r0
 8008aee:	4608      	mov	r0, r1
 8008af0:	4611      	mov	r1, r2
 8008af2:	2200      	movs	r2, #0
 8008af4:	602a      	str	r2, [r5, #0]
 8008af6:	461a      	mov	r2, r3
 8008af8:	f7fc f8a1 	bl	8004c3e <_write>
 8008afc:	1c43      	adds	r3, r0, #1
 8008afe:	d102      	bne.n	8008b06 <_write_r+0x1e>
 8008b00:	682b      	ldr	r3, [r5, #0]
 8008b02:	b103      	cbz	r3, 8008b06 <_write_r+0x1e>
 8008b04:	6023      	str	r3, [r4, #0]
 8008b06:	bd38      	pop	{r3, r4, r5, pc}
 8008b08:	20025c38 	.word	0x20025c38

08008b0c <__errno>:
 8008b0c:	4b01      	ldr	r3, [pc, #4]	@ (8008b14 <__errno+0x8>)
 8008b0e:	6818      	ldr	r0, [r3, #0]
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	20000028 	.word	0x20000028

08008b18 <__libc_init_array>:
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8008b50 <__libc_init_array+0x38>)
 8008b1c:	4c0d      	ldr	r4, [pc, #52]	@ (8008b54 <__libc_init_array+0x3c>)
 8008b1e:	1b64      	subs	r4, r4, r5
 8008b20:	10a4      	asrs	r4, r4, #2
 8008b22:	2600      	movs	r6, #0
 8008b24:	42a6      	cmp	r6, r4
 8008b26:	d109      	bne.n	8008b3c <__libc_init_array+0x24>
 8008b28:	4d0b      	ldr	r5, [pc, #44]	@ (8008b58 <__libc_init_array+0x40>)
 8008b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8008b5c <__libc_init_array+0x44>)
 8008b2c:	f000 fd24 	bl	8009578 <_init>
 8008b30:	1b64      	subs	r4, r4, r5
 8008b32:	10a4      	asrs	r4, r4, #2
 8008b34:	2600      	movs	r6, #0
 8008b36:	42a6      	cmp	r6, r4
 8008b38:	d105      	bne.n	8008b46 <__libc_init_array+0x2e>
 8008b3a:	bd70      	pop	{r4, r5, r6, pc}
 8008b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b40:	4798      	blx	r3
 8008b42:	3601      	adds	r6, #1
 8008b44:	e7ee      	b.n	8008b24 <__libc_init_array+0xc>
 8008b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b4a:	4798      	blx	r3
 8008b4c:	3601      	adds	r6, #1
 8008b4e:	e7f2      	b.n	8008b36 <__libc_init_array+0x1e>
 8008b50:	0800a814 	.word	0x0800a814
 8008b54:	0800a814 	.word	0x0800a814
 8008b58:	0800a814 	.word	0x0800a814
 8008b5c:	0800a818 	.word	0x0800a818

08008b60 <__retarget_lock_init_recursive>:
 8008b60:	4770      	bx	lr

08008b62 <__retarget_lock_acquire_recursive>:
 8008b62:	4770      	bx	lr

08008b64 <__retarget_lock_release_recursive>:
 8008b64:	4770      	bx	lr
	...

08008b68 <_free_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	2900      	cmp	r1, #0
 8008b6e:	d041      	beq.n	8008bf4 <_free_r+0x8c>
 8008b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b74:	1f0c      	subs	r4, r1, #4
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	bfb8      	it	lt
 8008b7a:	18e4      	addlt	r4, r4, r3
 8008b7c:	f000 f8e0 	bl	8008d40 <__malloc_lock>
 8008b80:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf8 <_free_r+0x90>)
 8008b82:	6813      	ldr	r3, [r2, #0]
 8008b84:	b933      	cbnz	r3, 8008b94 <_free_r+0x2c>
 8008b86:	6063      	str	r3, [r4, #4]
 8008b88:	6014      	str	r4, [r2, #0]
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b90:	f000 b8dc 	b.w	8008d4c <__malloc_unlock>
 8008b94:	42a3      	cmp	r3, r4
 8008b96:	d908      	bls.n	8008baa <_free_r+0x42>
 8008b98:	6820      	ldr	r0, [r4, #0]
 8008b9a:	1821      	adds	r1, r4, r0
 8008b9c:	428b      	cmp	r3, r1
 8008b9e:	bf01      	itttt	eq
 8008ba0:	6819      	ldreq	r1, [r3, #0]
 8008ba2:	685b      	ldreq	r3, [r3, #4]
 8008ba4:	1809      	addeq	r1, r1, r0
 8008ba6:	6021      	streq	r1, [r4, #0]
 8008ba8:	e7ed      	b.n	8008b86 <_free_r+0x1e>
 8008baa:	461a      	mov	r2, r3
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	b10b      	cbz	r3, 8008bb4 <_free_r+0x4c>
 8008bb0:	42a3      	cmp	r3, r4
 8008bb2:	d9fa      	bls.n	8008baa <_free_r+0x42>
 8008bb4:	6811      	ldr	r1, [r2, #0]
 8008bb6:	1850      	adds	r0, r2, r1
 8008bb8:	42a0      	cmp	r0, r4
 8008bba:	d10b      	bne.n	8008bd4 <_free_r+0x6c>
 8008bbc:	6820      	ldr	r0, [r4, #0]
 8008bbe:	4401      	add	r1, r0
 8008bc0:	1850      	adds	r0, r2, r1
 8008bc2:	4283      	cmp	r3, r0
 8008bc4:	6011      	str	r1, [r2, #0]
 8008bc6:	d1e0      	bne.n	8008b8a <_free_r+0x22>
 8008bc8:	6818      	ldr	r0, [r3, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	6053      	str	r3, [r2, #4]
 8008bce:	4408      	add	r0, r1
 8008bd0:	6010      	str	r0, [r2, #0]
 8008bd2:	e7da      	b.n	8008b8a <_free_r+0x22>
 8008bd4:	d902      	bls.n	8008bdc <_free_r+0x74>
 8008bd6:	230c      	movs	r3, #12
 8008bd8:	602b      	str	r3, [r5, #0]
 8008bda:	e7d6      	b.n	8008b8a <_free_r+0x22>
 8008bdc:	6820      	ldr	r0, [r4, #0]
 8008bde:	1821      	adds	r1, r4, r0
 8008be0:	428b      	cmp	r3, r1
 8008be2:	bf04      	itt	eq
 8008be4:	6819      	ldreq	r1, [r3, #0]
 8008be6:	685b      	ldreq	r3, [r3, #4]
 8008be8:	6063      	str	r3, [r4, #4]
 8008bea:	bf04      	itt	eq
 8008bec:	1809      	addeq	r1, r1, r0
 8008bee:	6021      	streq	r1, [r4, #0]
 8008bf0:	6054      	str	r4, [r2, #4]
 8008bf2:	e7ca      	b.n	8008b8a <_free_r+0x22>
 8008bf4:	bd38      	pop	{r3, r4, r5, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20025c44 	.word	0x20025c44

08008bfc <sbrk_aligned>:
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	4e0f      	ldr	r6, [pc, #60]	@ (8008c3c <sbrk_aligned+0x40>)
 8008c00:	460c      	mov	r4, r1
 8008c02:	6831      	ldr	r1, [r6, #0]
 8008c04:	4605      	mov	r5, r0
 8008c06:	b911      	cbnz	r1, 8008c0e <sbrk_aligned+0x12>
 8008c08:	f000 fca6 	bl	8009558 <_sbrk_r>
 8008c0c:	6030      	str	r0, [r6, #0]
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4628      	mov	r0, r5
 8008c12:	f000 fca1 	bl	8009558 <_sbrk_r>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d103      	bne.n	8008c22 <sbrk_aligned+0x26>
 8008c1a:	f04f 34ff 	mov.w	r4, #4294967295
 8008c1e:	4620      	mov	r0, r4
 8008c20:	bd70      	pop	{r4, r5, r6, pc}
 8008c22:	1cc4      	adds	r4, r0, #3
 8008c24:	f024 0403 	bic.w	r4, r4, #3
 8008c28:	42a0      	cmp	r0, r4
 8008c2a:	d0f8      	beq.n	8008c1e <sbrk_aligned+0x22>
 8008c2c:	1a21      	subs	r1, r4, r0
 8008c2e:	4628      	mov	r0, r5
 8008c30:	f000 fc92 	bl	8009558 <_sbrk_r>
 8008c34:	3001      	adds	r0, #1
 8008c36:	d1f2      	bne.n	8008c1e <sbrk_aligned+0x22>
 8008c38:	e7ef      	b.n	8008c1a <sbrk_aligned+0x1e>
 8008c3a:	bf00      	nop
 8008c3c:	20025c40 	.word	0x20025c40

08008c40 <_malloc_r>:
 8008c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c44:	1ccd      	adds	r5, r1, #3
 8008c46:	f025 0503 	bic.w	r5, r5, #3
 8008c4a:	3508      	adds	r5, #8
 8008c4c:	2d0c      	cmp	r5, #12
 8008c4e:	bf38      	it	cc
 8008c50:	250c      	movcc	r5, #12
 8008c52:	2d00      	cmp	r5, #0
 8008c54:	4606      	mov	r6, r0
 8008c56:	db01      	blt.n	8008c5c <_malloc_r+0x1c>
 8008c58:	42a9      	cmp	r1, r5
 8008c5a:	d904      	bls.n	8008c66 <_malloc_r+0x26>
 8008c5c:	230c      	movs	r3, #12
 8008c5e:	6033      	str	r3, [r6, #0]
 8008c60:	2000      	movs	r0, #0
 8008c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d3c <_malloc_r+0xfc>
 8008c6a:	f000 f869 	bl	8008d40 <__malloc_lock>
 8008c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c72:	461c      	mov	r4, r3
 8008c74:	bb44      	cbnz	r4, 8008cc8 <_malloc_r+0x88>
 8008c76:	4629      	mov	r1, r5
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f7ff ffbf 	bl	8008bfc <sbrk_aligned>
 8008c7e:	1c43      	adds	r3, r0, #1
 8008c80:	4604      	mov	r4, r0
 8008c82:	d158      	bne.n	8008d36 <_malloc_r+0xf6>
 8008c84:	f8d8 4000 	ldr.w	r4, [r8]
 8008c88:	4627      	mov	r7, r4
 8008c8a:	2f00      	cmp	r7, #0
 8008c8c:	d143      	bne.n	8008d16 <_malloc_r+0xd6>
 8008c8e:	2c00      	cmp	r4, #0
 8008c90:	d04b      	beq.n	8008d2a <_malloc_r+0xea>
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	4639      	mov	r1, r7
 8008c96:	4630      	mov	r0, r6
 8008c98:	eb04 0903 	add.w	r9, r4, r3
 8008c9c:	f000 fc5c 	bl	8009558 <_sbrk_r>
 8008ca0:	4581      	cmp	r9, r0
 8008ca2:	d142      	bne.n	8008d2a <_malloc_r+0xea>
 8008ca4:	6821      	ldr	r1, [r4, #0]
 8008ca6:	1a6d      	subs	r5, r5, r1
 8008ca8:	4629      	mov	r1, r5
 8008caa:	4630      	mov	r0, r6
 8008cac:	f7ff ffa6 	bl	8008bfc <sbrk_aligned>
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	d03a      	beq.n	8008d2a <_malloc_r+0xea>
 8008cb4:	6823      	ldr	r3, [r4, #0]
 8008cb6:	442b      	add	r3, r5
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	f8d8 3000 	ldr.w	r3, [r8]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	bb62      	cbnz	r2, 8008d1c <_malloc_r+0xdc>
 8008cc2:	f8c8 7000 	str.w	r7, [r8]
 8008cc6:	e00f      	b.n	8008ce8 <_malloc_r+0xa8>
 8008cc8:	6822      	ldr	r2, [r4, #0]
 8008cca:	1b52      	subs	r2, r2, r5
 8008ccc:	d420      	bmi.n	8008d10 <_malloc_r+0xd0>
 8008cce:	2a0b      	cmp	r2, #11
 8008cd0:	d917      	bls.n	8008d02 <_malloc_r+0xc2>
 8008cd2:	1961      	adds	r1, r4, r5
 8008cd4:	42a3      	cmp	r3, r4
 8008cd6:	6025      	str	r5, [r4, #0]
 8008cd8:	bf18      	it	ne
 8008cda:	6059      	strne	r1, [r3, #4]
 8008cdc:	6863      	ldr	r3, [r4, #4]
 8008cde:	bf08      	it	eq
 8008ce0:	f8c8 1000 	streq.w	r1, [r8]
 8008ce4:	5162      	str	r2, [r4, r5]
 8008ce6:	604b      	str	r3, [r1, #4]
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f000 f82f 	bl	8008d4c <__malloc_unlock>
 8008cee:	f104 000b 	add.w	r0, r4, #11
 8008cf2:	1d23      	adds	r3, r4, #4
 8008cf4:	f020 0007 	bic.w	r0, r0, #7
 8008cf8:	1ac2      	subs	r2, r0, r3
 8008cfa:	bf1c      	itt	ne
 8008cfc:	1a1b      	subne	r3, r3, r0
 8008cfe:	50a3      	strne	r3, [r4, r2]
 8008d00:	e7af      	b.n	8008c62 <_malloc_r+0x22>
 8008d02:	6862      	ldr	r2, [r4, #4]
 8008d04:	42a3      	cmp	r3, r4
 8008d06:	bf0c      	ite	eq
 8008d08:	f8c8 2000 	streq.w	r2, [r8]
 8008d0c:	605a      	strne	r2, [r3, #4]
 8008d0e:	e7eb      	b.n	8008ce8 <_malloc_r+0xa8>
 8008d10:	4623      	mov	r3, r4
 8008d12:	6864      	ldr	r4, [r4, #4]
 8008d14:	e7ae      	b.n	8008c74 <_malloc_r+0x34>
 8008d16:	463c      	mov	r4, r7
 8008d18:	687f      	ldr	r7, [r7, #4]
 8008d1a:	e7b6      	b.n	8008c8a <_malloc_r+0x4a>
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	42a3      	cmp	r3, r4
 8008d22:	d1fb      	bne.n	8008d1c <_malloc_r+0xdc>
 8008d24:	2300      	movs	r3, #0
 8008d26:	6053      	str	r3, [r2, #4]
 8008d28:	e7de      	b.n	8008ce8 <_malloc_r+0xa8>
 8008d2a:	230c      	movs	r3, #12
 8008d2c:	6033      	str	r3, [r6, #0]
 8008d2e:	4630      	mov	r0, r6
 8008d30:	f000 f80c 	bl	8008d4c <__malloc_unlock>
 8008d34:	e794      	b.n	8008c60 <_malloc_r+0x20>
 8008d36:	6005      	str	r5, [r0, #0]
 8008d38:	e7d6      	b.n	8008ce8 <_malloc_r+0xa8>
 8008d3a:	bf00      	nop
 8008d3c:	20025c44 	.word	0x20025c44

08008d40 <__malloc_lock>:
 8008d40:	4801      	ldr	r0, [pc, #4]	@ (8008d48 <__malloc_lock+0x8>)
 8008d42:	f7ff bf0e 	b.w	8008b62 <__retarget_lock_acquire_recursive>
 8008d46:	bf00      	nop
 8008d48:	20025c3c 	.word	0x20025c3c

08008d4c <__malloc_unlock>:
 8008d4c:	4801      	ldr	r0, [pc, #4]	@ (8008d54 <__malloc_unlock+0x8>)
 8008d4e:	f7ff bf09 	b.w	8008b64 <__retarget_lock_release_recursive>
 8008d52:	bf00      	nop
 8008d54:	20025c3c 	.word	0x20025c3c

08008d58 <__sfputc_r>:
 8008d58:	6893      	ldr	r3, [r2, #8]
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	b410      	push	{r4}
 8008d60:	6093      	str	r3, [r2, #8]
 8008d62:	da08      	bge.n	8008d76 <__sfputc_r+0x1e>
 8008d64:	6994      	ldr	r4, [r2, #24]
 8008d66:	42a3      	cmp	r3, r4
 8008d68:	db01      	blt.n	8008d6e <__sfputc_r+0x16>
 8008d6a:	290a      	cmp	r1, #10
 8008d6c:	d103      	bne.n	8008d76 <__sfputc_r+0x1e>
 8008d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d72:	f7ff bde8 	b.w	8008946 <__swbuf_r>
 8008d76:	6813      	ldr	r3, [r2, #0]
 8008d78:	1c58      	adds	r0, r3, #1
 8008d7a:	6010      	str	r0, [r2, #0]
 8008d7c:	7019      	strb	r1, [r3, #0]
 8008d7e:	4608      	mov	r0, r1
 8008d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <__sfputs_r>:
 8008d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d88:	4606      	mov	r6, r0
 8008d8a:	460f      	mov	r7, r1
 8008d8c:	4614      	mov	r4, r2
 8008d8e:	18d5      	adds	r5, r2, r3
 8008d90:	42ac      	cmp	r4, r5
 8008d92:	d101      	bne.n	8008d98 <__sfputs_r+0x12>
 8008d94:	2000      	movs	r0, #0
 8008d96:	e007      	b.n	8008da8 <__sfputs_r+0x22>
 8008d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d9c:	463a      	mov	r2, r7
 8008d9e:	4630      	mov	r0, r6
 8008da0:	f7ff ffda 	bl	8008d58 <__sfputc_r>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d1f3      	bne.n	8008d90 <__sfputs_r+0xa>
 8008da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008dac <_vfiprintf_r>:
 8008dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db0:	460d      	mov	r5, r1
 8008db2:	b09d      	sub	sp, #116	@ 0x74
 8008db4:	4614      	mov	r4, r2
 8008db6:	4698      	mov	r8, r3
 8008db8:	4606      	mov	r6, r0
 8008dba:	b118      	cbz	r0, 8008dc4 <_vfiprintf_r+0x18>
 8008dbc:	6a03      	ldr	r3, [r0, #32]
 8008dbe:	b90b      	cbnz	r3, 8008dc4 <_vfiprintf_r+0x18>
 8008dc0:	f7ff fd36 	bl	8008830 <__sinit>
 8008dc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dc6:	07d9      	lsls	r1, r3, #31
 8008dc8:	d405      	bmi.n	8008dd6 <_vfiprintf_r+0x2a>
 8008dca:	89ab      	ldrh	r3, [r5, #12]
 8008dcc:	059a      	lsls	r2, r3, #22
 8008dce:	d402      	bmi.n	8008dd6 <_vfiprintf_r+0x2a>
 8008dd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dd2:	f7ff fec6 	bl	8008b62 <__retarget_lock_acquire_recursive>
 8008dd6:	89ab      	ldrh	r3, [r5, #12]
 8008dd8:	071b      	lsls	r3, r3, #28
 8008dda:	d501      	bpl.n	8008de0 <_vfiprintf_r+0x34>
 8008ddc:	692b      	ldr	r3, [r5, #16]
 8008dde:	b99b      	cbnz	r3, 8008e08 <_vfiprintf_r+0x5c>
 8008de0:	4629      	mov	r1, r5
 8008de2:	4630      	mov	r0, r6
 8008de4:	f7ff fdee 	bl	80089c4 <__swsetup_r>
 8008de8:	b170      	cbz	r0, 8008e08 <_vfiprintf_r+0x5c>
 8008dea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dec:	07dc      	lsls	r4, r3, #31
 8008dee:	d504      	bpl.n	8008dfa <_vfiprintf_r+0x4e>
 8008df0:	f04f 30ff 	mov.w	r0, #4294967295
 8008df4:	b01d      	add	sp, #116	@ 0x74
 8008df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dfa:	89ab      	ldrh	r3, [r5, #12]
 8008dfc:	0598      	lsls	r0, r3, #22
 8008dfe:	d4f7      	bmi.n	8008df0 <_vfiprintf_r+0x44>
 8008e00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e02:	f7ff feaf 	bl	8008b64 <__retarget_lock_release_recursive>
 8008e06:	e7f3      	b.n	8008df0 <_vfiprintf_r+0x44>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e0c:	2320      	movs	r3, #32
 8008e0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e12:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e16:	2330      	movs	r3, #48	@ 0x30
 8008e18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008fc8 <_vfiprintf_r+0x21c>
 8008e1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e20:	f04f 0901 	mov.w	r9, #1
 8008e24:	4623      	mov	r3, r4
 8008e26:	469a      	mov	sl, r3
 8008e28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e2c:	b10a      	cbz	r2, 8008e32 <_vfiprintf_r+0x86>
 8008e2e:	2a25      	cmp	r2, #37	@ 0x25
 8008e30:	d1f9      	bne.n	8008e26 <_vfiprintf_r+0x7a>
 8008e32:	ebba 0b04 	subs.w	fp, sl, r4
 8008e36:	d00b      	beq.n	8008e50 <_vfiprintf_r+0xa4>
 8008e38:	465b      	mov	r3, fp
 8008e3a:	4622      	mov	r2, r4
 8008e3c:	4629      	mov	r1, r5
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f7ff ffa1 	bl	8008d86 <__sfputs_r>
 8008e44:	3001      	adds	r0, #1
 8008e46:	f000 80a7 	beq.w	8008f98 <_vfiprintf_r+0x1ec>
 8008e4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e4c:	445a      	add	r2, fp
 8008e4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e50:	f89a 3000 	ldrb.w	r3, [sl]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 809f 	beq.w	8008f98 <_vfiprintf_r+0x1ec>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e64:	f10a 0a01 	add.w	sl, sl, #1
 8008e68:	9304      	str	r3, [sp, #16]
 8008e6a:	9307      	str	r3, [sp, #28]
 8008e6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e70:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e72:	4654      	mov	r4, sl
 8008e74:	2205      	movs	r2, #5
 8008e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e7a:	4853      	ldr	r0, [pc, #332]	@ (8008fc8 <_vfiprintf_r+0x21c>)
 8008e7c:	f7f7 f9b8 	bl	80001f0 <memchr>
 8008e80:	9a04      	ldr	r2, [sp, #16]
 8008e82:	b9d8      	cbnz	r0, 8008ebc <_vfiprintf_r+0x110>
 8008e84:	06d1      	lsls	r1, r2, #27
 8008e86:	bf44      	itt	mi
 8008e88:	2320      	movmi	r3, #32
 8008e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e8e:	0713      	lsls	r3, r2, #28
 8008e90:	bf44      	itt	mi
 8008e92:	232b      	movmi	r3, #43	@ 0x2b
 8008e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e98:	f89a 3000 	ldrb.w	r3, [sl]
 8008e9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e9e:	d015      	beq.n	8008ecc <_vfiprintf_r+0x120>
 8008ea0:	9a07      	ldr	r2, [sp, #28]
 8008ea2:	4654      	mov	r4, sl
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	f04f 0c0a 	mov.w	ip, #10
 8008eaa:	4621      	mov	r1, r4
 8008eac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eb0:	3b30      	subs	r3, #48	@ 0x30
 8008eb2:	2b09      	cmp	r3, #9
 8008eb4:	d94b      	bls.n	8008f4e <_vfiprintf_r+0x1a2>
 8008eb6:	b1b0      	cbz	r0, 8008ee6 <_vfiprintf_r+0x13a>
 8008eb8:	9207      	str	r2, [sp, #28]
 8008eba:	e014      	b.n	8008ee6 <_vfiprintf_r+0x13a>
 8008ebc:	eba0 0308 	sub.w	r3, r0, r8
 8008ec0:	fa09 f303 	lsl.w	r3, r9, r3
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	9304      	str	r3, [sp, #16]
 8008ec8:	46a2      	mov	sl, r4
 8008eca:	e7d2      	b.n	8008e72 <_vfiprintf_r+0xc6>
 8008ecc:	9b03      	ldr	r3, [sp, #12]
 8008ece:	1d19      	adds	r1, r3, #4
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	9103      	str	r1, [sp, #12]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	bfbb      	ittet	lt
 8008ed8:	425b      	neglt	r3, r3
 8008eda:	f042 0202 	orrlt.w	r2, r2, #2
 8008ede:	9307      	strge	r3, [sp, #28]
 8008ee0:	9307      	strlt	r3, [sp, #28]
 8008ee2:	bfb8      	it	lt
 8008ee4:	9204      	strlt	r2, [sp, #16]
 8008ee6:	7823      	ldrb	r3, [r4, #0]
 8008ee8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008eea:	d10a      	bne.n	8008f02 <_vfiprintf_r+0x156>
 8008eec:	7863      	ldrb	r3, [r4, #1]
 8008eee:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ef0:	d132      	bne.n	8008f58 <_vfiprintf_r+0x1ac>
 8008ef2:	9b03      	ldr	r3, [sp, #12]
 8008ef4:	1d1a      	adds	r2, r3, #4
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	9203      	str	r2, [sp, #12]
 8008efa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008efe:	3402      	adds	r4, #2
 8008f00:	9305      	str	r3, [sp, #20]
 8008f02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008fd8 <_vfiprintf_r+0x22c>
 8008f06:	7821      	ldrb	r1, [r4, #0]
 8008f08:	2203      	movs	r2, #3
 8008f0a:	4650      	mov	r0, sl
 8008f0c:	f7f7 f970 	bl	80001f0 <memchr>
 8008f10:	b138      	cbz	r0, 8008f22 <_vfiprintf_r+0x176>
 8008f12:	9b04      	ldr	r3, [sp, #16]
 8008f14:	eba0 000a 	sub.w	r0, r0, sl
 8008f18:	2240      	movs	r2, #64	@ 0x40
 8008f1a:	4082      	lsls	r2, r0
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	3401      	adds	r4, #1
 8008f20:	9304      	str	r3, [sp, #16]
 8008f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f26:	4829      	ldr	r0, [pc, #164]	@ (8008fcc <_vfiprintf_r+0x220>)
 8008f28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f2c:	2206      	movs	r2, #6
 8008f2e:	f7f7 f95f 	bl	80001f0 <memchr>
 8008f32:	2800      	cmp	r0, #0
 8008f34:	d03f      	beq.n	8008fb6 <_vfiprintf_r+0x20a>
 8008f36:	4b26      	ldr	r3, [pc, #152]	@ (8008fd0 <_vfiprintf_r+0x224>)
 8008f38:	bb1b      	cbnz	r3, 8008f82 <_vfiprintf_r+0x1d6>
 8008f3a:	9b03      	ldr	r3, [sp, #12]
 8008f3c:	3307      	adds	r3, #7
 8008f3e:	f023 0307 	bic.w	r3, r3, #7
 8008f42:	3308      	adds	r3, #8
 8008f44:	9303      	str	r3, [sp, #12]
 8008f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f48:	443b      	add	r3, r7
 8008f4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f4c:	e76a      	b.n	8008e24 <_vfiprintf_r+0x78>
 8008f4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f52:	460c      	mov	r4, r1
 8008f54:	2001      	movs	r0, #1
 8008f56:	e7a8      	b.n	8008eaa <_vfiprintf_r+0xfe>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	3401      	adds	r4, #1
 8008f5c:	9305      	str	r3, [sp, #20]
 8008f5e:	4619      	mov	r1, r3
 8008f60:	f04f 0c0a 	mov.w	ip, #10
 8008f64:	4620      	mov	r0, r4
 8008f66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f6a:	3a30      	subs	r2, #48	@ 0x30
 8008f6c:	2a09      	cmp	r2, #9
 8008f6e:	d903      	bls.n	8008f78 <_vfiprintf_r+0x1cc>
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d0c6      	beq.n	8008f02 <_vfiprintf_r+0x156>
 8008f74:	9105      	str	r1, [sp, #20]
 8008f76:	e7c4      	b.n	8008f02 <_vfiprintf_r+0x156>
 8008f78:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e7f0      	b.n	8008f64 <_vfiprintf_r+0x1b8>
 8008f82:	ab03      	add	r3, sp, #12
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	462a      	mov	r2, r5
 8008f88:	4b12      	ldr	r3, [pc, #72]	@ (8008fd4 <_vfiprintf_r+0x228>)
 8008f8a:	a904      	add	r1, sp, #16
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	f3af 8000 	nop.w
 8008f92:	4607      	mov	r7, r0
 8008f94:	1c78      	adds	r0, r7, #1
 8008f96:	d1d6      	bne.n	8008f46 <_vfiprintf_r+0x19a>
 8008f98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f9a:	07d9      	lsls	r1, r3, #31
 8008f9c:	d405      	bmi.n	8008faa <_vfiprintf_r+0x1fe>
 8008f9e:	89ab      	ldrh	r3, [r5, #12]
 8008fa0:	059a      	lsls	r2, r3, #22
 8008fa2:	d402      	bmi.n	8008faa <_vfiprintf_r+0x1fe>
 8008fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fa6:	f7ff fddd 	bl	8008b64 <__retarget_lock_release_recursive>
 8008faa:	89ab      	ldrh	r3, [r5, #12]
 8008fac:	065b      	lsls	r3, r3, #25
 8008fae:	f53f af1f 	bmi.w	8008df0 <_vfiprintf_r+0x44>
 8008fb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fb4:	e71e      	b.n	8008df4 <_vfiprintf_r+0x48>
 8008fb6:	ab03      	add	r3, sp, #12
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	462a      	mov	r2, r5
 8008fbc:	4b05      	ldr	r3, [pc, #20]	@ (8008fd4 <_vfiprintf_r+0x228>)
 8008fbe:	a904      	add	r1, sp, #16
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f000 f879 	bl	80090b8 <_printf_i>
 8008fc6:	e7e4      	b.n	8008f92 <_vfiprintf_r+0x1e6>
 8008fc8:	0800a7d9 	.word	0x0800a7d9
 8008fcc:	0800a7e3 	.word	0x0800a7e3
 8008fd0:	00000000 	.word	0x00000000
 8008fd4:	08008d87 	.word	0x08008d87
 8008fd8:	0800a7df 	.word	0x0800a7df

08008fdc <_printf_common>:
 8008fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fe0:	4616      	mov	r6, r2
 8008fe2:	4698      	mov	r8, r3
 8008fe4:	688a      	ldr	r2, [r1, #8]
 8008fe6:	690b      	ldr	r3, [r1, #16]
 8008fe8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008fec:	4293      	cmp	r3, r2
 8008fee:	bfb8      	it	lt
 8008ff0:	4613      	movlt	r3, r2
 8008ff2:	6033      	str	r3, [r6, #0]
 8008ff4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	b10a      	cbz	r2, 8009002 <_printf_common+0x26>
 8008ffe:	3301      	adds	r3, #1
 8009000:	6033      	str	r3, [r6, #0]
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	0699      	lsls	r1, r3, #26
 8009006:	bf42      	ittt	mi
 8009008:	6833      	ldrmi	r3, [r6, #0]
 800900a:	3302      	addmi	r3, #2
 800900c:	6033      	strmi	r3, [r6, #0]
 800900e:	6825      	ldr	r5, [r4, #0]
 8009010:	f015 0506 	ands.w	r5, r5, #6
 8009014:	d106      	bne.n	8009024 <_printf_common+0x48>
 8009016:	f104 0a19 	add.w	sl, r4, #25
 800901a:	68e3      	ldr	r3, [r4, #12]
 800901c:	6832      	ldr	r2, [r6, #0]
 800901e:	1a9b      	subs	r3, r3, r2
 8009020:	42ab      	cmp	r3, r5
 8009022:	dc26      	bgt.n	8009072 <_printf_common+0x96>
 8009024:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009028:	6822      	ldr	r2, [r4, #0]
 800902a:	3b00      	subs	r3, #0
 800902c:	bf18      	it	ne
 800902e:	2301      	movne	r3, #1
 8009030:	0692      	lsls	r2, r2, #26
 8009032:	d42b      	bmi.n	800908c <_printf_common+0xb0>
 8009034:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009038:	4641      	mov	r1, r8
 800903a:	4638      	mov	r0, r7
 800903c:	47c8      	blx	r9
 800903e:	3001      	adds	r0, #1
 8009040:	d01e      	beq.n	8009080 <_printf_common+0xa4>
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	6922      	ldr	r2, [r4, #16]
 8009046:	f003 0306 	and.w	r3, r3, #6
 800904a:	2b04      	cmp	r3, #4
 800904c:	bf02      	ittt	eq
 800904e:	68e5      	ldreq	r5, [r4, #12]
 8009050:	6833      	ldreq	r3, [r6, #0]
 8009052:	1aed      	subeq	r5, r5, r3
 8009054:	68a3      	ldr	r3, [r4, #8]
 8009056:	bf0c      	ite	eq
 8009058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800905c:	2500      	movne	r5, #0
 800905e:	4293      	cmp	r3, r2
 8009060:	bfc4      	itt	gt
 8009062:	1a9b      	subgt	r3, r3, r2
 8009064:	18ed      	addgt	r5, r5, r3
 8009066:	2600      	movs	r6, #0
 8009068:	341a      	adds	r4, #26
 800906a:	42b5      	cmp	r5, r6
 800906c:	d11a      	bne.n	80090a4 <_printf_common+0xc8>
 800906e:	2000      	movs	r0, #0
 8009070:	e008      	b.n	8009084 <_printf_common+0xa8>
 8009072:	2301      	movs	r3, #1
 8009074:	4652      	mov	r2, sl
 8009076:	4641      	mov	r1, r8
 8009078:	4638      	mov	r0, r7
 800907a:	47c8      	blx	r9
 800907c:	3001      	adds	r0, #1
 800907e:	d103      	bne.n	8009088 <_printf_common+0xac>
 8009080:	f04f 30ff 	mov.w	r0, #4294967295
 8009084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009088:	3501      	adds	r5, #1
 800908a:	e7c6      	b.n	800901a <_printf_common+0x3e>
 800908c:	18e1      	adds	r1, r4, r3
 800908e:	1c5a      	adds	r2, r3, #1
 8009090:	2030      	movs	r0, #48	@ 0x30
 8009092:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009096:	4422      	add	r2, r4
 8009098:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800909c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80090a0:	3302      	adds	r3, #2
 80090a2:	e7c7      	b.n	8009034 <_printf_common+0x58>
 80090a4:	2301      	movs	r3, #1
 80090a6:	4622      	mov	r2, r4
 80090a8:	4641      	mov	r1, r8
 80090aa:	4638      	mov	r0, r7
 80090ac:	47c8      	blx	r9
 80090ae:	3001      	adds	r0, #1
 80090b0:	d0e6      	beq.n	8009080 <_printf_common+0xa4>
 80090b2:	3601      	adds	r6, #1
 80090b4:	e7d9      	b.n	800906a <_printf_common+0x8e>
	...

080090b8 <_printf_i>:
 80090b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090bc:	7e0f      	ldrb	r7, [r1, #24]
 80090be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80090c0:	2f78      	cmp	r7, #120	@ 0x78
 80090c2:	4691      	mov	r9, r2
 80090c4:	4680      	mov	r8, r0
 80090c6:	460c      	mov	r4, r1
 80090c8:	469a      	mov	sl, r3
 80090ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80090ce:	d807      	bhi.n	80090e0 <_printf_i+0x28>
 80090d0:	2f62      	cmp	r7, #98	@ 0x62
 80090d2:	d80a      	bhi.n	80090ea <_printf_i+0x32>
 80090d4:	2f00      	cmp	r7, #0
 80090d6:	f000 80d2 	beq.w	800927e <_printf_i+0x1c6>
 80090da:	2f58      	cmp	r7, #88	@ 0x58
 80090dc:	f000 80b9 	beq.w	8009252 <_printf_i+0x19a>
 80090e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80090e8:	e03a      	b.n	8009160 <_printf_i+0xa8>
 80090ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80090ee:	2b15      	cmp	r3, #21
 80090f0:	d8f6      	bhi.n	80090e0 <_printf_i+0x28>
 80090f2:	a101      	add	r1, pc, #4	@ (adr r1, 80090f8 <_printf_i+0x40>)
 80090f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090f8:	08009151 	.word	0x08009151
 80090fc:	08009165 	.word	0x08009165
 8009100:	080090e1 	.word	0x080090e1
 8009104:	080090e1 	.word	0x080090e1
 8009108:	080090e1 	.word	0x080090e1
 800910c:	080090e1 	.word	0x080090e1
 8009110:	08009165 	.word	0x08009165
 8009114:	080090e1 	.word	0x080090e1
 8009118:	080090e1 	.word	0x080090e1
 800911c:	080090e1 	.word	0x080090e1
 8009120:	080090e1 	.word	0x080090e1
 8009124:	08009265 	.word	0x08009265
 8009128:	0800918f 	.word	0x0800918f
 800912c:	0800921f 	.word	0x0800921f
 8009130:	080090e1 	.word	0x080090e1
 8009134:	080090e1 	.word	0x080090e1
 8009138:	08009287 	.word	0x08009287
 800913c:	080090e1 	.word	0x080090e1
 8009140:	0800918f 	.word	0x0800918f
 8009144:	080090e1 	.word	0x080090e1
 8009148:	080090e1 	.word	0x080090e1
 800914c:	08009227 	.word	0x08009227
 8009150:	6833      	ldr	r3, [r6, #0]
 8009152:	1d1a      	adds	r2, r3, #4
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	6032      	str	r2, [r6, #0]
 8009158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800915c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009160:	2301      	movs	r3, #1
 8009162:	e09d      	b.n	80092a0 <_printf_i+0x1e8>
 8009164:	6833      	ldr	r3, [r6, #0]
 8009166:	6820      	ldr	r0, [r4, #0]
 8009168:	1d19      	adds	r1, r3, #4
 800916a:	6031      	str	r1, [r6, #0]
 800916c:	0606      	lsls	r6, r0, #24
 800916e:	d501      	bpl.n	8009174 <_printf_i+0xbc>
 8009170:	681d      	ldr	r5, [r3, #0]
 8009172:	e003      	b.n	800917c <_printf_i+0xc4>
 8009174:	0645      	lsls	r5, r0, #25
 8009176:	d5fb      	bpl.n	8009170 <_printf_i+0xb8>
 8009178:	f9b3 5000 	ldrsh.w	r5, [r3]
 800917c:	2d00      	cmp	r5, #0
 800917e:	da03      	bge.n	8009188 <_printf_i+0xd0>
 8009180:	232d      	movs	r3, #45	@ 0x2d
 8009182:	426d      	negs	r5, r5
 8009184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009188:	4859      	ldr	r0, [pc, #356]	@ (80092f0 <_printf_i+0x238>)
 800918a:	230a      	movs	r3, #10
 800918c:	e011      	b.n	80091b2 <_printf_i+0xfa>
 800918e:	6821      	ldr	r1, [r4, #0]
 8009190:	6833      	ldr	r3, [r6, #0]
 8009192:	0608      	lsls	r0, r1, #24
 8009194:	f853 5b04 	ldr.w	r5, [r3], #4
 8009198:	d402      	bmi.n	80091a0 <_printf_i+0xe8>
 800919a:	0649      	lsls	r1, r1, #25
 800919c:	bf48      	it	mi
 800919e:	b2ad      	uxthmi	r5, r5
 80091a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80091a2:	4853      	ldr	r0, [pc, #332]	@ (80092f0 <_printf_i+0x238>)
 80091a4:	6033      	str	r3, [r6, #0]
 80091a6:	bf14      	ite	ne
 80091a8:	230a      	movne	r3, #10
 80091aa:	2308      	moveq	r3, #8
 80091ac:	2100      	movs	r1, #0
 80091ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80091b2:	6866      	ldr	r6, [r4, #4]
 80091b4:	60a6      	str	r6, [r4, #8]
 80091b6:	2e00      	cmp	r6, #0
 80091b8:	bfa2      	ittt	ge
 80091ba:	6821      	ldrge	r1, [r4, #0]
 80091bc:	f021 0104 	bicge.w	r1, r1, #4
 80091c0:	6021      	strge	r1, [r4, #0]
 80091c2:	b90d      	cbnz	r5, 80091c8 <_printf_i+0x110>
 80091c4:	2e00      	cmp	r6, #0
 80091c6:	d04b      	beq.n	8009260 <_printf_i+0x1a8>
 80091c8:	4616      	mov	r6, r2
 80091ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80091ce:	fb03 5711 	mls	r7, r3, r1, r5
 80091d2:	5dc7      	ldrb	r7, [r0, r7]
 80091d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80091d8:	462f      	mov	r7, r5
 80091da:	42bb      	cmp	r3, r7
 80091dc:	460d      	mov	r5, r1
 80091de:	d9f4      	bls.n	80091ca <_printf_i+0x112>
 80091e0:	2b08      	cmp	r3, #8
 80091e2:	d10b      	bne.n	80091fc <_printf_i+0x144>
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	07df      	lsls	r7, r3, #31
 80091e8:	d508      	bpl.n	80091fc <_printf_i+0x144>
 80091ea:	6923      	ldr	r3, [r4, #16]
 80091ec:	6861      	ldr	r1, [r4, #4]
 80091ee:	4299      	cmp	r1, r3
 80091f0:	bfde      	ittt	le
 80091f2:	2330      	movle	r3, #48	@ 0x30
 80091f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80091fc:	1b92      	subs	r2, r2, r6
 80091fe:	6122      	str	r2, [r4, #16]
 8009200:	f8cd a000 	str.w	sl, [sp]
 8009204:	464b      	mov	r3, r9
 8009206:	aa03      	add	r2, sp, #12
 8009208:	4621      	mov	r1, r4
 800920a:	4640      	mov	r0, r8
 800920c:	f7ff fee6 	bl	8008fdc <_printf_common>
 8009210:	3001      	adds	r0, #1
 8009212:	d14a      	bne.n	80092aa <_printf_i+0x1f2>
 8009214:	f04f 30ff 	mov.w	r0, #4294967295
 8009218:	b004      	add	sp, #16
 800921a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	f043 0320 	orr.w	r3, r3, #32
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	4833      	ldr	r0, [pc, #204]	@ (80092f4 <_printf_i+0x23c>)
 8009228:	2778      	movs	r7, #120	@ 0x78
 800922a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	6831      	ldr	r1, [r6, #0]
 8009232:	061f      	lsls	r7, r3, #24
 8009234:	f851 5b04 	ldr.w	r5, [r1], #4
 8009238:	d402      	bmi.n	8009240 <_printf_i+0x188>
 800923a:	065f      	lsls	r7, r3, #25
 800923c:	bf48      	it	mi
 800923e:	b2ad      	uxthmi	r5, r5
 8009240:	6031      	str	r1, [r6, #0]
 8009242:	07d9      	lsls	r1, r3, #31
 8009244:	bf44      	itt	mi
 8009246:	f043 0320 	orrmi.w	r3, r3, #32
 800924a:	6023      	strmi	r3, [r4, #0]
 800924c:	b11d      	cbz	r5, 8009256 <_printf_i+0x19e>
 800924e:	2310      	movs	r3, #16
 8009250:	e7ac      	b.n	80091ac <_printf_i+0xf4>
 8009252:	4827      	ldr	r0, [pc, #156]	@ (80092f0 <_printf_i+0x238>)
 8009254:	e7e9      	b.n	800922a <_printf_i+0x172>
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	f023 0320 	bic.w	r3, r3, #32
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	e7f6      	b.n	800924e <_printf_i+0x196>
 8009260:	4616      	mov	r6, r2
 8009262:	e7bd      	b.n	80091e0 <_printf_i+0x128>
 8009264:	6833      	ldr	r3, [r6, #0]
 8009266:	6825      	ldr	r5, [r4, #0]
 8009268:	6961      	ldr	r1, [r4, #20]
 800926a:	1d18      	adds	r0, r3, #4
 800926c:	6030      	str	r0, [r6, #0]
 800926e:	062e      	lsls	r6, r5, #24
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	d501      	bpl.n	8009278 <_printf_i+0x1c0>
 8009274:	6019      	str	r1, [r3, #0]
 8009276:	e002      	b.n	800927e <_printf_i+0x1c6>
 8009278:	0668      	lsls	r0, r5, #25
 800927a:	d5fb      	bpl.n	8009274 <_printf_i+0x1bc>
 800927c:	8019      	strh	r1, [r3, #0]
 800927e:	2300      	movs	r3, #0
 8009280:	6123      	str	r3, [r4, #16]
 8009282:	4616      	mov	r6, r2
 8009284:	e7bc      	b.n	8009200 <_printf_i+0x148>
 8009286:	6833      	ldr	r3, [r6, #0]
 8009288:	1d1a      	adds	r2, r3, #4
 800928a:	6032      	str	r2, [r6, #0]
 800928c:	681e      	ldr	r6, [r3, #0]
 800928e:	6862      	ldr	r2, [r4, #4]
 8009290:	2100      	movs	r1, #0
 8009292:	4630      	mov	r0, r6
 8009294:	f7f6 ffac 	bl	80001f0 <memchr>
 8009298:	b108      	cbz	r0, 800929e <_printf_i+0x1e6>
 800929a:	1b80      	subs	r0, r0, r6
 800929c:	6060      	str	r0, [r4, #4]
 800929e:	6863      	ldr	r3, [r4, #4]
 80092a0:	6123      	str	r3, [r4, #16]
 80092a2:	2300      	movs	r3, #0
 80092a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092a8:	e7aa      	b.n	8009200 <_printf_i+0x148>
 80092aa:	6923      	ldr	r3, [r4, #16]
 80092ac:	4632      	mov	r2, r6
 80092ae:	4649      	mov	r1, r9
 80092b0:	4640      	mov	r0, r8
 80092b2:	47d0      	blx	sl
 80092b4:	3001      	adds	r0, #1
 80092b6:	d0ad      	beq.n	8009214 <_printf_i+0x15c>
 80092b8:	6823      	ldr	r3, [r4, #0]
 80092ba:	079b      	lsls	r3, r3, #30
 80092bc:	d413      	bmi.n	80092e6 <_printf_i+0x22e>
 80092be:	68e0      	ldr	r0, [r4, #12]
 80092c0:	9b03      	ldr	r3, [sp, #12]
 80092c2:	4298      	cmp	r0, r3
 80092c4:	bfb8      	it	lt
 80092c6:	4618      	movlt	r0, r3
 80092c8:	e7a6      	b.n	8009218 <_printf_i+0x160>
 80092ca:	2301      	movs	r3, #1
 80092cc:	4632      	mov	r2, r6
 80092ce:	4649      	mov	r1, r9
 80092d0:	4640      	mov	r0, r8
 80092d2:	47d0      	blx	sl
 80092d4:	3001      	adds	r0, #1
 80092d6:	d09d      	beq.n	8009214 <_printf_i+0x15c>
 80092d8:	3501      	adds	r5, #1
 80092da:	68e3      	ldr	r3, [r4, #12]
 80092dc:	9903      	ldr	r1, [sp, #12]
 80092de:	1a5b      	subs	r3, r3, r1
 80092e0:	42ab      	cmp	r3, r5
 80092e2:	dcf2      	bgt.n	80092ca <_printf_i+0x212>
 80092e4:	e7eb      	b.n	80092be <_printf_i+0x206>
 80092e6:	2500      	movs	r5, #0
 80092e8:	f104 0619 	add.w	r6, r4, #25
 80092ec:	e7f5      	b.n	80092da <_printf_i+0x222>
 80092ee:	bf00      	nop
 80092f0:	0800a7ea 	.word	0x0800a7ea
 80092f4:	0800a7fb 	.word	0x0800a7fb

080092f8 <__sflush_r>:
 80092f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009300:	0716      	lsls	r6, r2, #28
 8009302:	4605      	mov	r5, r0
 8009304:	460c      	mov	r4, r1
 8009306:	d454      	bmi.n	80093b2 <__sflush_r+0xba>
 8009308:	684b      	ldr	r3, [r1, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	dc02      	bgt.n	8009314 <__sflush_r+0x1c>
 800930e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009310:	2b00      	cmp	r3, #0
 8009312:	dd48      	ble.n	80093a6 <__sflush_r+0xae>
 8009314:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009316:	2e00      	cmp	r6, #0
 8009318:	d045      	beq.n	80093a6 <__sflush_r+0xae>
 800931a:	2300      	movs	r3, #0
 800931c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009320:	682f      	ldr	r7, [r5, #0]
 8009322:	6a21      	ldr	r1, [r4, #32]
 8009324:	602b      	str	r3, [r5, #0]
 8009326:	d030      	beq.n	800938a <__sflush_r+0x92>
 8009328:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800932a:	89a3      	ldrh	r3, [r4, #12]
 800932c:	0759      	lsls	r1, r3, #29
 800932e:	d505      	bpl.n	800933c <__sflush_r+0x44>
 8009330:	6863      	ldr	r3, [r4, #4]
 8009332:	1ad2      	subs	r2, r2, r3
 8009334:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009336:	b10b      	cbz	r3, 800933c <__sflush_r+0x44>
 8009338:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800933a:	1ad2      	subs	r2, r2, r3
 800933c:	2300      	movs	r3, #0
 800933e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009340:	6a21      	ldr	r1, [r4, #32]
 8009342:	4628      	mov	r0, r5
 8009344:	47b0      	blx	r6
 8009346:	1c43      	adds	r3, r0, #1
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	d106      	bne.n	800935a <__sflush_r+0x62>
 800934c:	6829      	ldr	r1, [r5, #0]
 800934e:	291d      	cmp	r1, #29
 8009350:	d82b      	bhi.n	80093aa <__sflush_r+0xb2>
 8009352:	4a2a      	ldr	r2, [pc, #168]	@ (80093fc <__sflush_r+0x104>)
 8009354:	410a      	asrs	r2, r1
 8009356:	07d6      	lsls	r6, r2, #31
 8009358:	d427      	bmi.n	80093aa <__sflush_r+0xb2>
 800935a:	2200      	movs	r2, #0
 800935c:	6062      	str	r2, [r4, #4]
 800935e:	04d9      	lsls	r1, r3, #19
 8009360:	6922      	ldr	r2, [r4, #16]
 8009362:	6022      	str	r2, [r4, #0]
 8009364:	d504      	bpl.n	8009370 <__sflush_r+0x78>
 8009366:	1c42      	adds	r2, r0, #1
 8009368:	d101      	bne.n	800936e <__sflush_r+0x76>
 800936a:	682b      	ldr	r3, [r5, #0]
 800936c:	b903      	cbnz	r3, 8009370 <__sflush_r+0x78>
 800936e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009370:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009372:	602f      	str	r7, [r5, #0]
 8009374:	b1b9      	cbz	r1, 80093a6 <__sflush_r+0xae>
 8009376:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800937a:	4299      	cmp	r1, r3
 800937c:	d002      	beq.n	8009384 <__sflush_r+0x8c>
 800937e:	4628      	mov	r0, r5
 8009380:	f7ff fbf2 	bl	8008b68 <_free_r>
 8009384:	2300      	movs	r3, #0
 8009386:	6363      	str	r3, [r4, #52]	@ 0x34
 8009388:	e00d      	b.n	80093a6 <__sflush_r+0xae>
 800938a:	2301      	movs	r3, #1
 800938c:	4628      	mov	r0, r5
 800938e:	47b0      	blx	r6
 8009390:	4602      	mov	r2, r0
 8009392:	1c50      	adds	r0, r2, #1
 8009394:	d1c9      	bne.n	800932a <__sflush_r+0x32>
 8009396:	682b      	ldr	r3, [r5, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d0c6      	beq.n	800932a <__sflush_r+0x32>
 800939c:	2b1d      	cmp	r3, #29
 800939e:	d001      	beq.n	80093a4 <__sflush_r+0xac>
 80093a0:	2b16      	cmp	r3, #22
 80093a2:	d11e      	bne.n	80093e2 <__sflush_r+0xea>
 80093a4:	602f      	str	r7, [r5, #0]
 80093a6:	2000      	movs	r0, #0
 80093a8:	e022      	b.n	80093f0 <__sflush_r+0xf8>
 80093aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093ae:	b21b      	sxth	r3, r3
 80093b0:	e01b      	b.n	80093ea <__sflush_r+0xf2>
 80093b2:	690f      	ldr	r7, [r1, #16]
 80093b4:	2f00      	cmp	r7, #0
 80093b6:	d0f6      	beq.n	80093a6 <__sflush_r+0xae>
 80093b8:	0793      	lsls	r3, r2, #30
 80093ba:	680e      	ldr	r6, [r1, #0]
 80093bc:	bf08      	it	eq
 80093be:	694b      	ldreq	r3, [r1, #20]
 80093c0:	600f      	str	r7, [r1, #0]
 80093c2:	bf18      	it	ne
 80093c4:	2300      	movne	r3, #0
 80093c6:	eba6 0807 	sub.w	r8, r6, r7
 80093ca:	608b      	str	r3, [r1, #8]
 80093cc:	f1b8 0f00 	cmp.w	r8, #0
 80093d0:	dde9      	ble.n	80093a6 <__sflush_r+0xae>
 80093d2:	6a21      	ldr	r1, [r4, #32]
 80093d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80093d6:	4643      	mov	r3, r8
 80093d8:	463a      	mov	r2, r7
 80093da:	4628      	mov	r0, r5
 80093dc:	47b0      	blx	r6
 80093de:	2800      	cmp	r0, #0
 80093e0:	dc08      	bgt.n	80093f4 <__sflush_r+0xfc>
 80093e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093ea:	81a3      	strh	r3, [r4, #12]
 80093ec:	f04f 30ff 	mov.w	r0, #4294967295
 80093f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f4:	4407      	add	r7, r0
 80093f6:	eba8 0800 	sub.w	r8, r8, r0
 80093fa:	e7e7      	b.n	80093cc <__sflush_r+0xd4>
 80093fc:	dfbffffe 	.word	0xdfbffffe

08009400 <_fflush_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	690b      	ldr	r3, [r1, #16]
 8009404:	4605      	mov	r5, r0
 8009406:	460c      	mov	r4, r1
 8009408:	b913      	cbnz	r3, 8009410 <_fflush_r+0x10>
 800940a:	2500      	movs	r5, #0
 800940c:	4628      	mov	r0, r5
 800940e:	bd38      	pop	{r3, r4, r5, pc}
 8009410:	b118      	cbz	r0, 800941a <_fflush_r+0x1a>
 8009412:	6a03      	ldr	r3, [r0, #32]
 8009414:	b90b      	cbnz	r3, 800941a <_fflush_r+0x1a>
 8009416:	f7ff fa0b 	bl	8008830 <__sinit>
 800941a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d0f3      	beq.n	800940a <_fflush_r+0xa>
 8009422:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009424:	07d0      	lsls	r0, r2, #31
 8009426:	d404      	bmi.n	8009432 <_fflush_r+0x32>
 8009428:	0599      	lsls	r1, r3, #22
 800942a:	d402      	bmi.n	8009432 <_fflush_r+0x32>
 800942c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800942e:	f7ff fb98 	bl	8008b62 <__retarget_lock_acquire_recursive>
 8009432:	4628      	mov	r0, r5
 8009434:	4621      	mov	r1, r4
 8009436:	f7ff ff5f 	bl	80092f8 <__sflush_r>
 800943a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800943c:	07da      	lsls	r2, r3, #31
 800943e:	4605      	mov	r5, r0
 8009440:	d4e4      	bmi.n	800940c <_fflush_r+0xc>
 8009442:	89a3      	ldrh	r3, [r4, #12]
 8009444:	059b      	lsls	r3, r3, #22
 8009446:	d4e1      	bmi.n	800940c <_fflush_r+0xc>
 8009448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800944a:	f7ff fb8b 	bl	8008b64 <__retarget_lock_release_recursive>
 800944e:	e7dd      	b.n	800940c <_fflush_r+0xc>

08009450 <__swhatbuf_r>:
 8009450:	b570      	push	{r4, r5, r6, lr}
 8009452:	460c      	mov	r4, r1
 8009454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009458:	2900      	cmp	r1, #0
 800945a:	b096      	sub	sp, #88	@ 0x58
 800945c:	4615      	mov	r5, r2
 800945e:	461e      	mov	r6, r3
 8009460:	da0d      	bge.n	800947e <__swhatbuf_r+0x2e>
 8009462:	89a3      	ldrh	r3, [r4, #12]
 8009464:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009468:	f04f 0100 	mov.w	r1, #0
 800946c:	bf14      	ite	ne
 800946e:	2340      	movne	r3, #64	@ 0x40
 8009470:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009474:	2000      	movs	r0, #0
 8009476:	6031      	str	r1, [r6, #0]
 8009478:	602b      	str	r3, [r5, #0]
 800947a:	b016      	add	sp, #88	@ 0x58
 800947c:	bd70      	pop	{r4, r5, r6, pc}
 800947e:	466a      	mov	r2, sp
 8009480:	f000 f848 	bl	8009514 <_fstat_r>
 8009484:	2800      	cmp	r0, #0
 8009486:	dbec      	blt.n	8009462 <__swhatbuf_r+0x12>
 8009488:	9901      	ldr	r1, [sp, #4]
 800948a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800948e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009492:	4259      	negs	r1, r3
 8009494:	4159      	adcs	r1, r3
 8009496:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800949a:	e7eb      	b.n	8009474 <__swhatbuf_r+0x24>

0800949c <__smakebuf_r>:
 800949c:	898b      	ldrh	r3, [r1, #12]
 800949e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094a0:	079d      	lsls	r5, r3, #30
 80094a2:	4606      	mov	r6, r0
 80094a4:	460c      	mov	r4, r1
 80094a6:	d507      	bpl.n	80094b8 <__smakebuf_r+0x1c>
 80094a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	6123      	str	r3, [r4, #16]
 80094b0:	2301      	movs	r3, #1
 80094b2:	6163      	str	r3, [r4, #20]
 80094b4:	b003      	add	sp, #12
 80094b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094b8:	ab01      	add	r3, sp, #4
 80094ba:	466a      	mov	r2, sp
 80094bc:	f7ff ffc8 	bl	8009450 <__swhatbuf_r>
 80094c0:	9f00      	ldr	r7, [sp, #0]
 80094c2:	4605      	mov	r5, r0
 80094c4:	4639      	mov	r1, r7
 80094c6:	4630      	mov	r0, r6
 80094c8:	f7ff fbba 	bl	8008c40 <_malloc_r>
 80094cc:	b948      	cbnz	r0, 80094e2 <__smakebuf_r+0x46>
 80094ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094d2:	059a      	lsls	r2, r3, #22
 80094d4:	d4ee      	bmi.n	80094b4 <__smakebuf_r+0x18>
 80094d6:	f023 0303 	bic.w	r3, r3, #3
 80094da:	f043 0302 	orr.w	r3, r3, #2
 80094de:	81a3      	strh	r3, [r4, #12]
 80094e0:	e7e2      	b.n	80094a8 <__smakebuf_r+0xc>
 80094e2:	89a3      	ldrh	r3, [r4, #12]
 80094e4:	6020      	str	r0, [r4, #0]
 80094e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094ea:	81a3      	strh	r3, [r4, #12]
 80094ec:	9b01      	ldr	r3, [sp, #4]
 80094ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80094f2:	b15b      	cbz	r3, 800950c <__smakebuf_r+0x70>
 80094f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094f8:	4630      	mov	r0, r6
 80094fa:	f000 f81d 	bl	8009538 <_isatty_r>
 80094fe:	b128      	cbz	r0, 800950c <__smakebuf_r+0x70>
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	f023 0303 	bic.w	r3, r3, #3
 8009506:	f043 0301 	orr.w	r3, r3, #1
 800950a:	81a3      	strh	r3, [r4, #12]
 800950c:	89a3      	ldrh	r3, [r4, #12]
 800950e:	431d      	orrs	r5, r3
 8009510:	81a5      	strh	r5, [r4, #12]
 8009512:	e7cf      	b.n	80094b4 <__smakebuf_r+0x18>

08009514 <_fstat_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	4d07      	ldr	r5, [pc, #28]	@ (8009534 <_fstat_r+0x20>)
 8009518:	2300      	movs	r3, #0
 800951a:	4604      	mov	r4, r0
 800951c:	4608      	mov	r0, r1
 800951e:	4611      	mov	r1, r2
 8009520:	602b      	str	r3, [r5, #0]
 8009522:	f7fb fbb4 	bl	8004c8e <_fstat>
 8009526:	1c43      	adds	r3, r0, #1
 8009528:	d102      	bne.n	8009530 <_fstat_r+0x1c>
 800952a:	682b      	ldr	r3, [r5, #0]
 800952c:	b103      	cbz	r3, 8009530 <_fstat_r+0x1c>
 800952e:	6023      	str	r3, [r4, #0]
 8009530:	bd38      	pop	{r3, r4, r5, pc}
 8009532:	bf00      	nop
 8009534:	20025c38 	.word	0x20025c38

08009538 <_isatty_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	4d06      	ldr	r5, [pc, #24]	@ (8009554 <_isatty_r+0x1c>)
 800953c:	2300      	movs	r3, #0
 800953e:	4604      	mov	r4, r0
 8009540:	4608      	mov	r0, r1
 8009542:	602b      	str	r3, [r5, #0]
 8009544:	f7fb fbb3 	bl	8004cae <_isatty>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d102      	bne.n	8009552 <_isatty_r+0x1a>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	b103      	cbz	r3, 8009552 <_isatty_r+0x1a>
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	20025c38 	.word	0x20025c38

08009558 <_sbrk_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4d06      	ldr	r5, [pc, #24]	@ (8009574 <_sbrk_r+0x1c>)
 800955c:	2300      	movs	r3, #0
 800955e:	4604      	mov	r4, r0
 8009560:	4608      	mov	r0, r1
 8009562:	602b      	str	r3, [r5, #0]
 8009564:	f7fb fbbc 	bl	8004ce0 <_sbrk>
 8009568:	1c43      	adds	r3, r0, #1
 800956a:	d102      	bne.n	8009572 <_sbrk_r+0x1a>
 800956c:	682b      	ldr	r3, [r5, #0]
 800956e:	b103      	cbz	r3, 8009572 <_sbrk_r+0x1a>
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	bd38      	pop	{r3, r4, r5, pc}
 8009574:	20025c38 	.word	0x20025c38

08009578 <_init>:
 8009578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957a:	bf00      	nop
 800957c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957e:	bc08      	pop	{r3}
 8009580:	469e      	mov	lr, r3
 8009582:	4770      	bx	lr

08009584 <_fini>:
 8009584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009586:	bf00      	nop
 8009588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958a:	bc08      	pop	{r3}
 800958c:	469e      	mov	lr, r3
 800958e:	4770      	bx	lr
